
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d50  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f90  08003f90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f98  08003f98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  20000824  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d1ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f4d9  00000000  00000000  0002d24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f75  00000000  00000000  0003c725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c30  00000000  00000000  0003e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dc2ce  00000000  00000000  0003f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b58  00000000  00000000  0011b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024d26  00000000  00000000  0011c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140e1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003978  00000000  00000000  00140e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003ee4 	.word	0x08003ee4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08003ee4 	.word	0x08003ee4

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80004fe:	f3ef 8314 	mrs	r3, CONTROL
 8000502:	607b      	str	r3, [r7, #4]
  return(result);
 8000504:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000506:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000508:	69fb      	ldr	r3, [r7, #28]
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	61fb      	str	r3, [r7, #28]
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	f383 8814 	msr	CONTROL, r3
}
 800051a:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800051c:	f3ef 8314 	mrs	r3, CONTROL
 8000520:	60fb      	str	r3, [r7, #12]
  return(result);
 8000522:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000524:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	f023 0301 	bic.w	r3, r3, #1
 800052c:	61fb      	str	r3, [r7, #28]
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	f383 8814 	msr	CONTROL, r3
}
 8000538:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800053a:	f3ef 8314 	mrs	r3, CONTROL
 800053e:	617b      	str	r3, [r7, #20]
  return(result);
 8000540:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000542:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000544:	f7ff fe52 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000548:	f3ef 8314 	mrs	r3, CONTROL
 800054c:	61bb      	str	r3, [r7, #24]
  return(result);
 800054e:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000550:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <llenaArreglo32>:
/* USER CODE END 0 */
void llenaArreglo32(uint32_t *vectorOut, uint32_t longitud)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000564:	e005      	b.n	8000572 <llenaArreglo32+0x18>
	{
		vectorOut[longitud] = longitud;
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	1e5a      	subs	r2, r3, #1
 8000576:	603a      	str	r2, [r7, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d1f4      	bne.n	8000566 <llenaArreglo32+0xc>
	}
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <llenaArreglo16>:

void llenaArreglo16(uint16_t *vectorOut, uint32_t longitud)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000594:	e006      	b.n	80005a4 <llenaArreglo16+0x1a>
	{
		vectorOut[longitud] = longitud;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	b292      	uxth	r2, r2
 80005a2:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	1e5a      	subs	r2, r3, #1
 80005a8:	603a      	str	r2, [r7, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f3      	bne.n	8000596 <llenaArreglo16+0xc>
	}
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <zeros>:
//Recorro el arreglo de atrás hacia adelante
void zeros(uint32_t *vector, uint32_t longitud)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	while(longitud--)
 80005c6:	e005      	b.n	80005d4 <zeros+0x18>
	{
		vector[longitud] = 0;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	while(longitud--)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	1e5a      	subs	r2, r3, #1
 80005d8:	603a      	str	r2, [r7, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f4      	bne.n	80005c8 <zeros+0xc>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	603b      	str	r3, [r7, #0]
	while(longitud--)
 80005fa:	e00c      	b.n	8000616 <productoEscalar32+0x2a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	68b9      	ldr	r1, [r7, #8]
 800060c:	440b      	add	r3, r1
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	fb01 f202 	mul.w	r2, r1, r2
 8000614:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	1e5a      	subs	r2, r3, #1
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1ed      	bne.n	80005fc <productoEscalar32+0x10>
	}
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 800062e:	b480      	push	{r7}
 8000630:	b085      	sub	sp, #20
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
 800063a:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 800063c:	e00d      	b.n	800065a <productoEscalar16+0x2c>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	881a      	ldrh	r2, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	68b9      	ldr	r1, [r7, #8]
 800064e:	440b      	add	r3, r1
 8000650:	8879      	ldrh	r1, [r7, #2]
 8000652:	fb11 f202 	smulbb	r2, r1, r2
 8000656:	b292      	uxth	r2, r2
 8000658:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	1e5a      	subs	r2, r3, #1
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ec      	bne.n	800063e <productoEscalar16+0x10>
	}
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 8000680:	e01c      	b.n	80006bc <productoEscalar12+0x4a>
	{
	vectorOut[longitud] = vectorIn[longitud] * escalar;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4413      	add	r3, r2
 800068a:	881a      	ldrh	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	68b9      	ldr	r1, [r7, #8]
 8000692:	440b      	add	r3, r1
 8000694:	8879      	ldrh	r1, [r7, #2]
 8000696:	fb11 f202 	smulbb	r2, r1, r2
 800069a:	b292      	uxth	r2, r2
 800069c:	801a      	strh	r2, [r3, #0]
	if(vectorOut[longitud] > (uint16_t) 0x0FFF)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	4413      	add	r3, r2
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006ac:	d306      	bcc.n	80006bc <productoEscalar12+0x4a>
	{
		vectorOut[longitud] = (uint16_t) 0x0FFF;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006ba:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1dd      	bne.n	8000682 <productoEscalar12+0x10>
	}
	}
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006d8:	b08c      	sub	sp, #48	; 0x30
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f000 fd0a 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f88e 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f000 f9a6 	bl	8000a34 <MX_GPIO_Init>
  MX_ETH_Init();
 80006e8:	f000 f8f4 	bl	80008d4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006ec:	f000 f940 	bl	8000970 <MX_USART3_UART_Init>
  //printf("HOLA\r\n");
  MX_USB_OTG_FS_PCD_Init();
 80006f0:	f000 f972 	bl	80009d8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 80006f4:	f7ff ff00 	bl	80004f8 <PrivilegiosSVC>

  //const uint32_t Resultado = asm_sum (5, 3);
  /* USER CODE END 2 */
  uint32_t miLongitud = 10;
 80006f8:	230a      	movs	r3, #10
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t miEscalar1  = 10;
 80006fc:	230a      	movs	r3, #10
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t miEscalar2  = 100;
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	623b      	str	r3, [r7, #32]
  uint32_t miEscalar3  = 1000;
 8000704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000708:	61fb      	str	r3, [r7, #28]
  uint32_t miArreglo32[miLongitud];
 800070a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800070c:	460b      	mov	r3, r1
 800070e:	3b01      	subs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	2300      	movs	r3, #0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	f04f 0200 	mov.w	r2, #0
 800071c:	f04f 0300 	mov.w	r3, #0
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	0143      	lsls	r3, r0, #5
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	0142      	lsls	r2, r0, #5
 800072e:	2300      	movs	r3, #0
 8000730:	468a      	mov	sl, r1
 8000732:	469b      	mov	fp, r3
 8000734:	f04f 0200 	mov.w	r2, #0
 8000738:	f04f 0300 	mov.w	r3, #0
 800073c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000740:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000744:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000748:	008b      	lsls	r3, r1, #2
 800074a:	3307      	adds	r3, #7
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	ebad 0d03 	sub.w	sp, sp, r3
 8000754:	466b      	mov	r3, sp
 8000756:	3303      	adds	r3, #3
 8000758:	089b      	lsrs	r3, r3, #2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	617b      	str	r3, [r7, #20]
  uint16_t miArreglo16[miLongitud];
 800075e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000760:	460b      	mov	r3, r1
 8000762:	3b01      	subs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	2300      	movs	r3, #0
 8000768:	4688      	mov	r8, r1
 800076a:	4699      	mov	r9, r3
 800076c:	f04f 0200 	mov.w	r2, #0
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000778:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800077c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000780:	2300      	movs	r3, #0
 8000782:	460c      	mov	r4, r1
 8000784:	461d      	mov	r5, r3
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	012b      	lsls	r3, r5, #4
 8000790:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000794:	0122      	lsls	r2, r4, #4
 8000796:	004b      	lsls	r3, r1, #1
 8000798:	3307      	adds	r3, #7
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	ebad 0d03 	sub.w	sp, sp, r3
 80007a2:	466b      	mov	r3, sp
 80007a4:	3301      	adds	r3, #1
 80007a6:	085b      	lsrs	r3, r3, #1
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
  //uint32_t miArreglo4[miLongitud];

  zeros(miArreglo32,miLongitud);
 80007ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff04 	bl	80005bc <zeros>
  llenaArreglo32(miArreglo32,miLongitud);
 80007b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff fecf 	bl	800055a <llenaArreglo32>
  llenaArreglo16(miArreglo16,miLongitud);
 80007bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f7ff fee3 	bl	800058a <llenaArreglo16>

  productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c8:	6979      	ldr	r1, [r7, #20]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff0e 	bl	80005ec <productoEscalar32>
  productoEscalar16(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 80007d0:	6a3b      	ldr	r3, [r7, #32]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007d6:	68f9      	ldr	r1, [r7, #12]
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f7ff ff28 	bl	800062e <productoEscalar16>
  productoEscalar12(miArreglo16,miArreglo16,miLongitud,miEscalar3);
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007e4:	68f9      	ldr	r1, [r7, #12]
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff ff43 	bl	8000672 <productoEscalar12>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char miChar = 'a';
 80007ec:	2361      	movs	r3, #97	; 0x61
 80007ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while (1)
  {
    /* USER CODE END WHILE */
	  miChar++;
 80007f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007fc:	e7f9      	b.n	80007f2 <main+0x11e>
	...

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fe62 	bl	80034d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <SystemClock_Config+0xcc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SystemClock_Config+0xd0>)
 800084a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000870:	2308      	movs	r3, #8
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000874:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087e:	2307      	movs	r3, #7
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fba0 	bl	8001fcc <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000892:	f000 f97d 	bl	8000b90 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
      clocks dividers */
   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000896:	230f      	movs	r3, #15
 8000898:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a6:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	61fb      	str	r3, [r7, #28]
   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2105      	movs	r1, #5
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fe01 	bl	80024bc <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc4>
   {
     /* Initialization Error */
     Error_Handler();
 80008c0:	f000 f966 	bl	8000b90 <Error_Handler>
   }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	; 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_ETH_Init+0x84>)
 80008da:	4a20      	ldr	r2, [pc, #128]	; (800095c <MX_ETH_Init+0x88>)
 80008dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_ETH_Init+0x8c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_ETH_Init+0x8c>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_ETH_Init+0x8c>)
 80008ec:	22e1      	movs	r2, #225	; 0xe1
 80008ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_ETH_Init+0x8c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_ETH_Init+0x8c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_ETH_Init+0x8c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_ETH_Init+0x84>)
 8000904:	4a16      	ldr	r2, [pc, #88]	; (8000960 <MX_ETH_Init+0x8c>)
 8000906:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_ETH_Init+0x84>)
 800090a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800090e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_ETH_Init+0x84>)
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <MX_ETH_Init+0x90>)
 8000914:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_ETH_Init+0x84>)
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_ETH_Init+0x94>)
 800091a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_ETH_Init+0x84>)
 800091e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000922:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_ETH_Init+0x84>)
 8000926:	f000 fd5b 	bl	80013e0 <HAL_ETH_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 f92e 	bl	8000b90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000934:	2238      	movs	r2, #56	; 0x38
 8000936:	2100      	movs	r1, #0
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_ETH_Init+0x98>)
 800093a:	f002 fdcd 	bl	80034d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_ETH_Init+0x98>)
 8000940:	2221      	movs	r2, #33	; 0x21
 8000942:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_ETH_Init+0x98>)
 8000946:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800094a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_ETH_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000204 	.word	0x20000204
 800095c:	40028000 	.word	0x40028000
 8000960:	20000804 	.word	0x20000804
 8000964:	20000164 	.word	0x20000164
 8000968:	200000c4 	.word	0x200000c4
 800096c:	2000008c 	.word	0x2000008c

08000970 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_USART3_UART_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 800097c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000980:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 8000990:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000994:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 8000998:	220c      	movs	r2, #12
 800099a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_USART3_UART_Init+0x58>)
 80009aa:	f001 ffa7 	bl	80028fc <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d004      	beq.n	80009be <MX_USART3_UART_Init+0x4e>
  {
	printf("UART ERROR\r\n");
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_USART3_UART_Init+0x60>)
 80009b6:	f002 fe05 	bl	80035c4 <puts>
    Error_Handler();
 80009ba:	f000 f8e9 	bl	8000b90 <Error_Handler>
  }
  printf("UART OK\r\n");
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART3_UART_Init+0x64>)
 80009c0:	f002 fe00 	bl	80035c4 <puts>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200002b4 	.word	0x200002b4
 80009cc:	40004800 	.word	0x40004800
 80009d0:	08003efc 	.word	0x08003efc
 80009d4:	08003f08 	.word	0x08003f08

080009d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	f001 f9b9 	bl	8001d92 <HAL_PCD_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f8b3 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200002f8 	.word	0x200002f8

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a4b      	ldr	r2, [pc, #300]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	4b45      	ldr	r3, [pc, #276]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b42      	ldr	r3, [pc, #264]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a3d      	ldr	r2, [pc, #244]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a36      	ldr	r2, [pc, #216]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_GPIO_Init+0x14c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af8:	4822      	ldr	r0, [pc, #136]	; (8000b84 <MX_GPIO_Init+0x150>)
 8000afa:	f001 f931 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	4821      	ldr	r0, [pc, #132]	; (8000b88 <MX_GPIO_Init+0x154>)
 8000b04:	f001 f92c 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481b      	ldr	r0, [pc, #108]	; (8000b8c <MX_GPIO_Init+0x158>)
 8000b20:	f000 ff72 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b24:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4811      	ldr	r0, [pc, #68]	; (8000b84 <MX_GPIO_Init+0x150>)
 8000b3e:	f000 ff63 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <MX_GPIO_Init+0x154>)
 8000b5a:	f000 ff55 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_GPIO_Init+0x154>)
 8000b72:	f000 ff49 	bl	8001a08 <HAL_GPIO_Init>

}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40021800 	.word	0x40021800
 8000b8c:	40020800 	.word	0x40020800

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	; 0x38
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a55      	ldr	r2, [pc, #340]	; (8000d60 <HAL_ETH_MspInit+0x174>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	f040 80a4 	bne.w	8000d58 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	4b53      	ldr	r3, [pc, #332]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a52      	ldr	r2, [pc, #328]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b50      	ldr	r3, [pc, #320]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c28:	623b      	str	r3, [r7, #32]
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a4b      	ldr	r2, [pc, #300]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b49      	ldr	r3, [pc, #292]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	4b3e      	ldr	r3, [pc, #248]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a3d      	ldr	r2, [pc, #244]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <HAL_ETH_MspInit+0x178>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cd4:	2332      	movs	r3, #50	; 0x32
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce4:	230b      	movs	r3, #11
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	481e      	ldr	r0, [pc, #120]	; (8000d68 <HAL_ETH_MspInit+0x17c>)
 8000cf0:	f000 fe8a 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cf4:	2386      	movs	r3, #134	; 0x86
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d04:	230b      	movs	r3, #11
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4817      	ldr	r0, [pc, #92]	; (8000d6c <HAL_ETH_MspInit+0x180>)
 8000d10:	f000 fe7a 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d26:	230b      	movs	r3, #11
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480f      	ldr	r0, [pc, #60]	; (8000d70 <HAL_ETH_MspInit+0x184>)
 8000d32:	f000 fe69 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4808      	ldr	r0, [pc, #32]	; (8000d74 <HAL_ETH_MspInit+0x188>)
 8000d54:	f000 fe58 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3738      	adds	r7, #56	; 0x38
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40028000 	.word	0x40028000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400
 8000d74:	40021800 	.word	0x40021800

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_UART_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12c      	bne.n	8000df4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de4:	2307      	movs	r3, #7
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000df0:	f000 fe0a 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40004800 	.word	0x40004800
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020c00 	.word	0x40020c00

08000e08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e28:	d13f      	bne.n	8000eaa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_PCD_MspInit+0xac>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <HAL_PCD_MspInit+0xac>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_PCD_MspInit+0xac>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e46:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e58:	230a      	movs	r3, #10
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <HAL_PCD_MspInit+0xb0>)
 8000e64:	f000 fdd0 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <HAL_PCD_MspInit+0xb0>)
 8000e7e:	f000 fdc3 	bl	8001a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_PCD_MspInit+0xac>)
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_PCD_MspInit+0xac>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_PCD_MspInit+0xac>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_PCD_MspInit+0xac>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_PCD_MspInit+0xac>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000ee0:	f3ef 8314 	mrs	r3, CONTROL
 8000ee4:	607b      	str	r3, [r7, #4]
  return(result);
 8000ee6:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8000ee8:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	f383 8814 	msr	CONTROL, r3
}
 8000efc:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f92f 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e00a      	b.n	8000f5a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f44:	f3af 8000 	nop.w
 8000f48:	4601      	mov	r1, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	60ba      	str	r2, [r7, #8]
 8000f50:	b2ca      	uxtb	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dbf0      	blt.n	8000f44 <_read+0x12>
	}

return len;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e009      	b.n	8000f92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbf1      	blt.n	8000f7e <_write+0x12>
	}
	return len;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_close>:

int _close(int file)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fcc:	605a      	str	r2, [r3, #4]
	return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_isatty>:

int _isatty(int file)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	return 1;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
	return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f002 fa22 	bl	8003484 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20030000 	.word	0x20030000
 800106c:	00000400 	.word	0x00000400
 8001070:	2000080c 	.word	0x2000080c
 8001074:	20000828 	.word	0x20000828

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 800109c:	bf00      	nop
  nop
 800109e:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ca:	f7ff ffd5 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f002 f9df 	bl	8003490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff faff 	bl	80006d4 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010e4:	08003fa0 	.word	0x08003fa0
  ldr r2, =_sbss
 80010e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010ec:	20000824 	.word	0x20000824

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_Init+0x34>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_Init+0x34>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001102:	6013      	str	r3, [r2, #0]
/*#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif // DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x34>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x34>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 f931 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fd3e 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023c00 	.word	0x40023c00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f93b 	bl	80013c6 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f911 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000810 	.word	0x20000810

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000810 	.word	0x20000810

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff47 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff5c 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffb0 	bl	8001334 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e06c      	b.n	80014cc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2223      	movs	r2, #35	; 0x23
 8001400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fbf1 	bl	8000bec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_ETH_Init+0xf4>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <HAL_ETH_Init+0xf4>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_ETH_Init+0xf4>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_ETH_Init+0xf8>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <HAL_ETH_Init+0xf8>)
 800142c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001430:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_ETH_Init+0xf8>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	4927      	ldr	r1, [pc, #156]	; (80014d8 <HAL_ETH_Init+0xf8>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_ETH_Init+0xf8>)
 8001442:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800145a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800145c:	f7ff feaa 	bl	80011b4 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001462:	e011      	b.n	8001488 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001464:	f7ff fea6 	bl	80011b4 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001472:	d909      	bls.n	8001488 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2204      	movs	r2, #4
 8001478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	22e0      	movs	r2, #224	; 0xe0
 8001480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e021      	b.n	80014cc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e4      	bne.n	8001464 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f944 	bl	8001728 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f9eb 	bl	800187c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fa41 	bl	800192e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	461a      	mov	r2, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f9a9 	bl	800180c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2210      	movs	r2, #16
 80014c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800

080014dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4b47      	ldr	r3, [pc, #284]	; (8001610 <ETH_SetMACConfig+0x134>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	7c1b      	ldrb	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <ETH_SetMACConfig+0x28>
 80014fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001502:	e000      	b.n	8001506 <ETH_SetMACConfig+0x2a>
 8001504:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7c5b      	ldrb	r3, [r3, #17]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <ETH_SetMACConfig+0x38>
 800150e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001512:	e000      	b.n	8001516 <ETH_SetMACConfig+0x3a>
 8001514:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001516:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800151c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	7fdb      	ldrb	r3, [r3, #31]
 8001522:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001524:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800152a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	7f92      	ldrb	r2, [r2, #30]
 8001530:	2a00      	cmp	r2, #0
 8001532:	d102      	bne.n	800153a <ETH_SetMACConfig+0x5e>
 8001534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001538:	e000      	b.n	800153c <ETH_SetMACConfig+0x60>
 800153a:	2200      	movs	r2, #0
                        macconf->Speed |
 800153c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7f1b      	ldrb	r3, [r3, #28]
 8001542:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001544:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800154a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	791b      	ldrb	r3, [r3, #4]
 8001550:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001552:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	f892 2020 	ldrb.w	r2, [r2, #32]
 800155a:	2a00      	cmp	r2, #0
 800155c:	d102      	bne.n	8001564 <ETH_SetMACConfig+0x88>
 800155e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001562:	e000      	b.n	8001566 <ETH_SetMACConfig+0x8a>
 8001564:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001566:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	7bdb      	ldrb	r3, [r3, #15]
 800156c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800156e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001574:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800157c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800157e:	4313      	orrs	r3, r2
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff fe18 	bl	80011cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015b2:	4013      	ands	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015c2:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80015c8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80015d0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80015d8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015e0:	4313      	orrs	r3, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fde7 	bl	80011cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	ff20810f 	.word	0xff20810f

08001614 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <ETH_SetDMAConfig+0x110>)
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	7b1b      	ldrb	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <ETH_SetDMAConfig+0x2c>
 800163a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800163e:	e000      	b.n	8001642 <ETH_SetDMAConfig+0x2e>
 8001640:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	7b5b      	ldrb	r3, [r3, #13]
 8001646:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001648:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	7f52      	ldrb	r2, [r2, #29]
 800164e:	2a00      	cmp	r2, #0
 8001650:	d102      	bne.n	8001658 <ETH_SetDMAConfig+0x44>
 8001652:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001656:	e000      	b.n	800165a <ETH_SetDMAConfig+0x46>
 8001658:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800165a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7b9b      	ldrb	r3, [r3, #14]
 8001660:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001662:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001668:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	7f1b      	ldrb	r3, [r3, #28]
 800166e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001670:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	7f9b      	ldrb	r3, [r3, #30]
 8001676:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001678:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800167e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001686:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001688:	4313      	orrs	r3, r2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fd8e 	bl	80011cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b8:	461a      	mov	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	791b      	ldrb	r3, [r3, #4]
 80016c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff fd5f 	bl	80011cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	f8de3f23 	.word	0xf8de3f23

08001728 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0a6      	sub	sp, #152	; 0x98
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800173c:	2300      	movs	r3, #0
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001764:	2300      	movs	r3, #0
 8001766:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800176e:	2300      	movs	r3, #0
 8001770:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800178a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800179c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe9a 	bl	80014dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017a8:	2301      	movs	r3, #1
 80017aa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017d4:	2301      	movs	r3, #1
 80017d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017dc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ff08 	bl	8001614 <ETH_SetDMAConfig>
}
 8001804:	bf00      	nop
 8001806:	3798      	adds	r7, #152	; 0x98
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3305      	adds	r3, #5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	3204      	adds	r2, #4
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <ETH_MACAddressConfig+0x68>)
 800182e:	4413      	add	r3, r2
 8001830:	461a      	mov	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3303      	adds	r3, #3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	061a      	lsls	r2, r3, #24
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3302      	adds	r3, #2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	4313      	orrs	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <ETH_MACAddressConfig+0x6c>)
 800185e:	4413      	add	r3, r2
 8001860:	461a      	mov	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	6013      	str	r3, [r2, #0]
}
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40028040 	.word	0x40028040
 8001878:	40028044 	.word	0x40028044

0800187c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e03e      	b.n	8001908 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68d9      	ldr	r1, [r3, #12]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	3206      	adds	r2, #6
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d80c      	bhi.n	80018ec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68d9      	ldr	r1, [r3, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	e004      	b.n	80018f6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3301      	adds	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d9bd      	bls.n	800188a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001920:	611a      	str	r2, [r3, #16]
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e046      	b.n	80019ca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6919      	ldr	r1, [r3, #16]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001978:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001980:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	3212      	adds	r2, #18
 8001996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d80c      	bhi.n	80019ba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6919      	ldr	r1, [r3, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	e004      	b.n	80019c4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d9b5      	bls.n	800193c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fa:	60da      	str	r2, [r3, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e177      	b.n	8001d14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f040 8166 	bne.w	8001d0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d005      	beq.n	8001a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d130      	bne.n	8001abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 0201 	and.w	r2, r3, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d017      	beq.n	8001af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d123      	bne.n	8001b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3208      	adds	r2, #8
 8001b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	08da      	lsrs	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	69b9      	ldr	r1, [r7, #24]
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80c0 	beq.w	8001d0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_GPIO_Init+0x324>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_GPIO_Init+0x324>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_GPIO_Init+0x324>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001baa:	4a61      	ldr	r2, [pc, #388]	; (8001d30 <HAL_GPIO_Init+0x328>)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a58      	ldr	r2, [pc, #352]	; (8001d34 <HAL_GPIO_Init+0x32c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d037      	beq.n	8001c46 <HAL_GPIO_Init+0x23e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a57      	ldr	r2, [pc, #348]	; (8001d38 <HAL_GPIO_Init+0x330>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d031      	beq.n	8001c42 <HAL_GPIO_Init+0x23a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a56      	ldr	r2, [pc, #344]	; (8001d3c <HAL_GPIO_Init+0x334>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02b      	beq.n	8001c3e <HAL_GPIO_Init+0x236>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a55      	ldr	r2, [pc, #340]	; (8001d40 <HAL_GPIO_Init+0x338>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d025      	beq.n	8001c3a <HAL_GPIO_Init+0x232>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a54      	ldr	r2, [pc, #336]	; (8001d44 <HAL_GPIO_Init+0x33c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01f      	beq.n	8001c36 <HAL_GPIO_Init+0x22e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a53      	ldr	r2, [pc, #332]	; (8001d48 <HAL_GPIO_Init+0x340>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <HAL_GPIO_Init+0x22a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_GPIO_Init+0x344>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x226>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a51      	ldr	r2, [pc, #324]	; (8001d50 <HAL_GPIO_Init+0x348>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_GPIO_Init+0x222>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a50      	ldr	r2, [pc, #320]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_GPIO_Init+0x21e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	; (8001d58 <HAL_GPIO_Init+0x350>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_GPIO_Init+0x21a>
 8001c1e:	2309      	movs	r3, #9
 8001c20:	e012      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c22:	230a      	movs	r3, #10
 8001c24:	e010      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c26:	2308      	movs	r3, #8
 8001c28:	e00e      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e00c      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e00a      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e008      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_Init+0x240>
 8001c46:	2300      	movs	r3, #0
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f002 0203 	and.w	r2, r2, #3
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c58:	4935      	ldr	r1, [pc, #212]	; (8001d30 <HAL_GPIO_Init+0x328>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8a:	4a34      	ldr	r2, [pc, #208]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb4:	4a29      	ldr	r2, [pc, #164]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_GPIO_Init+0x354>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b0f      	cmp	r3, #15
 8001d18:	f67f ae84 	bls.w	8001a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40021400 	.word	0x40021400
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40021c00 	.word	0x40021c00
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40022400 	.word	0x40022400
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d7c:	e003      	b.n	8001d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	619a      	str	r2, [r3, #24]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d94:	b08f      	sub	sp, #60	; 0x3c
 8001d96:	af0a      	add	r7, sp, #40	; 0x28
 8001d98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e10f      	b.n	8001fc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff f822 	bl	8000e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 f8ad 	bl	8002f42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	687e      	ldr	r6, [r7, #4]
 8001df0:	466d      	mov	r5, sp
 8001df2:	f106 0410 	add.w	r4, r6, #16
 8001df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e02:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e06:	1d33      	adds	r3, r6, #4
 8001e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	f001 f838 	bl	8002e80 <USB_CoreInit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0d0      	b.n	8001fc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 f89b 	bl	8002f64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	e04a      	b.n	8001eca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	333d      	adds	r3, #61	; 0x3d
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	333c      	adds	r3, #60	; 0x3c
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	b298      	uxth	r0, r3
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3344      	adds	r3, #68	; 0x44
 8001e70:	4602      	mov	r2, r0
 8001e72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3340      	adds	r3, #64	; 0x40
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3348      	adds	r3, #72	; 0x48
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	334c      	adds	r3, #76	; 0x4c
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3354      	adds	r3, #84	; 0x54
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d3af      	bcc.n	8001e34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e044      	b.n	8001f64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	3301      	adds	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3b5      	bcc.n	8001eda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	687e      	ldr	r6, [r7, #4]
 8001f76:	466d      	mov	r5, sp
 8001f78:	f106 0410 	add.w	r4, r6, #16
 8001f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f88:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8c:	1d33      	adds	r3, r6, #4
 8001f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f90:	6838      	ldr	r0, [r7, #0]
 8001f92:	f001 f833 	bl	8002ffc <USB_DevInit>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e00d      	b.n	8001fc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 f9fe 	bl	80033be <USB_DevDisconnect>

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e267      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d075      	beq.n	80020d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d00c      	beq.n	8002010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d112      	bne.n	8002028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002002:	4b82      	ldr	r3, [pc, #520]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800200e:	d10b      	bne.n	8002028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	4b7e      	ldr	r3, [pc, #504]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d05b      	beq.n	80020d4 <HAL_RCC_OscConfig+0x108>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d157      	bne.n	80020d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e242      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002030:	d106      	bne.n	8002040 <HAL_RCC_OscConfig+0x74>
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a75      	ldr	r2, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0xb0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x98>
 800204a:	4b70      	ldr	r3, [pc, #448]	; (800220c <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a6f      	ldr	r2, [pc, #444]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b6d      	ldr	r3, [pc, #436]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6c      	ldr	r2, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x240>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0xb0>
 8002064:	4b69      	ldr	r3, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a68      	ldr	r2, [pc, #416]	; (800220c <HAL_RCC_OscConfig+0x240>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b66      	ldr	r3, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a65      	ldr	r2, [pc, #404]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff f896 	bl	80011b4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff f892 	bl	80011b4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e207      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0xc0>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f882 	bl	80011b4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff f87e 	bl	80011b4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1f3      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	4b51      	ldr	r3, [pc, #324]	; (800220c <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0xe8>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d063      	beq.n	80021aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e2:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d11c      	bne.n	8002134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fa:	4b44      	ldr	r3, [pc, #272]	; (800220c <HAL_RCC_OscConfig+0x240>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x152>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1c7      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b3b      	ldr	r3, [pc, #236]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4937      	ldr	r1, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x240>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	e03a      	b.n	80021aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213c:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_RCC_OscConfig+0x244>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7ff f837 	bl	80011b4 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214a:	f7ff f833 	bl	80011b4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1a8      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4925      	ldr	r1, [pc, #148]	; (800220c <HAL_RCC_OscConfig+0x240>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_OscConfig+0x244>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f816 	bl	80011b4 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218c:	f7ff f812 	bl	80011b4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e187      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d036      	beq.n	8002224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_RCC_OscConfig+0x248>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe fff6 	bl	80011b4 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021cc:	f7fe fff2 	bl	80011b4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e167      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_OscConfig+0x240>)
 80021e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x200>
 80021ea:	e01b      	b.n	8002224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_OscConfig+0x248>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7fe ffdf 	bl	80011b4 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	e00e      	b.n	8002218 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021fa:	f7fe ffdb 	bl	80011b4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d907      	bls.n	8002218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e150      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
 800220c:	40023800 	.word	0x40023800
 8002210:	42470000 	.word	0x42470000
 8002214:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002218:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_RCC_OscConfig+0x470>)
 800221a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ea      	bne.n	80021fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8097 	beq.w	8002360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002236:	4b81      	ldr	r3, [pc, #516]	; (800243c <HAL_RCC_OscConfig+0x470>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10f      	bne.n	8002262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b7d      	ldr	r3, [pc, #500]	; (800243c <HAL_RCC_OscConfig+0x470>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a7c      	ldr	r2, [pc, #496]	; (800243c <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b7a      	ldr	r3, [pc, #488]	; (800243c <HAL_RCC_OscConfig+0x470>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b77      	ldr	r3, [pc, #476]	; (8002440 <HAL_RCC_OscConfig+0x474>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226e:	4b74      	ldr	r3, [pc, #464]	; (8002440 <HAL_RCC_OscConfig+0x474>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a73      	ldr	r2, [pc, #460]	; (8002440 <HAL_RCC_OscConfig+0x474>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7fe ff9b 	bl	80011b4 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7fe ff97 	bl	80011b4 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e10c      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	4b6a      	ldr	r3, [pc, #424]	; (8002440 <HAL_RCC_OscConfig+0x474>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2ea>
 80022a8:	4b64      	ldr	r3, [pc, #400]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a63      	ldr	r2, [pc, #396]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	e01c      	b.n	80022f0 <HAL_RCC_OscConfig+0x324>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x30c>
 80022be:	4b5f      	ldr	r3, [pc, #380]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a5e      	ldr	r2, [pc, #376]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	4b5c      	ldr	r3, [pc, #368]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a5b      	ldr	r2, [pc, #364]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0x324>
 80022d8:	4b58      	ldr	r3, [pc, #352]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a57      	ldr	r2, [pc, #348]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	4b55      	ldr	r3, [pc, #340]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a54      	ldr	r2, [pc, #336]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d015      	beq.n	8002324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe ff5c 	bl	80011b4 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe ff58 	bl	80011b4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0cb      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	4b49      	ldr	r3, [pc, #292]	; (800243c <HAL_RCC_OscConfig+0x470>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ee      	beq.n	8002300 <HAL_RCC_OscConfig+0x334>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe ff46 	bl	80011b4 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7fe ff42 	bl	80011b4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e0b5      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCC_OscConfig+0x470>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ee      	bne.n	800232c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_RCC_OscConfig+0x470>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	4a38      	ldr	r2, [pc, #224]	; (800243c <HAL_RCC_OscConfig+0x470>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a1 	beq.w	80024ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800236a:	4b34      	ldr	r3, [pc, #208]	; (800243c <HAL_RCC_OscConfig+0x470>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b08      	cmp	r3, #8
 8002374:	d05c      	beq.n	8002430 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d141      	bne.n	8002402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_RCC_OscConfig+0x478>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe ff16 	bl	80011b4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe ff12 	bl	80011b4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e087      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	085b      	lsrs	r3, r3, #1
 80023c2:	3b01      	subs	r3, #1
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	491b      	ldr	r1, [pc, #108]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x478>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe feeb 	bl	80011b4 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e2:	f7fe fee7 	bl	80011b4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e05c      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_RCC_OscConfig+0x470>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x416>
 8002400:	e054      	b.n	80024ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCC_OscConfig+0x478>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fed4 	bl	80011b4 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fed0 	bl	80011b4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e045      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_OscConfig+0x470>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x444>
 800242e:	e03d      	b.n	80024ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d107      	bne.n	8002448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e038      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000
 8002444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCC_OscConfig+0x4ec>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d028      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d121      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d11a      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002478:	4013      	ands	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800247e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002480:	4293      	cmp	r3, r2
 8002482:	d111      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	3b01      	subs	r3, #1
 8002492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0cc      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d90c      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d044      	beq.n	80025dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d119      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d003      	beq.n	800257a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	2b03      	cmp	r3, #3
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e067      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 0203 	bic.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4934      	ldr	r1, [pc, #208]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ac:	f7fe fe02 	bl	80011b4 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7fe fdfe 	bl	80011b4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 020c 	and.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1eb      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d20c      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fd62 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00
 8002678:	40023800 	.word	0x40023800
 800267c:	08003f14 	.word	0x08003f14
 8002680:	20000000 	.word	0x20000000
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800268c:	b094      	sub	sp, #80	; 0x50
 800268e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
 8002694:	2300      	movs	r3, #0
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002698:	2300      	movs	r3, #0
 800269a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d00d      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x40>
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	f200 80e1 	bhi.w	8002874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x34>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ba:	e0db      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b73      	ldr	r3, [pc, #460]	; (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026c0:	e0db      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c2:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_GetSysClockFreq+0x208>)
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c6:	e0d8      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d063      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	2200      	movs	r2, #0
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
 80026f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	f04f 0000 	mov.w	r0, #0
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	0159      	lsls	r1, r3, #5
 8002708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270c:	0150      	lsls	r0, r2, #5
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4621      	mov	r1, r4
 8002714:	1a51      	subs	r1, r2, r1
 8002716:	6139      	str	r1, [r7, #16]
 8002718:	4629      	mov	r1, r5
 800271a:	eb63 0301 	sbc.w	r3, r3, r1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800272c:	4659      	mov	r1, fp
 800272e:	018b      	lsls	r3, r1, #6
 8002730:	4651      	mov	r1, sl
 8002732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002736:	4651      	mov	r1, sl
 8002738:	018a      	lsls	r2, r1, #6
 800273a:	4651      	mov	r1, sl
 800273c:	ebb2 0801 	subs.w	r8, r2, r1
 8002740:	4659      	mov	r1, fp
 8002742:	eb63 0901 	sbc.w	r9, r3, r1
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275a:	4690      	mov	r8, r2
 800275c:	4699      	mov	r9, r3
 800275e:	4623      	mov	r3, r4
 8002760:	eb18 0303 	adds.w	r3, r8, r3
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	462b      	mov	r3, r5
 8002768:	eb49 0303 	adc.w	r3, r9, r3
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800277a:	4629      	mov	r1, r5
 800277c:	024b      	lsls	r3, r1, #9
 800277e:	4621      	mov	r1, r4
 8002780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002784:	4621      	mov	r1, r4
 8002786:	024a      	lsls	r2, r1, #9
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278e:	2200      	movs	r2, #0
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
 8002792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002798:	f7fd fd2c 	bl	80001f4 <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4613      	mov	r3, r2
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a4:	e058      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	099b      	lsrs	r3, r3, #6
 80027ac:	2200      	movs	r2, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	4611      	mov	r1, r2
 80027b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
 80027bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c0:	4642      	mov	r2, r8
 80027c2:	464b      	mov	r3, r9
 80027c4:	f04f 0000 	mov.w	r0, #0
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	0159      	lsls	r1, r3, #5
 80027ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d2:	0150      	lsls	r0, r2, #5
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4641      	mov	r1, r8
 80027da:	ebb2 0a01 	subs.w	sl, r2, r1
 80027de:	4649      	mov	r1, r9
 80027e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027f8:	ebb2 040a 	subs.w	r4, r2, sl
 80027fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	00eb      	lsls	r3, r5, #3
 800280a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800280e:	00e2      	lsls	r2, r4, #3
 8002810:	4614      	mov	r4, r2
 8002812:	461d      	mov	r5, r3
 8002814:	4643      	mov	r3, r8
 8002816:	18e3      	adds	r3, r4, r3
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	464b      	mov	r3, r9
 800281c:	eb45 0303 	adc.w	r3, r5, r3
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800282e:	4629      	mov	r1, r5
 8002830:	028b      	lsls	r3, r1, #10
 8002832:	4621      	mov	r1, r4
 8002834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002838:	4621      	mov	r1, r4
 800283a:	028a      	lsls	r2, r1, #10
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002842:	2200      	movs	r2, #0
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	61fa      	str	r2, [r7, #28]
 8002848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284c:	f7fd fcd2 	bl	80001f4 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	3301      	adds	r3, #1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800286a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800287c:	4618      	mov	r0, r3
 800287e:	3750      	adds	r7, #80	; 0x50
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff0 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0a9b      	lsrs	r3, r3, #10
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08003f24 	.word	0x08003f24

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffdc 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0b5b      	lsrs	r3, r3, #13
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08003f24 	.word	0x08003f24

080028fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e03f      	b.n	800298e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe fa28 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	; 0x24
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f829 	bl	8002998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800299c:	b0c0      	sub	sp, #256	; 0x100
 800299e:	af00      	add	r7, sp, #0
 80029a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	ea40 0301 	orr.w	r3, r0, r1
 80029c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029f0:	f021 010c 	bic.w	r1, r1, #12
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029fe:	430b      	orrs	r3, r1
 8002a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a12:	6999      	ldr	r1, [r3, #24]
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	ea40 0301 	orr.w	r3, r0, r1
 8002a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b8f      	ldr	r3, [pc, #572]	; (8002c64 <UART_SetConfig+0x2cc>)
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d005      	beq.n	8002a38 <UART_SetConfig+0xa0>
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b8d      	ldr	r3, [pc, #564]	; (8002c68 <UART_SetConfig+0x2d0>)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d104      	bne.n	8002a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff ff4c 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8002a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a40:	e003      	b.n	8002a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a42:	f7ff ff33 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8002a46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a54:	f040 810c 	bne.w	8002c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	1891      	adds	r1, r2, r2
 8002a70:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a72:	415b      	adcs	r3, r3
 8002a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	eb12 0801 	adds.w	r8, r2, r1
 8002a80:	4629      	mov	r1, r5
 8002a82:	eb43 0901 	adc.w	r9, r3, r1
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	eb18 0303 	adds.w	r3, r8, r3
 8002aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	eb49 0303 	adc.w	r3, r9, r3
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002abe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	18db      	adds	r3, r3, r3
 8002aca:	653b      	str	r3, [r7, #80]	; 0x50
 8002acc:	4613      	mov	r3, r2
 8002ace:	eb42 0303 	adc.w	r3, r2, r3
 8002ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002adc:	f7fd fb8a 	bl	80001f4 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	011c      	lsls	r4, r3, #4
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002af8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b10:	4641      	mov	r1, r8
 8002b12:	eb12 0a01 	adds.w	sl, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb43 0b01 	adc.w	fp, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b30:	4692      	mov	sl, r2
 8002b32:	469b      	mov	fp, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	eb1a 0303 	adds.w	r3, sl, r3
 8002b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	eb4b 0303 	adc.w	r3, fp, r3
 8002b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	18db      	adds	r3, r3, r3
 8002b60:	643b      	str	r3, [r7, #64]	; 0x40
 8002b62:	4613      	mov	r3, r2
 8002b64:	eb42 0303 	adc.w	r3, r2, r3
 8002b68:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b72:	f7fd fb3f 	bl	80001f4 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2264      	movs	r2, #100	; 0x64
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	1acb      	subs	r3, r1, r3
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002b94:	fba3 2302 	umull	r2, r3, r3, r2
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ba0:	441c      	add	r4, r3
 8002ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	1851      	adds	r1, r2, r1
 8002bc8:	6339      	str	r1, [r7, #48]	; 0x30
 8002bca:	4649      	mov	r1, r9
 8002bcc:	414b      	adcs	r3, r1
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bdc:	4659      	mov	r1, fp
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4651      	mov	r1, sl
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4651      	mov	r1, sl
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bf8:	464b      	mov	r3, r9
 8002bfa:	460a      	mov	r2, r1
 8002bfc:	eb42 0303 	adc.w	r3, r2, r3
 8002c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c18:	460b      	mov	r3, r1
 8002c1a:	18db      	adds	r3, r3, r3
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1e:	4613      	mov	r3, r2
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c2e:	f7fd fae1 	bl	80001f4 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002c38:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	2164      	movs	r1, #100	; 0x64
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	3332      	adds	r3, #50	; 0x32
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	f003 0207 	and.w	r2, r3, #7
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4422      	add	r2, r4
 8002c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c60:	e105      	b.n	8002e6e <UART_SetConfig+0x4d6>
 8002c62:	bf00      	nop
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40011400 	.word	0x40011400
 8002c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c82:	4642      	mov	r2, r8
 8002c84:	464b      	mov	r3, r9
 8002c86:	1891      	adds	r1, r2, r2
 8002c88:	6239      	str	r1, [r7, #32]
 8002c8a:	415b      	adcs	r3, r3
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c92:	4641      	mov	r1, r8
 8002c94:	1854      	adds	r4, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb43 0501 	adc.w	r5, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	00eb      	lsls	r3, r5, #3
 8002ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	18e3      	adds	r3, r4, r3
 8002cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cb8:	464b      	mov	r3, r9
 8002cba:	eb45 0303 	adc.w	r3, r5, r3
 8002cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cde:	4629      	mov	r1, r5
 8002ce0:	008b      	lsls	r3, r1, #2
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce8:	4621      	mov	r1, r4
 8002cea:	008a      	lsls	r2, r1, #2
 8002cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cf0:	f7fd fa80 	bl	80001f4 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	011c      	lsls	r4, r3, #4
 8002d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	1891      	adds	r1, r2, r2
 8002d1a:	61b9      	str	r1, [r7, #24]
 8002d1c:	415b      	adcs	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d24:	4641      	mov	r1, r8
 8002d26:	1851      	adds	r1, r2, r1
 8002d28:	6139      	str	r1, [r7, #16]
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	00cb      	lsls	r3, r1, #3
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d46:	4651      	mov	r1, sl
 8002d48:	00ca      	lsls	r2, r1, #3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4642      	mov	r2, r8
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d58:	464b      	mov	r3, r9
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	4641      	mov	r1, r8
 8002d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d86:	4641      	mov	r1, r8
 8002d88:	008a      	lsls	r2, r1, #2
 8002d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d8e:	f7fd fa31 	bl	80001f4 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002d98:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	2164      	movs	r1, #100	; 0x64
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	3332      	adds	r3, #50	; 0x32
 8002daa:	4a34      	ldr	r2, [pc, #208]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db6:	441c      	add	r4, r3
 8002db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002dc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002dc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dc6:	4642      	mov	r2, r8
 8002dc8:	464b      	mov	r3, r9
 8002dca:	1891      	adds	r1, r2, r2
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	415b      	adcs	r3, r3
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd6:	4641      	mov	r1, r8
 8002dd8:	1851      	adds	r1, r2, r1
 8002dda:	6039      	str	r1, [r7, #0]
 8002ddc:	4649      	mov	r1, r9
 8002dde:	414b      	adcs	r3, r1
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dee:	4659      	mov	r1, fp
 8002df0:	00cb      	lsls	r3, r1, #3
 8002df2:	4651      	mov	r1, sl
 8002df4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df8:	4651      	mov	r1, sl
 8002dfa:	00ca      	lsls	r2, r1, #3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4603      	mov	r3, r0
 8002e02:	4642      	mov	r2, r8
 8002e04:	189b      	adds	r3, r3, r2
 8002e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e08:	464b      	mov	r3, r9
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	eb42 0303 	adc.w	r3, r2, r3
 8002e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e1c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	008b      	lsls	r3, r1, #2
 8002e2e:	4641      	mov	r1, r8
 8002e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e34:	4641      	mov	r1, r8
 8002e36:	008a      	lsls	r2, r1, #2
 8002e38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e3c:	f7fd f9da 	bl	80001f4 <__aeabi_uldivmod>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002e46:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2164      	movs	r1, #100	; 0x64
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	3332      	adds	r3, #50	; 0x32
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4422      	add	r2, r4
 8002e6c:	609a      	str	r2, [r3, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7a:	bf00      	nop
 8002e7c:	51eb851f 	.word	0x51eb851f

08002e80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e80:	b084      	sub	sp, #16
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	f107 001c 	add.w	r0, r7, #28
 8002e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d122      	bne.n	8002ede <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 faa2 	bl	800341c <USB_CoreReset>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e01a      	b.n	8002f14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa96 	bl	800341c <USB_CoreReset>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
 8002f06:	e005      	b.n	8002f14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10b      	bne.n	8002f32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f043 0206 	orr.w	r2, r3, #6
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f3e:	b004      	add	sp, #16
 8002f40:	4770      	bx	lr

08002f42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 0201 	bic.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d115      	bne.n	8002fb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7fe f91a 	bl	80011cc <HAL_Delay>
      ms++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa2e 	bl	8003400 <USB_GetMode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d01e      	beq.n	8002fe8 <USB_SetCurrentMode+0x84>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b31      	cmp	r3, #49	; 0x31
 8002fae:	d9f0      	bls.n	8002f92 <USB_SetCurrentMode+0x2e>
 8002fb0:	e01a      	b.n	8002fe8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d115      	bne.n	8002fe4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f7fe f901 	bl	80011cc <HAL_Delay>
      ms++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fa15 	bl	8003400 <USB_GetMode>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <USB_SetCurrentMode+0x84>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b31      	cmp	r3, #49	; 0x31
 8002fe0:	d9f0      	bls.n	8002fc4 <USB_SetCurrentMode+0x60>
 8002fe2:	e001      	b.n	8002fe8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e005      	b.n	8002ff4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b32      	cmp	r3, #50	; 0x32
 8002fec:	d101      	bne.n	8002ff2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b086      	sub	sp, #24
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800300a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e009      	b.n	8003030 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3340      	adds	r3, #64	; 0x40
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	2200      	movs	r2, #0
 8003028:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	3301      	adds	r3, #1
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0e      	cmp	r3, #14
 8003034:	d9f2      	bls.n	800301c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11c      	bne.n	8003076 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
 8003074:	e00b      	b.n	800308e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003094:	461a      	mov	r2, r3
 8003096:	2300      	movs	r3, #0
 8003098:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a0:	4619      	mov	r1, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	461a      	mov	r2, r3
 80030aa:	680b      	ldr	r3, [r1, #0]
 80030ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10c      	bne.n	80030ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030ba:	2100      	movs	r1, #0
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f965 	bl	800338c <USB_SetDevSpeed>
 80030c2:	e008      	b.n	80030d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030c4:	2101      	movs	r1, #1
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f960 	bl	800338c <USB_SetDevSpeed>
 80030cc:	e003      	b.n	80030d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030ce:	2103      	movs	r1, #3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f95b 	bl	800338c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030d6:	2110      	movs	r1, #16
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f8f3 	bl	80032c4 <USB_FlushTxFifo>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f91f 	bl	800332c <USB_FlushRxFifo>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fe:	461a      	mov	r2, r3
 8003100:	2300      	movs	r3, #0
 8003102:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310a:	461a      	mov	r2, r3
 800310c:	2300      	movs	r3, #0
 800310e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003116:	461a      	mov	r2, r3
 8003118:	2300      	movs	r3, #0
 800311a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	e043      	b.n	80031aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003138:	d118      	bne.n	800316c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314c:	461a      	mov	r2, r3
 800314e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e013      	b.n	800317e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003162:	461a      	mov	r2, r3
 8003164:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e008      	b.n	800317e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003178:	461a      	mov	r2, r3
 800317a:	2300      	movs	r3, #0
 800317c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4413      	add	r3, r2
 8003186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318a:	461a      	mov	r2, r3
 800318c:	2300      	movs	r3, #0
 800318e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319c:	461a      	mov	r2, r3
 800319e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	3301      	adds	r3, #1
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d3b7      	bcc.n	8003122 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	e043      	b.n	8003240 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ce:	d118      	bne.n	8003202 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	461a      	mov	r2, r3
 80031e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e013      	b.n	8003214 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f8:	461a      	mov	r2, r3
 80031fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	e008      	b.n	8003214 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320e:	461a      	mov	r2, r3
 8003210:	2300      	movs	r3, #0
 8003212:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	461a      	mov	r2, r3
 8003222:	2300      	movs	r3, #0
 8003224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003238:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	3301      	adds	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	429a      	cmp	r2, r3
 8003246:	d3b7      	bcc.n	80031b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003268:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <USB_DevInit+0x2c4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f043 0208 	orr.w	r2, r3, #8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032a8:	f043 0304 	orr.w	r3, r3, #4
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032bc:	b004      	add	sp, #16
 80032be:	4770      	bx	lr
 80032c0:	803c3800 	.word	0x803c3800

080032c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a13      	ldr	r2, [pc, #76]	; (8003328 <USB_FlushTxFifo+0x64>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e01b      	b.n	800331c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	daf2      	bge.n	80032d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	019b      	lsls	r3, r3, #6
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3301      	adds	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a08      	ldr	r2, [pc, #32]	; (8003328 <USB_FlushTxFifo+0x64>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e006      	b.n	800331c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b20      	cmp	r3, #32
 8003318:	d0f0      	beq.n	80032fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	00030d40 	.word	0x00030d40

0800332c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a11      	ldr	r2, [pc, #68]	; (8003388 <USB_FlushRxFifo+0x5c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e018      	b.n	800337c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	daf2      	bge.n	8003338 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2210      	movs	r2, #16
 800335a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3301      	adds	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4a08      	ldr	r2, [pc, #32]	; (8003388 <USB_FlushRxFifo+0x5c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e006      	b.n	800337c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b10      	cmp	r3, #16
 8003378:	d0f0      	beq.n	800335c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	00030d40 	.word	0x00030d40

0800338c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80033d8:	f023 0303 	bic.w	r3, r3, #3
 80033dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0301 	and.w	r3, r3, #1
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3301      	adds	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a13      	ldr	r2, [pc, #76]	; (8003480 <USB_CoreReset+0x64>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e01b      	b.n	8003472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	daf2      	bge.n	8003428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3301      	adds	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a09      	ldr	r2, [pc, #36]	; (8003480 <USB_CoreReset+0x64>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e006      	b.n	8003472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d0f0      	beq.n	8003452 <USB_CoreReset+0x36>

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	00030d40 	.word	0x00030d40

08003484 <__errno>:
 8003484:	4b01      	ldr	r3, [pc, #4]	; (800348c <__errno+0x8>)
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	2000000c 	.word	0x2000000c

08003490 <__libc_init_array>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4d0d      	ldr	r5, [pc, #52]	; (80034c8 <__libc_init_array+0x38>)
 8003494:	4c0d      	ldr	r4, [pc, #52]	; (80034cc <__libc_init_array+0x3c>)
 8003496:	1b64      	subs	r4, r4, r5
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	2600      	movs	r6, #0
 800349c:	42a6      	cmp	r6, r4
 800349e:	d109      	bne.n	80034b4 <__libc_init_array+0x24>
 80034a0:	4d0b      	ldr	r5, [pc, #44]	; (80034d0 <__libc_init_array+0x40>)
 80034a2:	4c0c      	ldr	r4, [pc, #48]	; (80034d4 <__libc_init_array+0x44>)
 80034a4:	f000 fd1e 	bl	8003ee4 <_init>
 80034a8:	1b64      	subs	r4, r4, r5
 80034aa:	10a4      	asrs	r4, r4, #2
 80034ac:	2600      	movs	r6, #0
 80034ae:	42a6      	cmp	r6, r4
 80034b0:	d105      	bne.n	80034be <__libc_init_array+0x2e>
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b8:	4798      	blx	r3
 80034ba:	3601      	adds	r6, #1
 80034bc:	e7ee      	b.n	800349c <__libc_init_array+0xc>
 80034be:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c2:	4798      	blx	r3
 80034c4:	3601      	adds	r6, #1
 80034c6:	e7f2      	b.n	80034ae <__libc_init_array+0x1e>
 80034c8:	08003f98 	.word	0x08003f98
 80034cc:	08003f98 	.word	0x08003f98
 80034d0:	08003f98 	.word	0x08003f98
 80034d4:	08003f9c 	.word	0x08003f9c

080034d8 <memset>:
 80034d8:	4402      	add	r2, r0
 80034da:	4603      	mov	r3, r0
 80034dc:	4293      	cmp	r3, r2
 80034de:	d100      	bne.n	80034e2 <memset+0xa>
 80034e0:	4770      	bx	lr
 80034e2:	f803 1b01 	strb.w	r1, [r3], #1
 80034e6:	e7f9      	b.n	80034dc <memset+0x4>

080034e8 <_puts_r>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	460e      	mov	r6, r1
 80034ec:	4605      	mov	r5, r0
 80034ee:	b118      	cbz	r0, 80034f8 <_puts_r+0x10>
 80034f0:	6983      	ldr	r3, [r0, #24]
 80034f2:	b90b      	cbnz	r3, 80034f8 <_puts_r+0x10>
 80034f4:	f000 fa48 	bl	8003988 <__sinit>
 80034f8:	69ab      	ldr	r3, [r5, #24]
 80034fa:	68ac      	ldr	r4, [r5, #8]
 80034fc:	b913      	cbnz	r3, 8003504 <_puts_r+0x1c>
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 fa42 	bl	8003988 <__sinit>
 8003504:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <_puts_r+0xd0>)
 8003506:	429c      	cmp	r4, r3
 8003508:	d120      	bne.n	800354c <_puts_r+0x64>
 800350a:	686c      	ldr	r4, [r5, #4]
 800350c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800350e:	07db      	lsls	r3, r3, #31
 8003510:	d405      	bmi.n	800351e <_puts_r+0x36>
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	0598      	lsls	r0, r3, #22
 8003516:	d402      	bmi.n	800351e <_puts_r+0x36>
 8003518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800351a:	f000 fad3 	bl	8003ac4 <__retarget_lock_acquire_recursive>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	0719      	lsls	r1, r3, #28
 8003522:	d51d      	bpl.n	8003560 <_puts_r+0x78>
 8003524:	6923      	ldr	r3, [r4, #16]
 8003526:	b1db      	cbz	r3, 8003560 <_puts_r+0x78>
 8003528:	3e01      	subs	r6, #1
 800352a:	68a3      	ldr	r3, [r4, #8]
 800352c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003530:	3b01      	subs	r3, #1
 8003532:	60a3      	str	r3, [r4, #8]
 8003534:	bb39      	cbnz	r1, 8003586 <_puts_r+0x9e>
 8003536:	2b00      	cmp	r3, #0
 8003538:	da38      	bge.n	80035ac <_puts_r+0xc4>
 800353a:	4622      	mov	r2, r4
 800353c:	210a      	movs	r1, #10
 800353e:	4628      	mov	r0, r5
 8003540:	f000 f848 	bl	80035d4 <__swbuf_r>
 8003544:	3001      	adds	r0, #1
 8003546:	d011      	beq.n	800356c <_puts_r+0x84>
 8003548:	250a      	movs	r5, #10
 800354a:	e011      	b.n	8003570 <_puts_r+0x88>
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <_puts_r+0xd4>)
 800354e:	429c      	cmp	r4, r3
 8003550:	d101      	bne.n	8003556 <_puts_r+0x6e>
 8003552:	68ac      	ldr	r4, [r5, #8]
 8003554:	e7da      	b.n	800350c <_puts_r+0x24>
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <_puts_r+0xd8>)
 8003558:	429c      	cmp	r4, r3
 800355a:	bf08      	it	eq
 800355c:	68ec      	ldreq	r4, [r5, #12]
 800355e:	e7d5      	b.n	800350c <_puts_r+0x24>
 8003560:	4621      	mov	r1, r4
 8003562:	4628      	mov	r0, r5
 8003564:	f000 f888 	bl	8003678 <__swsetup_r>
 8003568:	2800      	cmp	r0, #0
 800356a:	d0dd      	beq.n	8003528 <_puts_r+0x40>
 800356c:	f04f 35ff 	mov.w	r5, #4294967295
 8003570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003572:	07da      	lsls	r2, r3, #31
 8003574:	d405      	bmi.n	8003582 <_puts_r+0x9a>
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	059b      	lsls	r3, r3, #22
 800357a:	d402      	bmi.n	8003582 <_puts_r+0x9a>
 800357c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800357e:	f000 faa2 	bl	8003ac6 <__retarget_lock_release_recursive>
 8003582:	4628      	mov	r0, r5
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	2b00      	cmp	r3, #0
 8003588:	da04      	bge.n	8003594 <_puts_r+0xac>
 800358a:	69a2      	ldr	r2, [r4, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	dc06      	bgt.n	800359e <_puts_r+0xb6>
 8003590:	290a      	cmp	r1, #10
 8003592:	d004      	beq.n	800359e <_puts_r+0xb6>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	6022      	str	r2, [r4, #0]
 800359a:	7019      	strb	r1, [r3, #0]
 800359c:	e7c5      	b.n	800352a <_puts_r+0x42>
 800359e:	4622      	mov	r2, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f817 	bl	80035d4 <__swbuf_r>
 80035a6:	3001      	adds	r0, #1
 80035a8:	d1bf      	bne.n	800352a <_puts_r+0x42>
 80035aa:	e7df      	b.n	800356c <_puts_r+0x84>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	250a      	movs	r5, #10
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	6022      	str	r2, [r4, #0]
 80035b4:	701d      	strb	r5, [r3, #0]
 80035b6:	e7db      	b.n	8003570 <_puts_r+0x88>
 80035b8:	08003f50 	.word	0x08003f50
 80035bc:	08003f70 	.word	0x08003f70
 80035c0:	08003f30 	.word	0x08003f30

080035c4 <puts>:
 80035c4:	4b02      	ldr	r3, [pc, #8]	; (80035d0 <puts+0xc>)
 80035c6:	4601      	mov	r1, r0
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	f7ff bf8d 	b.w	80034e8 <_puts_r>
 80035ce:	bf00      	nop
 80035d0:	2000000c 	.word	0x2000000c

080035d4 <__swbuf_r>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	460e      	mov	r6, r1
 80035d8:	4614      	mov	r4, r2
 80035da:	4605      	mov	r5, r0
 80035dc:	b118      	cbz	r0, 80035e6 <__swbuf_r+0x12>
 80035de:	6983      	ldr	r3, [r0, #24]
 80035e0:	b90b      	cbnz	r3, 80035e6 <__swbuf_r+0x12>
 80035e2:	f000 f9d1 	bl	8003988 <__sinit>
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <__swbuf_r+0x98>)
 80035e8:	429c      	cmp	r4, r3
 80035ea:	d12b      	bne.n	8003644 <__swbuf_r+0x70>
 80035ec:	686c      	ldr	r4, [r5, #4]
 80035ee:	69a3      	ldr	r3, [r4, #24]
 80035f0:	60a3      	str	r3, [r4, #8]
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	071a      	lsls	r2, r3, #28
 80035f6:	d52f      	bpl.n	8003658 <__swbuf_r+0x84>
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	b36b      	cbz	r3, 8003658 <__swbuf_r+0x84>
 80035fc:	6923      	ldr	r3, [r4, #16]
 80035fe:	6820      	ldr	r0, [r4, #0]
 8003600:	1ac0      	subs	r0, r0, r3
 8003602:	6963      	ldr	r3, [r4, #20]
 8003604:	b2f6      	uxtb	r6, r6
 8003606:	4283      	cmp	r3, r0
 8003608:	4637      	mov	r7, r6
 800360a:	dc04      	bgt.n	8003616 <__swbuf_r+0x42>
 800360c:	4621      	mov	r1, r4
 800360e:	4628      	mov	r0, r5
 8003610:	f000 f926 	bl	8003860 <_fflush_r>
 8003614:	bb30      	cbnz	r0, 8003664 <__swbuf_r+0x90>
 8003616:	68a3      	ldr	r3, [r4, #8]
 8003618:	3b01      	subs	r3, #1
 800361a:	60a3      	str	r3, [r4, #8]
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	6022      	str	r2, [r4, #0]
 8003622:	701e      	strb	r6, [r3, #0]
 8003624:	6963      	ldr	r3, [r4, #20]
 8003626:	3001      	adds	r0, #1
 8003628:	4283      	cmp	r3, r0
 800362a:	d004      	beq.n	8003636 <__swbuf_r+0x62>
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	07db      	lsls	r3, r3, #31
 8003630:	d506      	bpl.n	8003640 <__swbuf_r+0x6c>
 8003632:	2e0a      	cmp	r6, #10
 8003634:	d104      	bne.n	8003640 <__swbuf_r+0x6c>
 8003636:	4621      	mov	r1, r4
 8003638:	4628      	mov	r0, r5
 800363a:	f000 f911 	bl	8003860 <_fflush_r>
 800363e:	b988      	cbnz	r0, 8003664 <__swbuf_r+0x90>
 8003640:	4638      	mov	r0, r7
 8003642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <__swbuf_r+0x9c>)
 8003646:	429c      	cmp	r4, r3
 8003648:	d101      	bne.n	800364e <__swbuf_r+0x7a>
 800364a:	68ac      	ldr	r4, [r5, #8]
 800364c:	e7cf      	b.n	80035ee <__swbuf_r+0x1a>
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <__swbuf_r+0xa0>)
 8003650:	429c      	cmp	r4, r3
 8003652:	bf08      	it	eq
 8003654:	68ec      	ldreq	r4, [r5, #12]
 8003656:	e7ca      	b.n	80035ee <__swbuf_r+0x1a>
 8003658:	4621      	mov	r1, r4
 800365a:	4628      	mov	r0, r5
 800365c:	f000 f80c 	bl	8003678 <__swsetup_r>
 8003660:	2800      	cmp	r0, #0
 8003662:	d0cb      	beq.n	80035fc <__swbuf_r+0x28>
 8003664:	f04f 37ff 	mov.w	r7, #4294967295
 8003668:	e7ea      	b.n	8003640 <__swbuf_r+0x6c>
 800366a:	bf00      	nop
 800366c:	08003f50 	.word	0x08003f50
 8003670:	08003f70 	.word	0x08003f70
 8003674:	08003f30 	.word	0x08003f30

08003678 <__swsetup_r>:
 8003678:	4b32      	ldr	r3, [pc, #200]	; (8003744 <__swsetup_r+0xcc>)
 800367a:	b570      	push	{r4, r5, r6, lr}
 800367c:	681d      	ldr	r5, [r3, #0]
 800367e:	4606      	mov	r6, r0
 8003680:	460c      	mov	r4, r1
 8003682:	b125      	cbz	r5, 800368e <__swsetup_r+0x16>
 8003684:	69ab      	ldr	r3, [r5, #24]
 8003686:	b913      	cbnz	r3, 800368e <__swsetup_r+0x16>
 8003688:	4628      	mov	r0, r5
 800368a:	f000 f97d 	bl	8003988 <__sinit>
 800368e:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <__swsetup_r+0xd0>)
 8003690:	429c      	cmp	r4, r3
 8003692:	d10f      	bne.n	80036b4 <__swsetup_r+0x3c>
 8003694:	686c      	ldr	r4, [r5, #4]
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800369c:	0719      	lsls	r1, r3, #28
 800369e:	d42c      	bmi.n	80036fa <__swsetup_r+0x82>
 80036a0:	06dd      	lsls	r5, r3, #27
 80036a2:	d411      	bmi.n	80036c8 <__swsetup_r+0x50>
 80036a4:	2309      	movs	r3, #9
 80036a6:	6033      	str	r3, [r6, #0]
 80036a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036ac:	81a3      	strh	r3, [r4, #12]
 80036ae:	f04f 30ff 	mov.w	r0, #4294967295
 80036b2:	e03e      	b.n	8003732 <__swsetup_r+0xba>
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <__swsetup_r+0xd4>)
 80036b6:	429c      	cmp	r4, r3
 80036b8:	d101      	bne.n	80036be <__swsetup_r+0x46>
 80036ba:	68ac      	ldr	r4, [r5, #8]
 80036bc:	e7eb      	b.n	8003696 <__swsetup_r+0x1e>
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <__swsetup_r+0xd8>)
 80036c0:	429c      	cmp	r4, r3
 80036c2:	bf08      	it	eq
 80036c4:	68ec      	ldreq	r4, [r5, #12]
 80036c6:	e7e6      	b.n	8003696 <__swsetup_r+0x1e>
 80036c8:	0758      	lsls	r0, r3, #29
 80036ca:	d512      	bpl.n	80036f2 <__swsetup_r+0x7a>
 80036cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ce:	b141      	cbz	r1, 80036e2 <__swsetup_r+0x6a>
 80036d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036d4:	4299      	cmp	r1, r3
 80036d6:	d002      	beq.n	80036de <__swsetup_r+0x66>
 80036d8:	4630      	mov	r0, r6
 80036da:	f000 fa5b 	bl	8003b94 <_free_r>
 80036de:	2300      	movs	r3, #0
 80036e0:	6363      	str	r3, [r4, #52]	; 0x34
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	2300      	movs	r3, #0
 80036ec:	6063      	str	r3, [r4, #4]
 80036ee:	6923      	ldr	r3, [r4, #16]
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f043 0308 	orr.w	r3, r3, #8
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	6923      	ldr	r3, [r4, #16]
 80036fc:	b94b      	cbnz	r3, 8003712 <__swsetup_r+0x9a>
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d003      	beq.n	8003712 <__swsetup_r+0x9a>
 800370a:	4621      	mov	r1, r4
 800370c:	4630      	mov	r0, r6
 800370e:	f000 fa01 	bl	8003b14 <__smakebuf_r>
 8003712:	89a0      	ldrh	r0, [r4, #12]
 8003714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003718:	f010 0301 	ands.w	r3, r0, #1
 800371c:	d00a      	beq.n	8003734 <__swsetup_r+0xbc>
 800371e:	2300      	movs	r3, #0
 8003720:	60a3      	str	r3, [r4, #8]
 8003722:	6963      	ldr	r3, [r4, #20]
 8003724:	425b      	negs	r3, r3
 8003726:	61a3      	str	r3, [r4, #24]
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	b943      	cbnz	r3, 800373e <__swsetup_r+0xc6>
 800372c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003730:	d1ba      	bne.n	80036a8 <__swsetup_r+0x30>
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	0781      	lsls	r1, r0, #30
 8003736:	bf58      	it	pl
 8003738:	6963      	ldrpl	r3, [r4, #20]
 800373a:	60a3      	str	r3, [r4, #8]
 800373c:	e7f4      	b.n	8003728 <__swsetup_r+0xb0>
 800373e:	2000      	movs	r0, #0
 8003740:	e7f7      	b.n	8003732 <__swsetup_r+0xba>
 8003742:	bf00      	nop
 8003744:	2000000c 	.word	0x2000000c
 8003748:	08003f50 	.word	0x08003f50
 800374c:	08003f70 	.word	0x08003f70
 8003750:	08003f30 	.word	0x08003f30

08003754 <__sflush_r>:
 8003754:	898a      	ldrh	r2, [r1, #12]
 8003756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800375a:	4605      	mov	r5, r0
 800375c:	0710      	lsls	r0, r2, #28
 800375e:	460c      	mov	r4, r1
 8003760:	d458      	bmi.n	8003814 <__sflush_r+0xc0>
 8003762:	684b      	ldr	r3, [r1, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	dc05      	bgt.n	8003774 <__sflush_r+0x20>
 8003768:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	dc02      	bgt.n	8003774 <__sflush_r+0x20>
 800376e:	2000      	movs	r0, #0
 8003770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003776:	2e00      	cmp	r6, #0
 8003778:	d0f9      	beq.n	800376e <__sflush_r+0x1a>
 800377a:	2300      	movs	r3, #0
 800377c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003780:	682f      	ldr	r7, [r5, #0]
 8003782:	602b      	str	r3, [r5, #0]
 8003784:	d032      	beq.n	80037ec <__sflush_r+0x98>
 8003786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	075a      	lsls	r2, r3, #29
 800378c:	d505      	bpl.n	800379a <__sflush_r+0x46>
 800378e:	6863      	ldr	r3, [r4, #4]
 8003790:	1ac0      	subs	r0, r0, r3
 8003792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003794:	b10b      	cbz	r3, 800379a <__sflush_r+0x46>
 8003796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003798:	1ac0      	subs	r0, r0, r3
 800379a:	2300      	movs	r3, #0
 800379c:	4602      	mov	r2, r0
 800379e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037a0:	6a21      	ldr	r1, [r4, #32]
 80037a2:	4628      	mov	r0, r5
 80037a4:	47b0      	blx	r6
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	d106      	bne.n	80037ba <__sflush_r+0x66>
 80037ac:	6829      	ldr	r1, [r5, #0]
 80037ae:	291d      	cmp	r1, #29
 80037b0:	d82c      	bhi.n	800380c <__sflush_r+0xb8>
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <__sflush_r+0x108>)
 80037b4:	40ca      	lsrs	r2, r1
 80037b6:	07d6      	lsls	r6, r2, #31
 80037b8:	d528      	bpl.n	800380c <__sflush_r+0xb8>
 80037ba:	2200      	movs	r2, #0
 80037bc:	6062      	str	r2, [r4, #4]
 80037be:	04d9      	lsls	r1, r3, #19
 80037c0:	6922      	ldr	r2, [r4, #16]
 80037c2:	6022      	str	r2, [r4, #0]
 80037c4:	d504      	bpl.n	80037d0 <__sflush_r+0x7c>
 80037c6:	1c42      	adds	r2, r0, #1
 80037c8:	d101      	bne.n	80037ce <__sflush_r+0x7a>
 80037ca:	682b      	ldr	r3, [r5, #0]
 80037cc:	b903      	cbnz	r3, 80037d0 <__sflush_r+0x7c>
 80037ce:	6560      	str	r0, [r4, #84]	; 0x54
 80037d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d2:	602f      	str	r7, [r5, #0]
 80037d4:	2900      	cmp	r1, #0
 80037d6:	d0ca      	beq.n	800376e <__sflush_r+0x1a>
 80037d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037dc:	4299      	cmp	r1, r3
 80037de:	d002      	beq.n	80037e6 <__sflush_r+0x92>
 80037e0:	4628      	mov	r0, r5
 80037e2:	f000 f9d7 	bl	8003b94 <_free_r>
 80037e6:	2000      	movs	r0, #0
 80037e8:	6360      	str	r0, [r4, #52]	; 0x34
 80037ea:	e7c1      	b.n	8003770 <__sflush_r+0x1c>
 80037ec:	6a21      	ldr	r1, [r4, #32]
 80037ee:	2301      	movs	r3, #1
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b0      	blx	r6
 80037f4:	1c41      	adds	r1, r0, #1
 80037f6:	d1c7      	bne.n	8003788 <__sflush_r+0x34>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0c4      	beq.n	8003788 <__sflush_r+0x34>
 80037fe:	2b1d      	cmp	r3, #29
 8003800:	d001      	beq.n	8003806 <__sflush_r+0xb2>
 8003802:	2b16      	cmp	r3, #22
 8003804:	d101      	bne.n	800380a <__sflush_r+0xb6>
 8003806:	602f      	str	r7, [r5, #0]
 8003808:	e7b1      	b.n	800376e <__sflush_r+0x1a>
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003810:	81a3      	strh	r3, [r4, #12]
 8003812:	e7ad      	b.n	8003770 <__sflush_r+0x1c>
 8003814:	690f      	ldr	r7, [r1, #16]
 8003816:	2f00      	cmp	r7, #0
 8003818:	d0a9      	beq.n	800376e <__sflush_r+0x1a>
 800381a:	0793      	lsls	r3, r2, #30
 800381c:	680e      	ldr	r6, [r1, #0]
 800381e:	bf08      	it	eq
 8003820:	694b      	ldreq	r3, [r1, #20]
 8003822:	600f      	str	r7, [r1, #0]
 8003824:	bf18      	it	ne
 8003826:	2300      	movne	r3, #0
 8003828:	eba6 0807 	sub.w	r8, r6, r7
 800382c:	608b      	str	r3, [r1, #8]
 800382e:	f1b8 0f00 	cmp.w	r8, #0
 8003832:	dd9c      	ble.n	800376e <__sflush_r+0x1a>
 8003834:	6a21      	ldr	r1, [r4, #32]
 8003836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003838:	4643      	mov	r3, r8
 800383a:	463a      	mov	r2, r7
 800383c:	4628      	mov	r0, r5
 800383e:	47b0      	blx	r6
 8003840:	2800      	cmp	r0, #0
 8003842:	dc06      	bgt.n	8003852 <__sflush_r+0xfe>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384a:	81a3      	strh	r3, [r4, #12]
 800384c:	f04f 30ff 	mov.w	r0, #4294967295
 8003850:	e78e      	b.n	8003770 <__sflush_r+0x1c>
 8003852:	4407      	add	r7, r0
 8003854:	eba8 0800 	sub.w	r8, r8, r0
 8003858:	e7e9      	b.n	800382e <__sflush_r+0xda>
 800385a:	bf00      	nop
 800385c:	20400001 	.word	0x20400001

08003860 <_fflush_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	690b      	ldr	r3, [r1, #16]
 8003864:	4605      	mov	r5, r0
 8003866:	460c      	mov	r4, r1
 8003868:	b913      	cbnz	r3, 8003870 <_fflush_r+0x10>
 800386a:	2500      	movs	r5, #0
 800386c:	4628      	mov	r0, r5
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	b118      	cbz	r0, 800387a <_fflush_r+0x1a>
 8003872:	6983      	ldr	r3, [r0, #24]
 8003874:	b90b      	cbnz	r3, 800387a <_fflush_r+0x1a>
 8003876:	f000 f887 	bl	8003988 <__sinit>
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <_fflush_r+0x6c>)
 800387c:	429c      	cmp	r4, r3
 800387e:	d11b      	bne.n	80038b8 <_fflush_r+0x58>
 8003880:	686c      	ldr	r4, [r5, #4]
 8003882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ef      	beq.n	800386a <_fflush_r+0xa>
 800388a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800388c:	07d0      	lsls	r0, r2, #31
 800388e:	d404      	bmi.n	800389a <_fflush_r+0x3a>
 8003890:	0599      	lsls	r1, r3, #22
 8003892:	d402      	bmi.n	800389a <_fflush_r+0x3a>
 8003894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003896:	f000 f915 	bl	8003ac4 <__retarget_lock_acquire_recursive>
 800389a:	4628      	mov	r0, r5
 800389c:	4621      	mov	r1, r4
 800389e:	f7ff ff59 	bl	8003754 <__sflush_r>
 80038a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038a4:	07da      	lsls	r2, r3, #31
 80038a6:	4605      	mov	r5, r0
 80038a8:	d4e0      	bmi.n	800386c <_fflush_r+0xc>
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	059b      	lsls	r3, r3, #22
 80038ae:	d4dd      	bmi.n	800386c <_fflush_r+0xc>
 80038b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038b2:	f000 f908 	bl	8003ac6 <__retarget_lock_release_recursive>
 80038b6:	e7d9      	b.n	800386c <_fflush_r+0xc>
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <_fflush_r+0x70>)
 80038ba:	429c      	cmp	r4, r3
 80038bc:	d101      	bne.n	80038c2 <_fflush_r+0x62>
 80038be:	68ac      	ldr	r4, [r5, #8]
 80038c0:	e7df      	b.n	8003882 <_fflush_r+0x22>
 80038c2:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <_fflush_r+0x74>)
 80038c4:	429c      	cmp	r4, r3
 80038c6:	bf08      	it	eq
 80038c8:	68ec      	ldreq	r4, [r5, #12]
 80038ca:	e7da      	b.n	8003882 <_fflush_r+0x22>
 80038cc:	08003f50 	.word	0x08003f50
 80038d0:	08003f70 	.word	0x08003f70
 80038d4:	08003f30 	.word	0x08003f30

080038d8 <std>:
 80038d8:	2300      	movs	r3, #0
 80038da:	b510      	push	{r4, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	e9c0 3300 	strd	r3, r3, [r0]
 80038e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038e6:	6083      	str	r3, [r0, #8]
 80038e8:	8181      	strh	r1, [r0, #12]
 80038ea:	6643      	str	r3, [r0, #100]	; 0x64
 80038ec:	81c2      	strh	r2, [r0, #14]
 80038ee:	6183      	str	r3, [r0, #24]
 80038f0:	4619      	mov	r1, r3
 80038f2:	2208      	movs	r2, #8
 80038f4:	305c      	adds	r0, #92	; 0x5c
 80038f6:	f7ff fdef 	bl	80034d8 <memset>
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <std+0x38>)
 80038fc:	6263      	str	r3, [r4, #36]	; 0x24
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <std+0x3c>)
 8003900:	62a3      	str	r3, [r4, #40]	; 0x28
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <std+0x40>)
 8003904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <std+0x44>)
 8003908:	6224      	str	r4, [r4, #32]
 800390a:	6323      	str	r3, [r4, #48]	; 0x30
 800390c:	bd10      	pop	{r4, pc}
 800390e:	bf00      	nop
 8003910:	08003d75 	.word	0x08003d75
 8003914:	08003d97 	.word	0x08003d97
 8003918:	08003dcf 	.word	0x08003dcf
 800391c:	08003df3 	.word	0x08003df3

08003920 <_cleanup_r>:
 8003920:	4901      	ldr	r1, [pc, #4]	; (8003928 <_cleanup_r+0x8>)
 8003922:	f000 b8af 	b.w	8003a84 <_fwalk_reent>
 8003926:	bf00      	nop
 8003928:	08003861 	.word	0x08003861

0800392c <__sfmoreglue>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	2268      	movs	r2, #104	; 0x68
 8003930:	1e4d      	subs	r5, r1, #1
 8003932:	4355      	muls	r5, r2
 8003934:	460e      	mov	r6, r1
 8003936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800393a:	f000 f997 	bl	8003c6c <_malloc_r>
 800393e:	4604      	mov	r4, r0
 8003940:	b140      	cbz	r0, 8003954 <__sfmoreglue+0x28>
 8003942:	2100      	movs	r1, #0
 8003944:	e9c0 1600 	strd	r1, r6, [r0]
 8003948:	300c      	adds	r0, #12
 800394a:	60a0      	str	r0, [r4, #8]
 800394c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003950:	f7ff fdc2 	bl	80034d8 <memset>
 8003954:	4620      	mov	r0, r4
 8003956:	bd70      	pop	{r4, r5, r6, pc}

08003958 <__sfp_lock_acquire>:
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <__sfp_lock_acquire+0x8>)
 800395a:	f000 b8b3 	b.w	8003ac4 <__retarget_lock_acquire_recursive>
 800395e:	bf00      	nop
 8003960:	20000815 	.word	0x20000815

08003964 <__sfp_lock_release>:
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <__sfp_lock_release+0x8>)
 8003966:	f000 b8ae 	b.w	8003ac6 <__retarget_lock_release_recursive>
 800396a:	bf00      	nop
 800396c:	20000815 	.word	0x20000815

08003970 <__sinit_lock_acquire>:
 8003970:	4801      	ldr	r0, [pc, #4]	; (8003978 <__sinit_lock_acquire+0x8>)
 8003972:	f000 b8a7 	b.w	8003ac4 <__retarget_lock_acquire_recursive>
 8003976:	bf00      	nop
 8003978:	20000816 	.word	0x20000816

0800397c <__sinit_lock_release>:
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <__sinit_lock_release+0x8>)
 800397e:	f000 b8a2 	b.w	8003ac6 <__retarget_lock_release_recursive>
 8003982:	bf00      	nop
 8003984:	20000816 	.word	0x20000816

08003988 <__sinit>:
 8003988:	b510      	push	{r4, lr}
 800398a:	4604      	mov	r4, r0
 800398c:	f7ff fff0 	bl	8003970 <__sinit_lock_acquire>
 8003990:	69a3      	ldr	r3, [r4, #24]
 8003992:	b11b      	cbz	r3, 800399c <__sinit+0x14>
 8003994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003998:	f7ff bff0 	b.w	800397c <__sinit_lock_release>
 800399c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039a0:	6523      	str	r3, [r4, #80]	; 0x50
 80039a2:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <__sinit+0x68>)
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <__sinit+0x6c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80039aa:	42a3      	cmp	r3, r4
 80039ac:	bf04      	itt	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	61a3      	streq	r3, [r4, #24]
 80039b2:	4620      	mov	r0, r4
 80039b4:	f000 f820 	bl	80039f8 <__sfp>
 80039b8:	6060      	str	r0, [r4, #4]
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 f81c 	bl	80039f8 <__sfp>
 80039c0:	60a0      	str	r0, [r4, #8]
 80039c2:	4620      	mov	r0, r4
 80039c4:	f000 f818 	bl	80039f8 <__sfp>
 80039c8:	2200      	movs	r2, #0
 80039ca:	60e0      	str	r0, [r4, #12]
 80039cc:	2104      	movs	r1, #4
 80039ce:	6860      	ldr	r0, [r4, #4]
 80039d0:	f7ff ff82 	bl	80038d8 <std>
 80039d4:	68a0      	ldr	r0, [r4, #8]
 80039d6:	2201      	movs	r2, #1
 80039d8:	2109      	movs	r1, #9
 80039da:	f7ff ff7d 	bl	80038d8 <std>
 80039de:	68e0      	ldr	r0, [r4, #12]
 80039e0:	2202      	movs	r2, #2
 80039e2:	2112      	movs	r1, #18
 80039e4:	f7ff ff78 	bl	80038d8 <std>
 80039e8:	2301      	movs	r3, #1
 80039ea:	61a3      	str	r3, [r4, #24]
 80039ec:	e7d2      	b.n	8003994 <__sinit+0xc>
 80039ee:	bf00      	nop
 80039f0:	08003f2c 	.word	0x08003f2c
 80039f4:	08003921 	.word	0x08003921

080039f8 <__sfp>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	4607      	mov	r7, r0
 80039fc:	f7ff ffac 	bl	8003958 <__sfp_lock_acquire>
 8003a00:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <__sfp+0x84>)
 8003a02:	681e      	ldr	r6, [r3, #0]
 8003a04:	69b3      	ldr	r3, [r6, #24]
 8003a06:	b913      	cbnz	r3, 8003a0e <__sfp+0x16>
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f7ff ffbd 	bl	8003988 <__sinit>
 8003a0e:	3648      	adds	r6, #72	; 0x48
 8003a10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	d503      	bpl.n	8003a20 <__sfp+0x28>
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	b30b      	cbz	r3, 8003a60 <__sfp+0x68>
 8003a1c:	6836      	ldr	r6, [r6, #0]
 8003a1e:	e7f7      	b.n	8003a10 <__sfp+0x18>
 8003a20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a24:	b9d5      	cbnz	r5, 8003a5c <__sfp+0x64>
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <__sfp+0x88>)
 8003a28:	60e3      	str	r3, [r4, #12]
 8003a2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a2e:	6665      	str	r5, [r4, #100]	; 0x64
 8003a30:	f000 f847 	bl	8003ac2 <__retarget_lock_init_recursive>
 8003a34:	f7ff ff96 	bl	8003964 <__sfp_lock_release>
 8003a38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a40:	6025      	str	r5, [r4, #0]
 8003a42:	61a5      	str	r5, [r4, #24]
 8003a44:	2208      	movs	r2, #8
 8003a46:	4629      	mov	r1, r5
 8003a48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a4c:	f7ff fd44 	bl	80034d8 <memset>
 8003a50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a58:	4620      	mov	r0, r4
 8003a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a5c:	3468      	adds	r4, #104	; 0x68
 8003a5e:	e7d9      	b.n	8003a14 <__sfp+0x1c>
 8003a60:	2104      	movs	r1, #4
 8003a62:	4638      	mov	r0, r7
 8003a64:	f7ff ff62 	bl	800392c <__sfmoreglue>
 8003a68:	4604      	mov	r4, r0
 8003a6a:	6030      	str	r0, [r6, #0]
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d1d5      	bne.n	8003a1c <__sfp+0x24>
 8003a70:	f7ff ff78 	bl	8003964 <__sfp_lock_release>
 8003a74:	230c      	movs	r3, #12
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	e7ee      	b.n	8003a58 <__sfp+0x60>
 8003a7a:	bf00      	nop
 8003a7c:	08003f2c 	.word	0x08003f2c
 8003a80:	ffff0001 	.word	0xffff0001

08003a84 <_fwalk_reent>:
 8003a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a88:	4606      	mov	r6, r0
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a90:	2700      	movs	r7, #0
 8003a92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a96:	f1b9 0901 	subs.w	r9, r9, #1
 8003a9a:	d505      	bpl.n	8003aa8 <_fwalk_reent+0x24>
 8003a9c:	6824      	ldr	r4, [r4, #0]
 8003a9e:	2c00      	cmp	r4, #0
 8003aa0:	d1f7      	bne.n	8003a92 <_fwalk_reent+0xe>
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa8:	89ab      	ldrh	r3, [r5, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d907      	bls.n	8003abe <_fwalk_reent+0x3a>
 8003aae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	d003      	beq.n	8003abe <_fwalk_reent+0x3a>
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4630      	mov	r0, r6
 8003aba:	47c0      	blx	r8
 8003abc:	4307      	orrs	r7, r0
 8003abe:	3568      	adds	r5, #104	; 0x68
 8003ac0:	e7e9      	b.n	8003a96 <_fwalk_reent+0x12>

08003ac2 <__retarget_lock_init_recursive>:
 8003ac2:	4770      	bx	lr

08003ac4 <__retarget_lock_acquire_recursive>:
 8003ac4:	4770      	bx	lr

08003ac6 <__retarget_lock_release_recursive>:
 8003ac6:	4770      	bx	lr

08003ac8 <__swhatbuf_r>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	460e      	mov	r6, r1
 8003acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	b096      	sub	sp, #88	; 0x58
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	461d      	mov	r5, r3
 8003ad8:	da08      	bge.n	8003aec <__swhatbuf_r+0x24>
 8003ada:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	602a      	str	r2, [r5, #0]
 8003ae2:	061a      	lsls	r2, r3, #24
 8003ae4:	d410      	bmi.n	8003b08 <__swhatbuf_r+0x40>
 8003ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aea:	e00e      	b.n	8003b0a <__swhatbuf_r+0x42>
 8003aec:	466a      	mov	r2, sp
 8003aee:	f000 f9a7 	bl	8003e40 <_fstat_r>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	dbf1      	blt.n	8003ada <__swhatbuf_r+0x12>
 8003af6:	9a01      	ldr	r2, [sp, #4]
 8003af8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003afc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b00:	425a      	negs	r2, r3
 8003b02:	415a      	adcs	r2, r3
 8003b04:	602a      	str	r2, [r5, #0]
 8003b06:	e7ee      	b.n	8003ae6 <__swhatbuf_r+0x1e>
 8003b08:	2340      	movs	r3, #64	; 0x40
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	b016      	add	sp, #88	; 0x58
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b14 <__smakebuf_r>:
 8003b14:	898b      	ldrh	r3, [r1, #12]
 8003b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b18:	079d      	lsls	r5, r3, #30
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	d507      	bpl.n	8003b30 <__smakebuf_r+0x1c>
 8003b20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	2301      	movs	r3, #1
 8003b2a:	6163      	str	r3, [r4, #20]
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	ab01      	add	r3, sp, #4
 8003b32:	466a      	mov	r2, sp
 8003b34:	f7ff ffc8 	bl	8003ac8 <__swhatbuf_r>
 8003b38:	9900      	ldr	r1, [sp, #0]
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f000 f895 	bl	8003c6c <_malloc_r>
 8003b42:	b948      	cbnz	r0, 8003b58 <__smakebuf_r+0x44>
 8003b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b48:	059a      	lsls	r2, r3, #22
 8003b4a:	d4ef      	bmi.n	8003b2c <__smakebuf_r+0x18>
 8003b4c:	f023 0303 	bic.w	r3, r3, #3
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	e7e3      	b.n	8003b20 <__smakebuf_r+0xc>
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <__smakebuf_r+0x7c>)
 8003b5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	6020      	str	r0, [r4, #0]
 8003b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	9b00      	ldr	r3, [sp, #0]
 8003b68:	6163      	str	r3, [r4, #20]
 8003b6a:	9b01      	ldr	r3, [sp, #4]
 8003b6c:	6120      	str	r0, [r4, #16]
 8003b6e:	b15b      	cbz	r3, 8003b88 <__smakebuf_r+0x74>
 8003b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b74:	4630      	mov	r0, r6
 8003b76:	f000 f975 	bl	8003e64 <_isatty_r>
 8003b7a:	b128      	cbz	r0, 8003b88 <__smakebuf_r+0x74>
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	81a3      	strh	r3, [r4, #12]
 8003b88:	89a0      	ldrh	r0, [r4, #12]
 8003b8a:	4305      	orrs	r5, r0
 8003b8c:	81a5      	strh	r5, [r4, #12]
 8003b8e:	e7cd      	b.n	8003b2c <__smakebuf_r+0x18>
 8003b90:	08003921 	.word	0x08003921

08003b94 <_free_r>:
 8003b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b96:	2900      	cmp	r1, #0
 8003b98:	d044      	beq.n	8003c24 <_free_r+0x90>
 8003b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b9e:	9001      	str	r0, [sp, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ba6:	bfb8      	it	lt
 8003ba8:	18e4      	addlt	r4, r4, r3
 8003baa:	f000 f97d 	bl	8003ea8 <__malloc_lock>
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <_free_r+0x94>)
 8003bb0:	9801      	ldr	r0, [sp, #4]
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	b933      	cbnz	r3, 8003bc4 <_free_r+0x30>
 8003bb6:	6063      	str	r3, [r4, #4]
 8003bb8:	6014      	str	r4, [r2, #0]
 8003bba:	b003      	add	sp, #12
 8003bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bc0:	f000 b978 	b.w	8003eb4 <__malloc_unlock>
 8003bc4:	42a3      	cmp	r3, r4
 8003bc6:	d908      	bls.n	8003bda <_free_r+0x46>
 8003bc8:	6825      	ldr	r5, [r4, #0]
 8003bca:	1961      	adds	r1, r4, r5
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	bf01      	itttt	eq
 8003bd0:	6819      	ldreq	r1, [r3, #0]
 8003bd2:	685b      	ldreq	r3, [r3, #4]
 8003bd4:	1949      	addeq	r1, r1, r5
 8003bd6:	6021      	streq	r1, [r4, #0]
 8003bd8:	e7ed      	b.n	8003bb6 <_free_r+0x22>
 8003bda:	461a      	mov	r2, r3
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	b10b      	cbz	r3, 8003be4 <_free_r+0x50>
 8003be0:	42a3      	cmp	r3, r4
 8003be2:	d9fa      	bls.n	8003bda <_free_r+0x46>
 8003be4:	6811      	ldr	r1, [r2, #0]
 8003be6:	1855      	adds	r5, r2, r1
 8003be8:	42a5      	cmp	r5, r4
 8003bea:	d10b      	bne.n	8003c04 <_free_r+0x70>
 8003bec:	6824      	ldr	r4, [r4, #0]
 8003bee:	4421      	add	r1, r4
 8003bf0:	1854      	adds	r4, r2, r1
 8003bf2:	42a3      	cmp	r3, r4
 8003bf4:	6011      	str	r1, [r2, #0]
 8003bf6:	d1e0      	bne.n	8003bba <_free_r+0x26>
 8003bf8:	681c      	ldr	r4, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	6053      	str	r3, [r2, #4]
 8003bfe:	4421      	add	r1, r4
 8003c00:	6011      	str	r1, [r2, #0]
 8003c02:	e7da      	b.n	8003bba <_free_r+0x26>
 8003c04:	d902      	bls.n	8003c0c <_free_r+0x78>
 8003c06:	230c      	movs	r3, #12
 8003c08:	6003      	str	r3, [r0, #0]
 8003c0a:	e7d6      	b.n	8003bba <_free_r+0x26>
 8003c0c:	6825      	ldr	r5, [r4, #0]
 8003c0e:	1961      	adds	r1, r4, r5
 8003c10:	428b      	cmp	r3, r1
 8003c12:	bf04      	itt	eq
 8003c14:	6819      	ldreq	r1, [r3, #0]
 8003c16:	685b      	ldreq	r3, [r3, #4]
 8003c18:	6063      	str	r3, [r4, #4]
 8003c1a:	bf04      	itt	eq
 8003c1c:	1949      	addeq	r1, r1, r5
 8003c1e:	6021      	streq	r1, [r4, #0]
 8003c20:	6054      	str	r4, [r2, #4]
 8003c22:	e7ca      	b.n	8003bba <_free_r+0x26>
 8003c24:	b003      	add	sp, #12
 8003c26:	bd30      	pop	{r4, r5, pc}
 8003c28:	20000818 	.word	0x20000818

08003c2c <sbrk_aligned>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	4e0e      	ldr	r6, [pc, #56]	; (8003c68 <sbrk_aligned+0x3c>)
 8003c30:	460c      	mov	r4, r1
 8003c32:	6831      	ldr	r1, [r6, #0]
 8003c34:	4605      	mov	r5, r0
 8003c36:	b911      	cbnz	r1, 8003c3e <sbrk_aligned+0x12>
 8003c38:	f000 f88c 	bl	8003d54 <_sbrk_r>
 8003c3c:	6030      	str	r0, [r6, #0]
 8003c3e:	4621      	mov	r1, r4
 8003c40:	4628      	mov	r0, r5
 8003c42:	f000 f887 	bl	8003d54 <_sbrk_r>
 8003c46:	1c43      	adds	r3, r0, #1
 8003c48:	d00a      	beq.n	8003c60 <sbrk_aligned+0x34>
 8003c4a:	1cc4      	adds	r4, r0, #3
 8003c4c:	f024 0403 	bic.w	r4, r4, #3
 8003c50:	42a0      	cmp	r0, r4
 8003c52:	d007      	beq.n	8003c64 <sbrk_aligned+0x38>
 8003c54:	1a21      	subs	r1, r4, r0
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 f87c 	bl	8003d54 <_sbrk_r>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d101      	bne.n	8003c64 <sbrk_aligned+0x38>
 8003c60:	f04f 34ff 	mov.w	r4, #4294967295
 8003c64:	4620      	mov	r0, r4
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	2000081c 	.word	0x2000081c

08003c6c <_malloc_r>:
 8003c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c70:	1ccd      	adds	r5, r1, #3
 8003c72:	f025 0503 	bic.w	r5, r5, #3
 8003c76:	3508      	adds	r5, #8
 8003c78:	2d0c      	cmp	r5, #12
 8003c7a:	bf38      	it	cc
 8003c7c:	250c      	movcc	r5, #12
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	4607      	mov	r7, r0
 8003c82:	db01      	blt.n	8003c88 <_malloc_r+0x1c>
 8003c84:	42a9      	cmp	r1, r5
 8003c86:	d905      	bls.n	8003c94 <_malloc_r+0x28>
 8003c88:	230c      	movs	r3, #12
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	4630      	mov	r0, r6
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c94:	4e2e      	ldr	r6, [pc, #184]	; (8003d50 <_malloc_r+0xe4>)
 8003c96:	f000 f907 	bl	8003ea8 <__malloc_lock>
 8003c9a:	6833      	ldr	r3, [r6, #0]
 8003c9c:	461c      	mov	r4, r3
 8003c9e:	bb34      	cbnz	r4, 8003cee <_malloc_r+0x82>
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f7ff ffc2 	bl	8003c2c <sbrk_aligned>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	4604      	mov	r4, r0
 8003cac:	d14d      	bne.n	8003d4a <_malloc_r+0xde>
 8003cae:	6834      	ldr	r4, [r6, #0]
 8003cb0:	4626      	mov	r6, r4
 8003cb2:	2e00      	cmp	r6, #0
 8003cb4:	d140      	bne.n	8003d38 <_malloc_r+0xcc>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	4631      	mov	r1, r6
 8003cba:	4638      	mov	r0, r7
 8003cbc:	eb04 0803 	add.w	r8, r4, r3
 8003cc0:	f000 f848 	bl	8003d54 <_sbrk_r>
 8003cc4:	4580      	cmp	r8, r0
 8003cc6:	d13a      	bne.n	8003d3e <_malloc_r+0xd2>
 8003cc8:	6821      	ldr	r1, [r4, #0]
 8003cca:	3503      	adds	r5, #3
 8003ccc:	1a6d      	subs	r5, r5, r1
 8003cce:	f025 0503 	bic.w	r5, r5, #3
 8003cd2:	3508      	adds	r5, #8
 8003cd4:	2d0c      	cmp	r5, #12
 8003cd6:	bf38      	it	cc
 8003cd8:	250c      	movcc	r5, #12
 8003cda:	4629      	mov	r1, r5
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f7ff ffa5 	bl	8003c2c <sbrk_aligned>
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d02b      	beq.n	8003d3e <_malloc_r+0xd2>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	442b      	add	r3, r5
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	e00e      	b.n	8003d0c <_malloc_r+0xa0>
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	1b52      	subs	r2, r2, r5
 8003cf2:	d41e      	bmi.n	8003d32 <_malloc_r+0xc6>
 8003cf4:	2a0b      	cmp	r2, #11
 8003cf6:	d916      	bls.n	8003d26 <_malloc_r+0xba>
 8003cf8:	1961      	adds	r1, r4, r5
 8003cfa:	42a3      	cmp	r3, r4
 8003cfc:	6025      	str	r5, [r4, #0]
 8003cfe:	bf18      	it	ne
 8003d00:	6059      	strne	r1, [r3, #4]
 8003d02:	6863      	ldr	r3, [r4, #4]
 8003d04:	bf08      	it	eq
 8003d06:	6031      	streq	r1, [r6, #0]
 8003d08:	5162      	str	r2, [r4, r5]
 8003d0a:	604b      	str	r3, [r1, #4]
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f104 060b 	add.w	r6, r4, #11
 8003d12:	f000 f8cf 	bl	8003eb4 <__malloc_unlock>
 8003d16:	f026 0607 	bic.w	r6, r6, #7
 8003d1a:	1d23      	adds	r3, r4, #4
 8003d1c:	1af2      	subs	r2, r6, r3
 8003d1e:	d0b6      	beq.n	8003c8e <_malloc_r+0x22>
 8003d20:	1b9b      	subs	r3, r3, r6
 8003d22:	50a3      	str	r3, [r4, r2]
 8003d24:	e7b3      	b.n	8003c8e <_malloc_r+0x22>
 8003d26:	6862      	ldr	r2, [r4, #4]
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	bf0c      	ite	eq
 8003d2c:	6032      	streq	r2, [r6, #0]
 8003d2e:	605a      	strne	r2, [r3, #4]
 8003d30:	e7ec      	b.n	8003d0c <_malloc_r+0xa0>
 8003d32:	4623      	mov	r3, r4
 8003d34:	6864      	ldr	r4, [r4, #4]
 8003d36:	e7b2      	b.n	8003c9e <_malloc_r+0x32>
 8003d38:	4634      	mov	r4, r6
 8003d3a:	6876      	ldr	r6, [r6, #4]
 8003d3c:	e7b9      	b.n	8003cb2 <_malloc_r+0x46>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4638      	mov	r0, r7
 8003d44:	f000 f8b6 	bl	8003eb4 <__malloc_unlock>
 8003d48:	e7a1      	b.n	8003c8e <_malloc_r+0x22>
 8003d4a:	6025      	str	r5, [r4, #0]
 8003d4c:	e7de      	b.n	8003d0c <_malloc_r+0xa0>
 8003d4e:	bf00      	nop
 8003d50:	20000818 	.word	0x20000818

08003d54 <_sbrk_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4d06      	ldr	r5, [pc, #24]	; (8003d70 <_sbrk_r+0x1c>)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	f7fd f954 	bl	800100c <_sbrk>
 8003d64:	1c43      	adds	r3, r0, #1
 8003d66:	d102      	bne.n	8003d6e <_sbrk_r+0x1a>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	b103      	cbz	r3, 8003d6e <_sbrk_r+0x1a>
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	20000820 	.word	0x20000820

08003d74 <__sread>:
 8003d74:	b510      	push	{r4, lr}
 8003d76:	460c      	mov	r4, r1
 8003d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7c:	f000 f8a0 	bl	8003ec0 <_read_r>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	bfab      	itete	ge
 8003d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d86:	89a3      	ldrhlt	r3, [r4, #12]
 8003d88:	181b      	addge	r3, r3, r0
 8003d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d8e:	bfac      	ite	ge
 8003d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d92:	81a3      	strhlt	r3, [r4, #12]
 8003d94:	bd10      	pop	{r4, pc}

08003d96 <__swrite>:
 8003d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9a:	461f      	mov	r7, r3
 8003d9c:	898b      	ldrh	r3, [r1, #12]
 8003d9e:	05db      	lsls	r3, r3, #23
 8003da0:	4605      	mov	r5, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	4616      	mov	r6, r2
 8003da6:	d505      	bpl.n	8003db4 <__swrite+0x1e>
 8003da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dac:	2302      	movs	r3, #2
 8003dae:	2200      	movs	r2, #0
 8003db0:	f000 f868 	bl	8003e84 <_lseek_r>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dca:	f000 b817 	b.w	8003dfc <_write_r>

08003dce <__sseek>:
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd6:	f000 f855 	bl	8003e84 <_lseek_r>
 8003dda:	1c43      	adds	r3, r0, #1
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	bf15      	itete	ne
 8003de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dea:	81a3      	strheq	r3, [r4, #12]
 8003dec:	bf18      	it	ne
 8003dee:	81a3      	strhne	r3, [r4, #12]
 8003df0:	bd10      	pop	{r4, pc}

08003df2 <__sclose>:
 8003df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df6:	f000 b813 	b.w	8003e20 <_close_r>
	...

08003dfc <_write_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4d07      	ldr	r5, [pc, #28]	; (8003e1c <_write_r+0x20>)
 8003e00:	4604      	mov	r4, r0
 8003e02:	4608      	mov	r0, r1
 8003e04:	4611      	mov	r1, r2
 8003e06:	2200      	movs	r2, #0
 8003e08:	602a      	str	r2, [r5, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f7fd f8ae 	bl	8000f6c <_write>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_write_r+0x1e>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_write_r+0x1e>
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20000820 	.word	0x20000820

08003e20 <_close_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4d06      	ldr	r5, [pc, #24]	; (8003e3c <_close_r+0x1c>)
 8003e24:	2300      	movs	r3, #0
 8003e26:	4604      	mov	r4, r0
 8003e28:	4608      	mov	r0, r1
 8003e2a:	602b      	str	r3, [r5, #0]
 8003e2c:	f7fd f8ba 	bl	8000fa4 <_close>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d102      	bne.n	8003e3a <_close_r+0x1a>
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	b103      	cbz	r3, 8003e3a <_close_r+0x1a>
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	20000820 	.word	0x20000820

08003e40 <_fstat_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4d07      	ldr	r5, [pc, #28]	; (8003e60 <_fstat_r+0x20>)
 8003e44:	2300      	movs	r3, #0
 8003e46:	4604      	mov	r4, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	602b      	str	r3, [r5, #0]
 8003e4e:	f7fd f8b5 	bl	8000fbc <_fstat>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	d102      	bne.n	8003e5c <_fstat_r+0x1c>
 8003e56:	682b      	ldr	r3, [r5, #0]
 8003e58:	b103      	cbz	r3, 8003e5c <_fstat_r+0x1c>
 8003e5a:	6023      	str	r3, [r4, #0]
 8003e5c:	bd38      	pop	{r3, r4, r5, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000820 	.word	0x20000820

08003e64 <_isatty_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d06      	ldr	r5, [pc, #24]	; (8003e80 <_isatty_r+0x1c>)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fd f8b4 	bl	8000fdc <_isatty>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_isatty_r+0x1a>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_isatty_r+0x1a>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000820 	.word	0x20000820

08003e84 <_lseek_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4d07      	ldr	r5, [pc, #28]	; (8003ea4 <_lseek_r+0x20>)
 8003e88:	4604      	mov	r4, r0
 8003e8a:	4608      	mov	r0, r1
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	602a      	str	r2, [r5, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f7fd f8ad 	bl	8000ff2 <_lseek>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_lseek_r+0x1e>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_lseek_r+0x1e>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000820 	.word	0x20000820

08003ea8 <__malloc_lock>:
 8003ea8:	4801      	ldr	r0, [pc, #4]	; (8003eb0 <__malloc_lock+0x8>)
 8003eaa:	f7ff be0b 	b.w	8003ac4 <__retarget_lock_acquire_recursive>
 8003eae:	bf00      	nop
 8003eb0:	20000814 	.word	0x20000814

08003eb4 <__malloc_unlock>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	; (8003ebc <__malloc_unlock+0x8>)
 8003eb6:	f7ff be06 	b.w	8003ac6 <__retarget_lock_release_recursive>
 8003eba:	bf00      	nop
 8003ebc:	20000814 	.word	0x20000814

08003ec0 <_read_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4d07      	ldr	r5, [pc, #28]	; (8003ee0 <_read_r+0x20>)
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	4611      	mov	r1, r2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	602a      	str	r2, [r5, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f7fd f82f 	bl	8000f32 <_read>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_read_r+0x1e>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_read_r+0x1e>
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	20000820 	.word	0x20000820

08003ee4 <_init>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	bf00      	nop
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr

08003ef0 <_fini>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr
