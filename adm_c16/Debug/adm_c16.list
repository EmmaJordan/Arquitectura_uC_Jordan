
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003218  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033dc  080033dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e4  080033e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e4  080033e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000c42f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000ecab  00000000  00000000  0002c46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d07  00000000  00000000  0003b116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b68  00000000  00000000  0003ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d9b85  00000000  00000000  0003d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ab0  00000000  00000000  00117510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000230c5  00000000  00000000  00117fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b085  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003000  00000000  00000000  0013b0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080033ac 	.word	0x080033ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080033ac 	.word	0x080033ac

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
@
.thumb_func
    asm_zeros:
        @ Registros usados
        @   r2: valor cero
        mov r2, 0           @ constante cero
 80001f4:	f04f 0200 	mov.w	r2, #0

080001f8 <.asm_zeros_loop>:
    .asm_zeros_loop:
        str r2, [r0], 4     @ sizeof(uint32_t) == 4, *vector++ = r2. //str carga en memoria el valor de un registro
 80001f8:	f840 2b04 	str.w	r2, [r0], #4
        subs r1, 1          @ --longitud
 80001fc:	3901      	subs	r1, #1
        bne .asm_zeros_loop
 80001fe:	d1fb      	bne.n	80001f8 <.asm_zeros_loop>
        bx lr
 8000200:	4770      	bx	lr

08000202 <asm_productoEscalar32>:
@   Ninguno
@
.thumb_func
    asm_productoEscalar32:
    .loop1:
    	ldr	r5, [r0], 4 //carga un registro con un valor de memoria y luego r0+=4;
 8000202:	f850 5b04 	ldr.w	r5, [r0], #4
    					//carga r5 con lo que hay que r0 (*vectorIn) e incrementar el puntero en vectorIn
    	mul r6, r5, r3  //multiplica r5 por r3 (escalar) y lo guarda en r6
 8000206:	fb05 f603 	mul.w	r6, r5, r3
		str r6, [r1], 4 //carga en memoria lo que tengo en r6 y luego r1+=4;
 800020a:	f841 6b04 	str.w	r6, [r1], #4
						//carga en r1 vectorIn[0]*escalar e incrementa el puntero en vectorOut
    	subs r2, 1          @ --longitud
 800020e:	3a01      	subs	r2, #1
        bne	.loop1
 8000210:	d1f7      	bne.n	8000202 <asm_productoEscalar32>
        bx lr
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800051e:	f3ef 8314 	mrs	r3, CONTROL
 8000522:	607b      	str	r3, [r7, #4]
  return(result);
 8000524:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000526:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	f383 8814 	msr	CONTROL, r3
}
 800053a:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800053c:	f3ef 8314 	mrs	r3, CONTROL
 8000540:	60fb      	str	r3, [r7, #12]
  return(result);
 8000542:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000544:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	f023 0301 	bic.w	r3, r3, #1
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	f383 8814 	msr	CONTROL, r3
}
 8000558:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800055a:	f3ef 8314 	mrs	r3, CONTROL
 800055e:	617b      	str	r3, [r7, #20]
  return(result);
 8000560:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000562:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000564:	f7ff fe42 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000568:	f3ef 8314 	mrs	r3, CONTROL
 800056c:	61bb      	str	r3, [r7, #24]
  return(result);
 800056e:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000570:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <llenaArreglo32>:
/* USER CODE END 0 */
void llenaArreglo32(uint32_t *vectorOut, uint32_t longitud)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000584:	e005      	b.n	8000592 <llenaArreglo32+0x18>
	{
		vectorOut[longitud] = longitud;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	603a      	str	r2, [r7, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f4      	bne.n	8000586 <llenaArreglo32+0xc>
	}
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <llenaArreglo16>:

void llenaArreglo16(uint16_t *vectorOut, uint32_t longitud)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
	while(longitud--)
 80005b4:	e006      	b.n	80005c4 <llenaArreglo16+0x1a>
	{
		vectorOut[longitud] = longitud;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	b292      	uxth	r2, r2
 80005c2:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	603a      	str	r2, [r7, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f3      	bne.n	80005b6 <llenaArreglo16+0xc>
	}
}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <zeros>:
//Recorro el arreglo de atrás hacia adelante
void zeros(uint32_t *vector, uint32_t longitud)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	while(longitud--)
 80005e6:	e005      	b.n	80005f4 <zeros+0x18>
	{
		vector[longitud] = 0;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
	while(longitud--)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	603a      	str	r2, [r7, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f4      	bne.n	80005e8 <zeros+0xc>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	603b      	str	r3, [r7, #0]
	while(longitud--)
 800061a:	e00c      	b.n	8000636 <productoEscalar32+0x2a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	440b      	add	r3, r1
 800062e:	6839      	ldr	r1, [r7, #0]
 8000630:	fb01 f202 	mul.w	r2, r1, r2
 8000634:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1ed      	bne.n	800061c <productoEscalar32+0x10>
	}
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 800064e:	b480      	push	{r7}
 8000650:	b085      	sub	sp, #20
 8000652:	af00      	add	r7, sp, #0
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 800065c:	e00d      	b.n	800067a <productoEscalar16+0x2c>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	440b      	add	r3, r1
 8000670:	8879      	ldrh	r1, [r7, #2]
 8000672:	fb11 f202 	smulbb	r2, r1, r2
 8000676:	b292      	uxth	r2, r2
 8000678:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1ec      	bne.n	800065e <productoEscalar16+0x10>
	}
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 80006a0:	e01c      	b.n	80006dc <productoEscalar12+0x4a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	881a      	ldrh	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	440b      	add	r3, r1
 80006b4:	8879      	ldrh	r1, [r7, #2]
 80006b6:	fb11 f202 	smulbb	r2, r1, r2
 80006ba:	b292      	uxth	r2, r2
 80006bc:	801a      	strh	r2, [r3, #0]
		if(vectorOut[longitud] > (uint16_t) 0x0FFF)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	4413      	add	r3, r2
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006cc:	d306      	bcc.n	80006dc <productoEscalar12+0x4a>
		{
			vectorOut[longitud] = (uint16_t) 0x0FFF;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	4413      	add	r3, r2
 80006d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006da:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	607a      	str	r2, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1dd      	bne.n	80006a2 <productoEscalar12+0x10>
		}
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006f8:	b08c      	sub	sp, #48	; 0x30
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fc62 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f892 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f000 f9a0 	bl	8000a48 <MX_GPIO_Init>
  MX_ETH_Init();
 8000708:	f000 f8f8 	bl	80008fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 800070c:	f000 f944 	bl	8000998 <MX_USART3_UART_Init>
  //printf("HOLA\r\n");
  MX_USB_OTG_FS_PCD_Init();
 8000710:	f000 f96c 	bl	80009ec <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000714:	f7ff ff00 	bl	8000518 <PrivilegiosSVC>

  //const uint32_t Resultado = asm_sum (5, 3);
  /* USER CODE END 2 */
  uint32_t miLongitud = 10;
 8000718:	230a      	movs	r3, #10
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t miEscalar1  = 3;
 800071c:	2303      	movs	r3, #3
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t miEscalar2  = 10;
 8000720:	230a      	movs	r3, #10
 8000722:	623b      	str	r3, [r7, #32]
  uint32_t miEscalar3  = 100;
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	61fb      	str	r3, [r7, #28]
  uint32_t miArreglo32[miLongitud];
 8000728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800072a:	460b      	mov	r3, r1
 800072c:	3b01      	subs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	2300      	movs	r3, #0
 8000732:	6039      	str	r1, [r7, #0]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	f04f 0200 	mov.w	r2, #0
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	0143      	lsls	r3, r0, #5
 8000742:	6838      	ldr	r0, [r7, #0]
 8000744:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000748:	6838      	ldr	r0, [r7, #0]
 800074a:	0142      	lsls	r2, r0, #5
 800074c:	2300      	movs	r3, #0
 800074e:	468a      	mov	sl, r1
 8000750:	469b      	mov	fp, r3
 8000752:	f04f 0200 	mov.w	r2, #0
 8000756:	f04f 0300 	mov.w	r3, #0
 800075a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800075e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000762:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000766:	008b      	lsls	r3, r1, #2
 8000768:	3307      	adds	r3, #7
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	ebad 0d03 	sub.w	sp, sp, r3
 8000772:	466b      	mov	r3, sp
 8000774:	3303      	adds	r3, #3
 8000776:	089b      	lsrs	r3, r3, #2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	617b      	str	r3, [r7, #20]
  uint16_t miArreglo16[miLongitud];
 800077c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800077e:	460b      	mov	r3, r1
 8000780:	3b01      	subs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	2300      	movs	r3, #0
 8000786:	4688      	mov	r8, r1
 8000788:	4699      	mov	r9, r3
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000796:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800079a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800079e:	2300      	movs	r3, #0
 80007a0:	460c      	mov	r4, r1
 80007a2:	461d      	mov	r5, r3
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	012b      	lsls	r3, r5, #4
 80007ae:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80007b2:	0122      	lsls	r2, r4, #4
 80007b4:	004b      	lsls	r3, r1, #1
 80007b6:	3307      	adds	r3, #7
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	ebad 0d03 	sub.w	sp, sp, r3
 80007c0:	466b      	mov	r3, sp
 80007c2:	3301      	adds	r3, #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
  //uint32_t miArreglo4[miLongitud];

  zeros(miArreglo32,miLongitud);
 80007ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007cc:	6978      	ldr	r0, [r7, #20]
 80007ce:	f7ff ff05 	bl	80005dc <zeros>
  llenaArreglo32(miArreglo32,miLongitud);
 80007d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007d4:	6978      	ldr	r0, [r7, #20]
 80007d6:	f7ff fed0 	bl	800057a <llenaArreglo32>
  llenaArreglo16(miArreglo16,miLongitud);
 80007da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f7ff fee4 	bl	80005aa <llenaArreglo16>

  productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007e6:	6979      	ldr	r1, [r7, #20]
 80007e8:	6978      	ldr	r0, [r7, #20]
 80007ea:	f7ff ff0f 	bl	800060c <productoEscalar32>

  asm_productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f2:	6979      	ldr	r1, [r7, #20]
 80007f4:	6978      	ldr	r0, [r7, #20]
 80007f6:	f7ff fd04 	bl	8000202 <asm_productoEscalar32>

  productoEscalar16(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000800:	68f9      	ldr	r1, [r7, #12]
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff ff23 	bl	800064e <productoEscalar16>

  productoEscalar12(miArreglo16,miArreglo16,miLongitud,miEscalar3);
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	b29b      	uxth	r3, r3
 800080c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800080e:	68f9      	ldr	r1, [r7, #12]
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f7ff ff3e 	bl	8000692 <productoEscalar12>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char miChar = 'a';
 8000816:	2361      	movs	r3, #97	; 0x61
 8000818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while (1)
  {
    /* USER CODE END WHILE */
	  miChar++;
 800081c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000820:	3301      	adds	r3, #1
 8000822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000826:	e7f9      	b.n	800081c <main+0x128>

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fdb0 	bl	800339c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <SystemClock_Config+0xcc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <SystemClock_Config+0xd0>)
 8000872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000888:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000898:	2308      	movs	r3, #8
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 800089c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80008a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 faf4 	bl	8001e9c <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ba:	f000 f973 	bl	8000ba4 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
      clocks dividers */
   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80008be:	230f      	movs	r3, #15
 80008c0:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c2:	2302      	movs	r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ce:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	61fb      	str	r3, [r7, #28]
   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2105      	movs	r1, #5
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fd55 	bl	800238c <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xc4>
   {
     /* Initialization Error */
     Error_Handler();
 80008e8:	f000 f95c 	bl	8000ba4 <Error_Handler>
   }
}
 80008ec:	bf00      	nop
 80008ee:	3750      	adds	r7, #80	; 0x50
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_ETH_Init+0x84>)
 8000902:	4a20      	ldr	r2, [pc, #128]	; (8000984 <MX_ETH_Init+0x88>)
 8000904:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_ETH_Init+0x8c>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_ETH_Init+0x8c>)
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_ETH_Init+0x8c>)
 8000914:	22e1      	movs	r2, #225	; 0xe1
 8000916:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_ETH_Init+0x8c>)
 800091a:	2200      	movs	r2, #0
 800091c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_ETH_Init+0x8c>)
 8000920:	2200      	movs	r2, #0
 8000922:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_ETH_Init+0x8c>)
 8000926:	2200      	movs	r2, #0
 8000928:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_ETH_Init+0x84>)
 800092c:	4a16      	ldr	r2, [pc, #88]	; (8000988 <MX_ETH_Init+0x8c>)
 800092e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_ETH_Init+0x84>)
 8000932:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000936:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_ETH_Init+0x84>)
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <MX_ETH_Init+0x90>)
 800093c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_ETH_Init+0x84>)
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MX_ETH_Init+0x94>)
 8000942:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_ETH_Init+0x84>)
 8000946:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800094a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_ETH_Init+0x84>)
 800094e:	f000 fcaf 	bl	80012b0 <HAL_ETH_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000958:	f000 f924 	bl	8000ba4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800095c:	2238      	movs	r2, #56	; 0x38
 800095e:	2100      	movs	r1, #0
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_ETH_Init+0x98>)
 8000962:	f002 fd1b 	bl	800339c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_ETH_Init+0x98>)
 8000968:	2221      	movs	r2, #33	; 0x21
 800096a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_ETH_Init+0x98>)
 800096e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000972:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_ETH_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001a0 	.word	0x200001a0
 8000984:	40028000 	.word	0x40028000
 8000988:	200007a0 	.word	0x200007a0
 800098c:	20000100 	.word	0x20000100
 8000990:	20000060 	.word	0x20000060
 8000994:	20000028 	.word	0x20000028

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART3_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80009bc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009c0:	220c      	movs	r2, #12
 80009c2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009d2:	f001 fefb 	bl	80027cc <HAL_UART_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART3_UART_Init+0x48>
  {
	//printf("UART ERROR\r\n");
    Error_Handler();
 80009dc:	f000 f8e2 	bl	8000ba4 <Error_Handler>
  //printf("UART OK\r\n");
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000250 	.word	0x20000250
 80009e8:	40004800 	.word	0x40004800

080009ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	f001 f917 	bl	8001c62 <HAL_PCD_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f8b3 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000294 	.word	0x20000294

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b49      	ldr	r3, [pc, #292]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a44      	ldr	r2, [pc, #272]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b42      	ldr	r3, [pc, #264]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a3d      	ldr	r2, [pc, #244]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a36      	ldr	r2, [pc, #216]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a2f      	ldr	r2, [pc, #188]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a28      	ldr	r2, [pc, #160]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_GPIO_Init+0x14c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b0c:	4822      	ldr	r0, [pc, #136]	; (8000b98 <MX_GPIO_Init+0x150>)
 8000b0e:	f001 f88f 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MX_GPIO_Init+0x154>)
 8000b18:	f001 f88a 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <MX_GPIO_Init+0x158>)
 8000b34:	f000 fed0 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b38:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_GPIO_Init+0x150>)
 8000b52:	f000 fec1 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b56:	2340      	movs	r3, #64	; 0x40
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <MX_GPIO_Init+0x154>)
 8000b6e:	f000 feb3 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_GPIO_Init+0x154>)
 8000b86:	f000 fea7 	bl	80018d8 <HAL_GPIO_Init>

}
 8000b8a:	bf00      	nop
 8000b8c:	3730      	adds	r7, #48	; 0x30
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a55      	ldr	r2, [pc, #340]	; (8000d74 <HAL_ETH_MspInit+0x174>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	f040 80a4 	bne.w	8000d6c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a52      	ldr	r2, [pc, #328]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3c:	623b      	str	r3, [r7, #32]
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a4b      	ldr	r2, [pc, #300]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a3d      	ldr	r2, [pc, #244]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a36      	ldr	r2, [pc, #216]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <HAL_ETH_MspInit+0x178>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ce8:	2332      	movs	r3, #50	; 0x32
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf8:	230b      	movs	r3, #11
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	481e      	ldr	r0, [pc, #120]	; (8000d7c <HAL_ETH_MspInit+0x17c>)
 8000d04:	f000 fde8 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d08:	2386      	movs	r3, #134	; 0x86
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d18:	230b      	movs	r3, #11
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4817      	ldr	r0, [pc, #92]	; (8000d80 <HAL_ETH_MspInit+0x180>)
 8000d24:	f000 fdd8 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3a:	230b      	movs	r3, #11
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <HAL_ETH_MspInit+0x184>)
 8000d46:	f000 fdc7 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5c:	230b      	movs	r3, #11
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000d68:	f000 fdb6 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3738      	adds	r7, #56	; 0x38
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40028000 	.word	0x40028000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020400 	.word	0x40020400
 8000d88:	40021800 	.word	0x40021800

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_UART_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_UART_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_UART_MspInit+0x8c>)
 8000e04:	f000 fd68 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004800 	.word	0x40004800
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020c00 	.word	0x40020c00

08000e1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e3c:	d13f      	bne.n	8000ebe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_PCD_MspInit+0xac>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <HAL_PCD_MspInit+0xac>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_PCD_MspInit+0xac>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e5a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4815      	ldr	r0, [pc, #84]	; (8000ecc <HAL_PCD_MspInit+0xb0>)
 8000e78:	f000 fd2e 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480e      	ldr	r0, [pc, #56]	; (8000ecc <HAL_PCD_MspInit+0xb0>)
 8000e92:	f000 fd21 	bl	80018d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_PCD_MspInit+0xac>)
 8000e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <HAL_PCD_MspInit+0xac>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_PCD_MspInit+0xac>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_PCD_MspInit+0xac>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_PCD_MspInit+0xac>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b085      	sub	sp, #20
 8000ef2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000ef4:	f3ef 8314 	mrs	r3, CONTROL
 8000ef8:	607b      	str	r3, [r7, #4]
  return(result);
 8000efa:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8000efc:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	f383 8814 	msr	CONTROL, r3
}
 8000f10:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3e:	f000 f88d 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8000f6c:	bf00      	nop
  nop
 8000f6e:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff ffd5 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f002 f9d9 	bl	8003354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fba7 	bl	80006f4 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fa8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb4:	080033ec 	.word	0x080033ec
  ldr r2, =_sbss
 8000fb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fbc:	200007ac 	.word	0x200007ac

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x34>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x34>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
/*#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif // DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x34>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x34>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f931 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fde0 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f93b 	bl	8001296 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f911 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	200007a8 	.word	0x200007a8

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200007a8 	.word	0x200007a8

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff47 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff5c 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffb0 	bl	8001204 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e06c      	b.n	800139c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2223      	movs	r2, #35	; 0x23
 80012d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fc93 	bl	8000c00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <HAL_ETH_Init+0xf4>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <HAL_ETH_Init+0xf4>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <HAL_ETH_Init+0xf4>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_ETH_Init+0xf8>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <HAL_ETH_Init+0xf8>)
 80012fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001300:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <HAL_ETH_Init+0xf8>)
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4927      	ldr	r1, [pc, #156]	; (80013a8 <HAL_ETH_Init+0xf8>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_ETH_Init+0xf8>)
 8001312:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800132a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132c:	f7ff feaa 	bl	8001084 <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001332:	e011      	b.n	8001358 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001334:	f7ff fea6 	bl	8001084 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001342:	d909      	bls.n	8001358 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	22e0      	movs	r2, #224	; 0xe0
 8001350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e021      	b.n	800139c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e4      	bne.n	8001334 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f944 	bl	80015f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f9eb 	bl	800174c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fa41 	bl	80017fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	461a      	mov	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f9a9 	bl	80016dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2210      	movs	r2, #16
 8001396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800

080013ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <ETH_SetMACConfig+0x134>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7c1b      	ldrb	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <ETH_SetMACConfig+0x28>
 80013ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013d2:	e000      	b.n	80013d6 <ETH_SetMACConfig+0x2a>
 80013d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7c5b      	ldrb	r3, [r3, #17]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <ETH_SetMACConfig+0x38>
 80013de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e2:	e000      	b.n	80013e6 <ETH_SetMACConfig+0x3a>
 80013e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	7fdb      	ldrb	r3, [r3, #31]
 80013f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	7f92      	ldrb	r2, [r2, #30]
 8001400:	2a00      	cmp	r2, #0
 8001402:	d102      	bne.n	800140a <ETH_SetMACConfig+0x5e>
 8001404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001408:	e000      	b.n	800140c <ETH_SetMACConfig+0x60>
 800140a:	2200      	movs	r2, #0
                        macconf->Speed |
 800140c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	7f1b      	ldrb	r3, [r3, #28]
 8001412:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001414:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800141a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	791b      	ldrb	r3, [r3, #4]
 8001420:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001422:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	f892 2020 	ldrb.w	r2, [r2, #32]
 800142a:	2a00      	cmp	r2, #0
 800142c:	d102      	bne.n	8001434 <ETH_SetMACConfig+0x88>
 800142e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001432:	e000      	b.n	8001436 <ETH_SetMACConfig+0x8a>
 8001434:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	7bdb      	ldrb	r3, [r3, #15]
 800143c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800143e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001444:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800144c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800144e:	4313      	orrs	r3, r2
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fe18 	bl	800109c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001492:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001498:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80014a0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80014a8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b0:	4313      	orrs	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff fde7 	bl	800109c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	ff20810f 	.word	0xff20810f

080014e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <ETH_SetDMAConfig+0x110>)
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7b1b      	ldrb	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <ETH_SetDMAConfig+0x2c>
 800150a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800150e:	e000      	b.n	8001512 <ETH_SetDMAConfig+0x2e>
 8001510:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7b5b      	ldrb	r3, [r3, #13]
 8001516:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001518:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	7f52      	ldrb	r2, [r2, #29]
 800151e:	2a00      	cmp	r2, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetDMAConfig+0x44>
 8001522:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001526:	e000      	b.n	800152a <ETH_SetDMAConfig+0x46>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	7b9b      	ldrb	r3, [r3, #14]
 8001530:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001532:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7f1b      	ldrb	r3, [r3, #28]
 800153e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001540:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	7f9b      	ldrb	r3, [r3, #30]
 8001546:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001548:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800154e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001556:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001558:	4313      	orrs	r3, r2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fd8e 	bl	800109c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001588:	461a      	mov	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	791b      	ldrb	r3, [r3, #4]
 8001592:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001598:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800159e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fd5f 	bl	800109c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f8de3f23 	.word	0xf8de3f23

080015f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0a6      	sub	sp, #152	; 0x98
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800160c:	2300      	movs	r3, #0
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001634:	2300      	movs	r3, #0
 8001636:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800163e:	2300      	movs	r3, #0
 8001640:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800165a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800165e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001664:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800166c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe9a 	bl	80013ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001678:	2301      	movs	r3, #1
 800167a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800167c:	2301      	movs	r3, #1
 800167e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff08 	bl	80014e4 <ETH_SetDMAConfig>
}
 80016d4:	bf00      	nop
 80016d6:	3798      	adds	r7, #152	; 0x98
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3305      	adds	r3, #5
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	3204      	adds	r2, #4
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <ETH_MACAddressConfig+0x68>)
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3303      	adds	r3, #3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3302      	adds	r3, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4313      	orrs	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <ETH_MACAddressConfig+0x6c>)
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6013      	str	r3, [r2, #0]
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40028040 	.word	0x40028040
 8001748:	40028044 	.word	0x40028044

0800174c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e03e      	b.n	80017d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68d9      	ldr	r1, [r3, #12]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	3206      	adds	r2, #6
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d80c      	bhi.n	80017bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68d9      	ldr	r1, [r3, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	e004      	b.n	80017c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d9bd      	bls.n	800175a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e046      	b.n	800189a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6919      	ldr	r1, [r3, #16]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001848:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001850:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	3212      	adds	r2, #18
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d80c      	bhi.n	800188a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	e004      	b.n	8001894 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d9b5      	bls.n	800180c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ca:	60da      	str	r2, [r3, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e177      	b.n	8001be4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8166 	bne.w	8001bde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d005      	beq.n	800192a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	2b02      	cmp	r3, #2
 8001928:	d130      	bne.n	800198c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 0201 	and.w	r2, r3, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b03      	cmp	r3, #3
 8001996:	d017      	beq.n	80019c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d123      	bne.n	8001a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80c0 	beq.w	8001bde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7a:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <HAL_GPIO_Init+0x328>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_GPIO_Init+0x32c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d037      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a56      	ldr	r2, [pc, #344]	; (8001c0c <HAL_GPIO_Init+0x334>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02b      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a55      	ldr	r2, [pc, #340]	; (8001c10 <HAL_GPIO_Init+0x338>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d025      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a54      	ldr	r2, [pc, #336]	; (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01f      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a53      	ldr	r2, [pc, #332]	; (8001c18 <HAL_GPIO_Init+0x340>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_GPIO_Init+0x344>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x226>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a51      	ldr	r2, [pc, #324]	; (8001c20 <HAL_GPIO_Init+0x348>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x222>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <HAL_GPIO_Init+0x34c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x21e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x21a>
 8001aee:	2309      	movs	r3, #9
 8001af0:	e012      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af2:	230a      	movs	r3, #10
 8001af4:	e010      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af6:	2308      	movs	r3, #8
 8001af8:	e00e      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00c      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00a      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	; (8001c00 <HAL_GPIO_Init+0x328>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f ae84 	bls.w	80018f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40021c00 	.word	0x40021c00
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40022400 	.word	0x40022400
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c64:	b08f      	sub	sp, #60	; 0x3c
 8001c66:	af0a      	add	r7, sp, #40	; 0x28
 8001c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e10f      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff f8c4 	bl	8000e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 f8ad 	bl	8002e12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	687e      	ldr	r6, [r7, #4]
 8001cc0:	466d      	mov	r5, sp
 8001cc2:	f106 0410 	add.w	r4, r6, #16
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd6:	1d33      	adds	r3, r6, #4
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f001 f838 	bl	8002d50 <USB_CoreInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0d0      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 f89b 	bl	8002e34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e04a      	b.n	8001d9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	333d      	adds	r3, #61	; 0x3d
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	333c      	adds	r3, #60	; 0x3c
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	b298      	uxth	r0, r3
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3344      	adds	r3, #68	; 0x44
 8001d40:	4602      	mov	r2, r0
 8001d42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	3340      	adds	r3, #64	; 0x40
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3348      	adds	r3, #72	; 0x48
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	334c      	adds	r3, #76	; 0x4c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3354      	adds	r3, #84	; 0x54
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	3301      	adds	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3af      	bcc.n	8001d04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e044      	b.n	8001e34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3301      	adds	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3b5      	bcc.n	8001daa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	687e      	ldr	r6, [r7, #4]
 8001e46:	466d      	mov	r5, sp
 8001e48:	f106 0410 	add.w	r4, r6, #16
 8001e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e5c:	1d33      	adds	r3, r6, #4
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f001 f833 	bl	8002ecc <USB_DevInit>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e00d      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 f9fe 	bl	800328e <USB_DevDisconnect>

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e267      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b85      	ldr	r3, [pc, #532]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d112      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b82      	ldr	r3, [pc, #520]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e242      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x74>
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a75      	ldr	r2, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b70      	ldr	r3, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6f      	ldr	r2, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6c      	ldr	r2, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a68      	ldr	r2, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a65      	ldr	r2, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f896 	bl	8001084 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f892 	bl	8001084 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e207      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f882 	bl	8001084 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f87e 	bl	8001084 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1f3      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c7      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f837 	bl	8001084 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff f833 	bl	8001084 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a8      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4925      	ldr	r1, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f816 	bl	8001084 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff f812 	bl	8001084 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e187      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d036      	beq.n	80020f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe fff6 	bl	8001084 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe fff2 	bl	8001084 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e167      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x200>
 80020ba:	e01b      	b.n	80020f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7fe ffdf 	bl	8001084 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e00e      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7fe ffdb 	bl	8001084 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d907      	bls.n	80020e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e150      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	42470000 	.word	0x42470000
 80020e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ea      	bne.n	80020ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8097 	beq.w	8002230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b7d      	ldr	r3, [pc, #500]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a7c      	ldr	r2, [pc, #496]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b7a      	ldr	r3, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b77      	ldr	r3, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a73      	ldr	r2, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7fe ff9b 	bl	8001084 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe ff97 	bl	8001084 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e10c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x2ea>
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a63      	ldr	r2, [pc, #396]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x30c>
 800218e:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a5e      	ldr	r2, [pc, #376]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 80021a8:	4b58      	ldr	r3, [pc, #352]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a54      	ldr	r2, [pc, #336]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff5c 	bl	8001084 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff58 	bl	8001084 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0cb      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ee      	beq.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7fe ff46 	bl	8001084 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe ff42 	bl	8001084 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0b5      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ee      	bne.n	80021fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a38      	ldr	r2, [pc, #224]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800222a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a1 	beq.w	800237c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d05c      	beq.n	8002300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d141      	bne.n	80022d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe ff16 	bl	8001084 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe ff12 	bl	8001084 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e087      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	3b01      	subs	r3, #1
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	491b      	ldr	r1, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe feeb 	bl	8001084 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fee7 	bl	8001084 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e05c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x416>
 80022d0:	e054      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fed4 	bl	8001084 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fed0 	bl	8001084 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e045      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e038      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000
 8002314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x4ec>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d028      	beq.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d121      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11a      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800234e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002350:	4293      	cmp	r3, r2
 8002352:	d111      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cc      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d90c      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d044      	beq.n	80024ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d119      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d003      	beq.n	800244a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	2b03      	cmp	r3, #3
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e067      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7fe fe02 	bl	8001084 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe fdfe 	bl	8001084 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e04f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d20c      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fd62 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	080033c4 	.word	0x080033c4
 8002550:	20000000 	.word	0x20000000
 8002554:	20000004 	.word	0x20000004

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800255c:	b094      	sub	sp, #80	; 0x50
 800255e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	647b      	str	r3, [r7, #68]	; 0x44
 8002564:	2300      	movs	r3, #0
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	2300      	movs	r3, #0
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002570:	4b79      	ldr	r3, [pc, #484]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d00d      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x40>
 800257c:	2b08      	cmp	r3, #8
 800257e:	f200 80e1 	bhi.w	8002744 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x34>
 8002586:	2b04      	cmp	r3, #4
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x3a>
 800258a:	e0db      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_GetSysClockFreq+0x204>)
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002590:	e0db      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_GetSysClockFreq+0x208>)
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002596:	e0d8      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a2:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	2200      	movs	r2, #0
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
 80025c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ca:	4622      	mov	r2, r4
 80025cc:	462b      	mov	r3, r5
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4621      	mov	r1, r4
 80025e4:	1a51      	subs	r1, r2, r1
 80025e6:	6139      	str	r1, [r7, #16]
 80025e8:	4629      	mov	r1, r5
 80025ea:	eb63 0301 	sbc.w	r3, r3, r1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025fc:	4659      	mov	r1, fp
 80025fe:	018b      	lsls	r3, r1, #6
 8002600:	4651      	mov	r1, sl
 8002602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002606:	4651      	mov	r1, sl
 8002608:	018a      	lsls	r2, r1, #6
 800260a:	4651      	mov	r1, sl
 800260c:	ebb2 0801 	subs.w	r8, r2, r1
 8002610:	4659      	mov	r1, fp
 8002612:	eb63 0901 	sbc.w	r9, r3, r1
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262a:	4690      	mov	r8, r2
 800262c:	4699      	mov	r9, r3
 800262e:	4623      	mov	r3, r4
 8002630:	eb18 0303 	adds.w	r3, r8, r3
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	462b      	mov	r3, r5
 8002638:	eb49 0303 	adc.w	r3, r9, r3
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264a:	4629      	mov	r1, r5
 800264c:	024b      	lsls	r3, r1, #9
 800264e:	4621      	mov	r1, r4
 8002650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002654:	4621      	mov	r1, r4
 8002656:	024a      	lsls	r2, r1, #9
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265e:	2200      	movs	r2, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
 8002662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002668:	f7fd fdd4 	bl	8000214 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002674:	e058      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	4618      	mov	r0, r3
 8002680:	4611      	mov	r1, r2
 8002682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0159      	lsls	r1, r3, #5
 800269e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a2:	0150      	lsls	r0, r2, #5
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4641      	mov	r1, r8
 80026aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ae:	4649      	mov	r1, r9
 80026b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c8:	ebb2 040a 	subs.w	r4, r2, sl
 80026cc:	eb63 050b 	sbc.w	r5, r3, fp
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	00eb      	lsls	r3, r5, #3
 80026da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026de:	00e2      	lsls	r2, r4, #3
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	18e3      	adds	r3, r4, r3
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	464b      	mov	r3, r9
 80026ec:	eb45 0303 	adc.w	r3, r5, r3
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fe:	4629      	mov	r1, r5
 8002700:	028b      	lsls	r3, r1, #10
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002708:	4621      	mov	r1, r4
 800270a:	028a      	lsls	r2, r1, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	2200      	movs	r2, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	61fa      	str	r2, [r7, #28]
 8002718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271c:	f7fd fd7a 	bl	8000214 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	3301      	adds	r3, #1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800273a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetSysClockFreq+0x204>)
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800274c:	4618      	mov	r0, r3
 800274e:	3750      	adds	r7, #80	; 0x50
 8002750:	46bd      	mov	sp, r7
 8002752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	00f42400 	.word	0x00f42400
 8002760:	007a1200 	.word	0x007a1200

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_GetHCLKFreq+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000000 	.word	0x20000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002780:	f7ff fff0 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0a9b      	lsrs	r3, r3, #10
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	080033d4 	.word	0x080033d4

080027a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a8:	f7ff ffdc 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0b5b      	lsrs	r3, r3, #13
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	080033d4 	.word	0x080033d4

080027cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e03f      	b.n	800285e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe faca 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	; 0x24
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800280e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f829 	bl	8002868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b0c0      	sub	sp, #256	; 0x100
 800286e:	af00      	add	r7, sp, #0
 8002870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	ea40 0301 	orr.w	r3, r0, r1
 8002890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	431a      	orrs	r2, r3
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028c0:	f021 010c 	bic.w	r1, r1, #12
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028ce:	430b      	orrs	r3, r1
 80028d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	6999      	ldr	r1, [r3, #24]
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	ea40 0301 	orr.w	r3, r0, r1
 80028ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b8f      	ldr	r3, [pc, #572]	; (8002b34 <UART_SetConfig+0x2cc>)
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d005      	beq.n	8002908 <UART_SetConfig+0xa0>
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b8d      	ldr	r3, [pc, #564]	; (8002b38 <UART_SetConfig+0x2d0>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d104      	bne.n	8002912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002908:	f7ff ff4c 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 800290c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002910:	e003      	b.n	800291a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002912:	f7ff ff33 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8002916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002924:	f040 810c 	bne.w	8002b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800292c:	2200      	movs	r2, #0
 800292e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	1891      	adds	r1, r2, r2
 8002940:	65b9      	str	r1, [r7, #88]	; 0x58
 8002942:	415b      	adcs	r3, r3
 8002944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800294a:	4621      	mov	r1, r4
 800294c:	eb12 0801 	adds.w	r8, r2, r1
 8002950:	4629      	mov	r1, r5
 8002952:	eb43 0901 	adc.w	r9, r3, r1
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296a:	4690      	mov	r8, r2
 800296c:	4699      	mov	r9, r3
 800296e:	4623      	mov	r3, r4
 8002970:	eb18 0303 	adds.w	r3, r8, r3
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002978:	462b      	mov	r3, r5
 800297a:	eb49 0303 	adc.w	r3, r9, r3
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800298e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002996:	460b      	mov	r3, r1
 8002998:	18db      	adds	r3, r3, r3
 800299a:	653b      	str	r3, [r7, #80]	; 0x50
 800299c:	4613      	mov	r3, r2
 800299e:	eb42 0303 	adc.w	r3, r2, r3
 80029a2:	657b      	str	r3, [r7, #84]	; 0x54
 80029a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029ac:	f7fd fc32 	bl	8000214 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <UART_SetConfig+0x2d4>)
 80029b6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	011c      	lsls	r4, r3, #4
 80029be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	1891      	adds	r1, r2, r2
 80029d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80029d8:	415b      	adcs	r3, r3
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029e0:	4641      	mov	r1, r8
 80029e2:	eb12 0a01 	adds.w	sl, r2, r1
 80029e6:	4649      	mov	r1, r9
 80029e8:	eb43 0b01 	adc.w	fp, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a00:	4692      	mov	sl, r2
 8002a02:	469b      	mov	fp, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	eb1a 0303 	adds.w	r3, sl, r3
 8002a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	eb4b 0303 	adc.w	r3, fp, r3
 8002a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	18db      	adds	r3, r3, r3
 8002a30:	643b      	str	r3, [r7, #64]	; 0x40
 8002a32:	4613      	mov	r3, r2
 8002a34:	eb42 0303 	adc.w	r3, r2, r3
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a42:	f7fd fbe7 	bl	8000214 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2264      	movs	r2, #100	; 0x64
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	1acb      	subs	r3, r1, r3
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a62:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002a64:	fba3 2302 	umull	r2, r3, r3, r2
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a70:	441c      	add	r4, r3
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a94:	4641      	mov	r1, r8
 8002a96:	1851      	adds	r1, r2, r1
 8002a98:	6339      	str	r1, [r7, #48]	; 0x30
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	414b      	adcs	r3, r1
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002aac:	4659      	mov	r1, fp
 8002aae:	00cb      	lsls	r3, r1, #3
 8002ab0:	4651      	mov	r1, sl
 8002ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	00ca      	lsls	r2, r1, #3
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	189b      	adds	r3, r3, r2
 8002ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ac8:	464b      	mov	r3, r9
 8002aca:	460a      	mov	r2, r1
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ae8:	460b      	mov	r3, r1
 8002aea:	18db      	adds	r3, r3, r3
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aee:	4613      	mov	r3, r2
 8002af0:	eb42 0303 	adc.w	r3, r2, r3
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002afe:	f7fd fb89 	bl	8000214 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002b08:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	2164      	movs	r1, #100	; 0x64
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	3332      	adds	r3, #50	; 0x32
 8002b1a:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4422      	add	r2, r4
 8002b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b30:	e105      	b.n	8002d3e <UART_SetConfig+0x4d6>
 8002b32:	bf00      	nop
 8002b34:	40011000 	.word	0x40011000
 8002b38:	40011400 	.word	0x40011400
 8002b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b52:	4642      	mov	r2, r8
 8002b54:	464b      	mov	r3, r9
 8002b56:	1891      	adds	r1, r2, r2
 8002b58:	6239      	str	r1, [r7, #32]
 8002b5a:	415b      	adcs	r3, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b62:	4641      	mov	r1, r8
 8002b64:	1854      	adds	r4, r2, r1
 8002b66:	4649      	mov	r1, r9
 8002b68:	eb43 0501 	adc.w	r5, r3, r1
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b88:	464b      	mov	r3, r9
 8002b8a:	eb45 0303 	adc.w	r3, r5, r3
 8002b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bae:	4629      	mov	r1, r5
 8002bb0:	008b      	lsls	r3, r1, #2
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb8:	4621      	mov	r1, r4
 8002bba:	008a      	lsls	r2, r1, #2
 8002bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bc0:	f7fd fb28 	bl	8000214 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002bca:	fba3 2302 	umull	r2, r3, r3, r2
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	011c      	lsls	r4, r3, #4
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	61b9      	str	r1, [r7, #24]
 8002bec:	415b      	adcs	r3, r3
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	1851      	adds	r1, r2, r1
 8002bf8:	6139      	str	r1, [r7, #16]
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4651      	mov	r1, sl
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4642      	mov	r2, r8
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c28:	464b      	mov	r3, r9
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	eb42 0303 	adc.w	r3, r2, r3
 8002c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	008b      	lsls	r3, r1, #2
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c56:	4641      	mov	r1, r8
 8002c58:	008a      	lsls	r2, r1, #2
 8002c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c5e:	f7fd fad9 	bl	8000214 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002c68:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	3332      	adds	r3, #50	; 0x32
 8002c7a:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c86:	441c      	add	r4, r3
 8002c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c90:	677a      	str	r2, [r7, #116]	; 0x74
 8002c92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c96:	4642      	mov	r2, r8
 8002c98:	464b      	mov	r3, r9
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	1851      	adds	r1, r2, r1
 8002caa:	6039      	str	r1, [r7, #0]
 8002cac:	4649      	mov	r1, r9
 8002cae:	414b      	adcs	r3, r1
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	00cb      	lsls	r3, r1, #3
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc8:	4651      	mov	r1, sl
 8002cca:	00ca      	lsls	r2, r1, #3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4642      	mov	r2, r8
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd8:	464b      	mov	r3, r9
 8002cda:	460a      	mov	r2, r1
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	663b      	str	r3, [r7, #96]	; 0x60
 8002cec:	667a      	str	r2, [r7, #100]	; 0x64
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	008b      	lsls	r3, r1, #2
 8002cfe:	4641      	mov	r1, r8
 8002d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d04:	4641      	mov	r1, r8
 8002d06:	008a      	lsls	r2, r1, #2
 8002d08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d0c:	f7fd fa82 	bl	8000214 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002d16:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2164      	movs	r1, #100	; 0x64
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4422      	add	r2, r4
 8002d3c:	609a      	str	r2, [r3, #8]
}
 8002d3e:	bf00      	nop
 8002d40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop
 8002d4c:	51eb851f 	.word	0x51eb851f

08002d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d50:	b084      	sub	sp, #16
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	f107 001c 	add.w	r0, r7, #28
 8002d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d122      	bne.n	8002dae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 faa2 	bl	80032ec <USB_CoreReset>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e01a      	b.n	8002de4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa96 	bl	80032ec <USB_CoreReset>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd6:	e005      	b.n	8002de4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d10b      	bne.n	8002e02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f043 0206 	orr.w	r2, r3, #6
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e0e:	b004      	add	sp, #16
 8002e10:	4770      	bx	lr

08002e12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 0201 	bic.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d115      	bne.n	8002e82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7fe f91a 	bl	800109c <HAL_Delay>
      ms++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa2e 	bl	80032d0 <USB_GetMode>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d01e      	beq.n	8002eb8 <USB_SetCurrentMode+0x84>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b31      	cmp	r3, #49	; 0x31
 8002e7e:	d9f0      	bls.n	8002e62 <USB_SetCurrentMode+0x2e>
 8002e80:	e01a      	b.n	8002eb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d115      	bne.n	8002eb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e94:	2001      	movs	r0, #1
 8002e96:	f7fe f901 	bl	800109c <HAL_Delay>
      ms++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa15 	bl	80032d0 <USB_GetMode>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <USB_SetCurrentMode+0x84>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b31      	cmp	r3, #49	; 0x31
 8002eb0:	d9f0      	bls.n	8002e94 <USB_SetCurrentMode+0x60>
 8002eb2:	e001      	b.n	8002eb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e005      	b.n	8002ec4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b32      	cmp	r3, #50	; 0x32
 8002ebc:	d101      	bne.n	8002ec2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ecc:	b084      	sub	sp, #16
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	e009      	b.n	8002f00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	3340      	adds	r3, #64	; 0x40
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	3301      	adds	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b0e      	cmp	r3, #14
 8002f04:	d9f2      	bls.n	8002eec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11c      	bne.n	8002f46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
 8002f44:	e00b      	b.n	8002f5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f64:	461a      	mov	r2, r3
 8002f66:	2300      	movs	r3, #0
 8002f68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f70:	4619      	mov	r1, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f78:	461a      	mov	r2, r3
 8002f7a:	680b      	ldr	r3, [r1, #0]
 8002f7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10c      	bne.n	8002f9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f965 	bl	800325c <USB_SetDevSpeed>
 8002f92:	e008      	b.n	8002fa6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f94:	2101      	movs	r1, #1
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f960 	bl	800325c <USB_SetDevSpeed>
 8002f9c:	e003      	b.n	8002fa6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f9e:	2103      	movs	r1, #3
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f95b 	bl	800325c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fa6:	2110      	movs	r1, #16
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8f3 	bl	8003194 <USB_FlushTxFifo>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f91f 	bl	80031fc <USB_FlushRxFifo>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e043      	b.n	800307a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003008:	d118      	bne.n	800303c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301c:	461a      	mov	r2, r3
 800301e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	e013      	b.n	800304e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003032:	461a      	mov	r2, r3
 8003034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e008      	b.n	800304e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003048:	461a      	mov	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305a:	461a      	mov	r2, r3
 800305c:	2300      	movs	r3, #0
 800305e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	461a      	mov	r2, r3
 800306e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003072:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	3301      	adds	r3, #1
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	d3b7      	bcc.n	8002ff2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e043      	b.n	8003110 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800309a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800309e:	d118      	bne.n	80030d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b2:	461a      	mov	r2, r3
 80030b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e013      	b.n	80030e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	e008      	b.n	80030e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	461a      	mov	r2, r3
 80030e0:	2300      	movs	r3, #0
 80030e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f0:	461a      	mov	r2, r3
 80030f2:	2300      	movs	r3, #0
 80030f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	3301      	adds	r3, #1
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3b7      	bcc.n	8003088 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003138:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <USB_DevInit+0x2c4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f043 0208 	orr.w	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800316a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003180:	7dfb      	ldrb	r3, [r7, #23]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800318c:	b004      	add	sp, #16
 800318e:	4770      	bx	lr
 8003190:	803c3800 	.word	0x803c3800

08003194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <USB_FlushTxFifo+0x64>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e01b      	b.n	80031ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	daf2      	bge.n	80031a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	019b      	lsls	r3, r3, #6
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3301      	adds	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <USB_FlushTxFifo+0x64>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e006      	b.n	80031ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d0f0      	beq.n	80031cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	00030d40 	.word	0x00030d40

080031fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3301      	adds	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a11      	ldr	r2, [pc, #68]	; (8003258 <USB_FlushRxFifo+0x5c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e018      	b.n	800324c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	daf2      	bge.n	8003208 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2210      	movs	r2, #16
 800322a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a08      	ldr	r2, [pc, #32]	; (8003258 <USB_FlushRxFifo+0x5c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e006      	b.n	800324c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b10      	cmp	r3, #16
 8003248:	d0f0      	beq.n	800322c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	00030d40 	.word	0x00030d40

0800325c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	68f9      	ldr	r1, [r7, #12]
 8003278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800328e:	b480      	push	{r7}
 8003290:	b085      	sub	sp, #20
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80032a8:	f023 0303 	bic.w	r3, r3, #3
 80032ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0301 	and.w	r3, r3, #1
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a13      	ldr	r2, [pc, #76]	; (8003350 <USB_CoreReset+0x64>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e01b      	b.n	8003342 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	daf2      	bge.n	80032f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3301      	adds	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <USB_CoreReset+0x64>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e006      	b.n	8003342 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d0f0      	beq.n	8003322 <USB_CoreReset+0x36>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	00030d40 	.word	0x00030d40

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	4d0d      	ldr	r5, [pc, #52]	; (800338c <__libc_init_array+0x38>)
 8003358:	4c0d      	ldr	r4, [pc, #52]	; (8003390 <__libc_init_array+0x3c>)
 800335a:	1b64      	subs	r4, r4, r5
 800335c:	10a4      	asrs	r4, r4, #2
 800335e:	2600      	movs	r6, #0
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	4d0b      	ldr	r5, [pc, #44]	; (8003394 <__libc_init_array+0x40>)
 8003366:	4c0c      	ldr	r4, [pc, #48]	; (8003398 <__libc_init_array+0x44>)
 8003368:	f000 f820 	bl	80033ac <_init>
 800336c:	1b64      	subs	r4, r4, r5
 800336e:	10a4      	asrs	r4, r4, #2
 8003370:	2600      	movs	r6, #0
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	f855 3b04 	ldr.w	r3, [r5], #4
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	f855 3b04 	ldr.w	r3, [r5], #4
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	080033e4 	.word	0x080033e4
 8003390:	080033e4 	.word	0x080033e4
 8003394:	080033e4 	.word	0x080033e4
 8003398:	080033e8 	.word	0x080033e8

0800339c <memset>:
 800339c:	4402      	add	r2, r0
 800339e:	4603      	mov	r3, r0
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d100      	bne.n	80033a6 <memset+0xa>
 80033a4:	4770      	bx	lr
 80033a6:	f803 1b01 	strb.w	r1, [r3], #1
 80033aa:	e7f9      	b.n	80033a0 <memset+0x4>

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
