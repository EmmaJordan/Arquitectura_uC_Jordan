
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800347c  0800347c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003484  08003484  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800348c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000c4a7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000ed62  00000000  00000000  0002c4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d07  00000000  00000000  0003b245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b70  00000000  00000000  0003cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d9baa  00000000  00000000  0003dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ab8  00000000  00000000  00117670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000230c5  00000000  00000000  00118128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b1ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003028  00000000  00000000  0013b240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800344c 	.word	0x0800344c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800344c 	.word	0x0800344c

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
@
.thumb_func
    asm_zeros:
        @ Registros usados
        @   r2: valor cero
        mov r2, 0           @ constante cero en r2
 80001f4:	f04f 0200 	mov.w	r2, #0

080001f8 <.asm_zeros_loop>:
    .asm_zeros_loop:
        str r2, [r0], 4    	@str carga en memoria el valor de un registro
 80001f8:	f840 2b04 	str.w	r2, [r0], #4
        					@carga en memoria (r0=*vector[0]) lo que tengo en r2 (0) y luego r0+=4 --> r0=*vector[1];
        					@ sizeof(uint32_t) == 4, *vector++ = r2. //
        subs r1, 1          @ r1-=1; longitud--; y actualiza flag de estado del procesador
 80001fc:	3901      	subs	r1, #1
        bne .asm_zeros_loop @vuelve a repetir el ciclo, con salto condicional (NE: not equal, flag Z=0), es decir mientras r1 no sea 0
 80001fe:	d1fb      	bne.n	80001f8 <.asm_zeros_loop>
        bx lr				@retorna link register
 8000200:	4770      	bx	lr

08000202 <asm_productoEscalar32>:
@
.thumb_func

    asm_productoEscalar32:

    push {r5}
 8000202:	b420      	push	{r5}
	push {r6}
 8000204:	b440      	push	{r6}

08000206 <.loop32>:

    .loop32:
    	ldr	r5, [r0], 4 	@carga un registro r5 con un valor de memoria r0 y luego r0+=4;
 8000206:	f850 5b04 	ldr.w	r5, [r0], #4
    						@es decir, carga en r5 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul r6, r5, r3  	@multiplica r5 por r3 (escalar) y lo guarda en r6
 800020a:	fb05 f603 	mul.w	r6, r5, r3
		str r6, [r1], 4 	@carga en memoria r1 lo que tengo en r6 y luego r1+=4;
 800020e:	f841 6b04 	str.w	r6, [r1], #4
							@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs r2, 1      	@decrementa en 1 a r2 (longitud--)y actualiza flag de estado del procesador
 8000212:	3a01      	subs	r2, #1
        bne	.loop32			@vuelve a .loop32, ejecución condicional (Not Equal, es decir Z=0)
 8000214:	d1f7      	bne.n	8000206 <.loop32>

        pop {r6}
 8000216:	bc40      	pop	{r6}
        pop {r5}
 8000218:	bc20      	pop	{r5}

        bx lr
 800021a:	4770      	bx	lr

0800021c <asm_productoEscalar16>:
@
.thumb_func

    asm_productoEscalar16: //REVISAR, Carlos le puso ldrh y strh

    push {r8}
 800021c:	f84d 8d04 	str.w	r8, [sp, #-4]!
	push {r9}
 8000220:	f84d 9d04 	str.w	r9, [sp, #-4]!

08000224 <.loop16>:

    .loop16:
    	ldr	r8, [r0], 4 	@carga un registro r8 con un valor de memoria r0 y luego r0+=4;
 8000224:	f850 8b04 	ldr.w	r8, [r0], #4
    						@es decir, carga en r8 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul r9, r8, r3  	@multiplica r8 por r3 (escalar) y lo guarda en r6
 8000228:	fb08 f903 	mul.w	r9, r8, r3
		str r9, [r1], 4 	@carga en memoria r1 lo que tengo en r9 y luego r1+=4;
 800022c:	f841 9b04 	str.w	r9, [r1], #4
							@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs r2, 1      	@decrementa en 1 a r2 (longitud--)
 8000230:	3a01      	subs	r2, #1
        bne	.loop16			@vuelve a .loop16, ejecución condicional (Not Equal, es decir Z=0)
 8000232:	d1f7      	bne.n	8000224 <.loop16>

        pop {r9}
 8000234:	f85d 9b04 	ldr.w	r9, [sp], #4
        pop {r8}
 8000238:	f85d 8b04 	ldr.w	r8, [sp], #4

        bx lr
 800023c:	4770      	bx	lr

0800023e <asm_productoEscalar12>:
@
.thumb_func

    asm_productoEscalar12:

    push {r4}
 800023e:	b410      	push	{r4}
	push {r5}
 8000240:	b420      	push	{r5}
	push {r6}
 8000242:	b440      	push	{r6}
	mov r6, #0x0FFF		//valor a saturar
 8000244:	f640 76ff 	movw	r6, #4095	; 0xfff

08000248 <.loop12>:
    .loop12:
		    	ldrh  	r4, [r0], 2 	@ carga un registro r4 con un valor de memoria r0 y luego r0+=2;
 8000248:	f830 4b02 	ldrh.w	r4, [r0], #2
		    							@ es decir, carga en r4 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
		    	mul 	r5, r4,  r3  	@ multiplica r4 por r3 (escalar) y lo guarda en r5
 800024c:	fb04 f503 	mul.w	r5, r4, r3
				cmp		r6, r5		    @ compara r5 con r6 (resta)
 8000250:	42ae      	cmp	r6, r5
				bhi		isNO			@ higher unsigned
 8000252:	d801      	bhi.n	8000258 <isNO>

08000254 <isYES>:

		isYES: //Saturó
				mov 	r5, r6  		@ satura resultado a 12 bits
 8000254:	4635      	mov	r5, r6
				b isNO 					@ salto incondicional a done
 8000256:	e7ff      	b.n	8000258 <isNO>

08000258 <isNO>:

		isNO:
				strh  	r5, [r1], 2		@ carga en memoria r1 lo que tengo en r5 y luego r1+=2; <----
 8000258:	f821 5b02 	strh.w	r5, [r1], #2
										@ es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
		    	subs 	r2, 1      		@ decrementa en 1 a r2 (longitud--)
 800025c:	3a01      	subs	r2, #1
		        bne		.loop12			@ vuelve a .loop12, ejecución condicional (Not Equal, es decir Z=0)
 800025e:	d1f3      	bne.n	8000248 <.loop12>

				pop {r6}
 8000260:	bc40      	pop	{r6}
		        pop {r5}
 8000262:	bc20      	pop	{r5}
		        pop {r4}
 8000264:	bc10      	pop	{r4}

		        bx lr
 8000266:	4770      	bx	lr

08000268 <asm_productoEscalar12_usat>:
@
.thumb_func

    asm_productoEscalar12_usat:

    push {r8}
 8000268:	f84d 8d04 	str.w	r8, [sp, #-4]!
	push {r9}
 800026c:	f84d 9d04 	str.w	r9, [sp, #-4]!

08000270 <.loop12_usat>:

    .loop12_usat:
    	ldrh  	r8, [r0], 2 	@carga un registro r8 con un valor de memoria r0 y luego r0+=2; <------
 8000270:	f830 8b02 	ldrh.w	r8, [r0], #2
    							@es decir, carga en r8 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul 	r9, r8,  r3  	@multiplica r8 por r3 (escalar) y lo guarda en r9
 8000274:	fb08 f903 	mul.w	r9, r8, r3
		usat 	r9, 12,  r9    //AGREGADO SATURACIÓN a 12 bits
 8000278:	f389 090c 	usat	r9, #12, r9
		strh  	r9, [r1], 2 	@carga en memoria r1 lo que tengo en r9 y luego r1+=2; <----
 800027c:	f821 9b02 	strh.w	r9, [r1], #2
								@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs 	r2, 1      		@decrementa en 1 a r2 (longitud--)
 8000280:	3a01      	subs	r2, #1
        bne		.loop12_usat	@vuelve a .loop12, ejecución condicional (Not Equal, es decir Z=0)
 8000282:	d1f5      	bne.n	8000270 <.loop12_usat>

        pop {r9}
 8000284:	f85d 9b04 	ldr.w	r9, [sp], #4
        pop {r8}
 8000288:	f85d 8b04 	ldr.w	r8, [sp], #4

        bx lr
 800028c:	4770      	bx	lr
	...

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800059a:	f3ef 8314 	mrs	r3, CONTROL
 800059e:	607b      	str	r3, [r7, #4]
  return(result);
 80005a0:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80005a2:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	f383 8814 	msr	CONTROL, r3
}
 80005b6:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80005b8:	f3ef 8314 	mrs	r3, CONTROL
 80005bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80005be:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80005c0:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	f023 0301 	bic.w	r3, r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	f383 8814 	msr	CONTROL, r3
}
 80005d4:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80005d6:	f3ef 8314 	mrs	r3, CONTROL
 80005da:	617b      	str	r3, [r7, #20]
  return(result);
 80005dc:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80005de:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80005e0:	f7ff fe04 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80005e4:	f3ef 8314 	mrs	r3, CONTROL
 80005e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80005ea:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80005ec:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80005ee:	bf00      	nop
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <llenaArreglo32>:
/* USER CODE END 0 */
void llenaArreglo32(uint32_t *vectorOut, uint32_t longitud)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000600:	e005      	b.n	800060e <llenaArreglo32+0x18>
	{
		vectorOut[longitud] = longitud;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	601a      	str	r2, [r3, #0]
	while(longitud--)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	603a      	str	r2, [r7, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f4      	bne.n	8000602 <llenaArreglo32+0xc>
	}
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <llenaArreglo16>:

void llenaArreglo16(uint16_t *vectorOut, uint32_t longitud)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000630:	e006      	b.n	8000640 <llenaArreglo16+0x1a>
	{
		vectorOut[longitud] = longitud;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	b292      	uxth	r2, r2
 800063e:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	603a      	str	r2, [r7, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1f3      	bne.n	8000632 <llenaArreglo16+0xc>
	}
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <zeros>:
//Recorro el arreglo de atrás hacia adelante
void zeros(uint32_t *vector, uint32_t longitud)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000662:	e005      	b.n	8000670 <zeros+0x18>
	{
		vector[longitud] = 0;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	603a      	str	r2, [r7, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f4      	bne.n	8000664 <zeros+0xc>
	}
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	603b      	str	r3, [r7, #0]
	while(longitud--)
 8000696:	e00c      	b.n	80006b2 <productoEscalar32+0x2a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	440b      	add	r3, r1
 80006aa:	6839      	ldr	r1, [r7, #0]
 80006ac:	fb01 f202 	mul.w	r2, r1, r2
 80006b0:	601a      	str	r2, [r3, #0]
	while(longitud--)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1ed      	bne.n	8000698 <productoEscalar32+0x10>
	}
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b085      	sub	sp, #20
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 80006d8:	e00d      	b.n	80006f6 <productoEscalar16+0x2c>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	4413      	add	r3, r2
 80006e2:	881a      	ldrh	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	440b      	add	r3, r1
 80006ec:	8879      	ldrh	r1, [r7, #2]
 80006ee:	fb11 f202 	smulbb	r2, r1, r2
 80006f2:	b292      	uxth	r2, r2
 80006f4:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1ec      	bne.n	80006da <productoEscalar16+0x10>
	}
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 800070e:	b480      	push	{r7}
 8000710:	b085      	sub	sp, #20
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 800071c:	e01c      	b.n	8000758 <productoEscalar12+0x4a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	440b      	add	r3, r1
 8000730:	8879      	ldrh	r1, [r7, #2]
 8000732:	fb11 f202 	smulbb	r2, r1, r2
 8000736:	b292      	uxth	r2, r2
 8000738:	801a      	strh	r2, [r3, #0]
		if(vectorOut[longitud] > (uint16_t) 0x0FFF)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	4413      	add	r3, r2
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000748:	d306      	bcc.n	8000758 <productoEscalar12+0x4a>
		{
			vectorOut[longitud] = (uint16_t) 0x0FFF;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000756:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1dd      	bne.n	800071e <productoEscalar12+0x10>
		}
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000774:	b08c      	sub	sp, #48	; 0x30
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f000 fc74 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f8a4 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f000 f9b2 	bl	8000ae8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000784:	f000 f90a 	bl	800099c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000788:	f000 f956 	bl	8000a38 <MX_USART3_UART_Init>
  //printf("HOLA\r\n");
  MX_USB_OTG_FS_PCD_Init();
 800078c:	f000 f97e 	bl	8000a8c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000790:	f7ff ff00 	bl	8000594 <PrivilegiosSVC>

  //const uint32_t Resultado = asm_sum (5, 3);
  /* USER CODE END 2 */
  uint32_t miLongitud = 10;
 8000794:	230a      	movs	r3, #10
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t miEscalar1  = 3;
 8000798:	2303      	movs	r3, #3
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t miEscalar2  = 10;
 800079c:	230a      	movs	r3, #10
 800079e:	623b      	str	r3, [r7, #32]
  uint32_t miEscalar3  = 100;
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t miArreglo32[miLongitud];
 80007a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007a6:	460b      	mov	r3, r1
 80007a8:	3b01      	subs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	2300      	movs	r3, #0
 80007ae:	6039      	str	r1, [r7, #0]
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	f04f 0200 	mov.w	r2, #0
 80007b6:	f04f 0300 	mov.w	r3, #0
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	0143      	lsls	r3, r0, #5
 80007be:	6838      	ldr	r0, [r7, #0]
 80007c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007c4:	6838      	ldr	r0, [r7, #0]
 80007c6:	0142      	lsls	r2, r0, #5
 80007c8:	2300      	movs	r3, #0
 80007ca:	468a      	mov	sl, r1
 80007cc:	469b      	mov	fp, r3
 80007ce:	f04f 0200 	mov.w	r2, #0
 80007d2:	f04f 0300 	mov.w	r3, #0
 80007d6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80007da:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80007de:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80007e2:	008b      	lsls	r3, r1, #2
 80007e4:	3307      	adds	r3, #7
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	ebad 0d03 	sub.w	sp, sp, r3
 80007ee:	466b      	mov	r3, sp
 80007f0:	3303      	adds	r3, #3
 80007f2:	089b      	lsrs	r3, r3, #2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	617b      	str	r3, [r7, #20]
  uint16_t miArreglo16[miLongitud];
 80007f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007fa:	460b      	mov	r3, r1
 80007fc:	3b01      	subs	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	2300      	movs	r3, #0
 8000802:	4688      	mov	r8, r1
 8000804:	4699      	mov	r9, r3
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000812:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000816:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800081a:	2300      	movs	r3, #0
 800081c:	460c      	mov	r4, r1
 800081e:	461d      	mov	r5, r3
 8000820:	f04f 0200 	mov.w	r2, #0
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	012b      	lsls	r3, r5, #4
 800082a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800082e:	0122      	lsls	r2, r4, #4
 8000830:	004b      	lsls	r3, r1, #1
 8000832:	3307      	adds	r3, #7
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	ebad 0d03 	sub.w	sp, sp, r3
 800083c:	466b      	mov	r3, sp
 800083e:	3301      	adds	r3, #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
  //uint32_t miArreglo4[miLongitud];

  zeros(miArreglo32,miLongitud);
 8000846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000848:	6978      	ldr	r0, [r7, #20]
 800084a:	f7ff ff05 	bl	8000658 <zeros>
  llenaArreglo32(miArreglo32,miLongitud);
 800084e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000850:	6978      	ldr	r0, [r7, #20]
 8000852:	f7ff fed0 	bl	80005f6 <llenaArreglo32>
  llenaArreglo16(miArreglo16,miLongitud);
 8000856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff fee4 	bl	8000626 <llenaArreglo16>

  //32 bits
  productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000862:	6979      	ldr	r1, [r7, #20]
 8000864:	6978      	ldr	r0, [r7, #20]
 8000866:	f7ff ff0f 	bl	8000688 <productoEscalar32>
  asm_productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800086e:	6979      	ldr	r1, [r7, #20]
 8000870:	6978      	ldr	r0, [r7, #20]
 8000872:	f7ff fcc6 	bl	8000202 <asm_productoEscalar32>

  //16bits
  productoEscalar16(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 8000876:	6a3b      	ldr	r3, [r7, #32]
 8000878:	b29b      	uxth	r3, r3
 800087a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800087c:	68f9      	ldr	r1, [r7, #12]
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff ff23 	bl	80006ca <productoEscalar16>
  asm_productoEscalar16(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	b29b      	uxth	r3, r3
 8000888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800088a:	68f9      	ldr	r1, [r7, #12]
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	f7ff fcc5 	bl	800021c <asm_productoEscalar16>

  //12 bits
  llenaArreglo16(miArreglo16,miLongitud);
 8000892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f7ff fec6 	bl	8000626 <llenaArreglo16>
  productoEscalar12(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	b29b      	uxth	r3, r3
 800089e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff ff33 	bl	800070e <productoEscalar12>
  asm_productoEscalar12(miArreglo16,miArreglo16,miLongitud,miEscalar3);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008ae:	68f9      	ldr	r1, [r7, #12]
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fcc4 	bl	800023e <asm_productoEscalar12>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char miChar = 'a';
 80008b6:	2361      	movs	r3, #97	; 0x61
 80008b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while (1)
  {
    /* USER CODE END WHILE */
	  miChar++;
 80008bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008c0:	3301      	adds	r3, #1
 80008c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80008c6:	e7f9      	b.n	80008bc <main+0x14c>

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fdb0 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a27      	ldr	r2, [pc, #156]	; (8000994 <SystemClock_Config+0xcc>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <SystemClock_Config+0xcc>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <SystemClock_Config+0xd0>)
 8000912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemClock_Config+0xd0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000928:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000938:	2308      	movs	r3, #8
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 800093c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000946:	2307      	movs	r3, #7
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	4618      	mov	r0, r3
 8000950:	f001 faf4 	bl	8001f3c <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800095a:	f000 f973 	bl	8000c44 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
      clocks dividers */
   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800095e:	230f      	movs	r3, #15
 8000960:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2302      	movs	r3, #2
 8000964:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800096a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096e:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	61fb      	str	r3, [r7, #28]
   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2105      	movs	r1, #5
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fd55 	bl	800242c <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xc4>
   {
     /* Initialization Error */
     Error_Handler();
 8000988:	f000 f95c 	bl	8000c44 <Error_Handler>
   }
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	; 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ETH_Init+0x84>)
 80009a2:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <MX_ETH_Init+0x88>)
 80009a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009b4:	22e1      	movs	r2, #225	; 0xe1
 80009b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ETH_Init+0x84>)
 80009cc:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_ETH_Init+0x84>)
 80009d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_ETH_Init+0x84>)
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <MX_ETH_Init+0x90>)
 80009dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_ETH_Init+0x84>)
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_ETH_Init+0x94>)
 80009e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_ETH_Init+0x84>)
 80009e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_ETH_Init+0x84>)
 80009ee:	f000 fcaf 	bl	8001350 <HAL_ETH_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009f8:	f000 f924 	bl	8000c44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009fc:	2238      	movs	r2, #56	; 0x38
 80009fe:	2100      	movs	r1, #0
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a02:	f002 fd1b 	bl	800343c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a08:	2221      	movs	r2, #33	; 0x21
 8000a0a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a0e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a12:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001a0 	.word	0x200001a0
 8000a24:	40028000 	.word	0x40028000
 8000a28:	200007a0 	.word	0x200007a0
 8000a2c:	20000100 	.word	0x20000100
 8000a30:	20000060 	.word	0x20000060
 8000a34:	20000028 	.word	0x20000028

08000a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART3_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a58:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a5c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a60:	220c      	movs	r2, #12
 8000a62:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a72:	f001 fefb 	bl	800286c <HAL_UART_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x48>
  {
	//printf("UART ERROR\r\n");
    Error_Handler();
 8000a7c:	f000 f8e2 	bl	8000c44 <Error_Handler>
  //printf("UART OK\r\n");
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000250 	.word	0x20000250
 8000a88:	40004800 	.word	0x40004800

08000a8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	f001 f917 	bl	8001d02 <HAL_PCD_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ada:	f000 f8b3 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000294 	.word	0x20000294

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b45      	ldr	r3, [pc, #276]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a44      	ldr	r2, [pc, #272]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a3d      	ldr	r2, [pc, #244]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a36      	ldr	r2, [pc, #216]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bac:	4822      	ldr	r0, [pc, #136]	; (8000c38 <MX_GPIO_Init+0x150>)
 8000bae:	f001 f88f 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	4821      	ldr	r0, [pc, #132]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000bb8:	f001 f88a 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_GPIO_Init+0x158>)
 8000bd4:	f000 fed0 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bd8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_GPIO_Init+0x150>)
 8000bf2:	f000 fec1 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000c0e:	f000 feb3 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000c26:	f000 fea7 	bl	8001978 <HAL_GPIO_Init>

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	40020800 	.word	0x40020800

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a55      	ldr	r2, [pc, #340]	; (8000e14 <HAL_ETH_MspInit+0x174>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	f040 80a4 	bne.w	8000e0c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a52      	ldr	r2, [pc, #328]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b50      	ldr	r3, [pc, #320]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cdc:	623b      	str	r3, [r7, #32]
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	4b45      	ldr	r3, [pc, #276]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a44      	ldr	r2, [pc, #272]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a3d      	ldr	r2, [pc, #244]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a36      	ldr	r2, [pc, #216]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a2f      	ldr	r2, [pc, #188]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d88:	2332      	movs	r3, #50	; 0x32
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d98:	230b      	movs	r3, #11
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	481e      	ldr	r0, [pc, #120]	; (8000e1c <HAL_ETH_MspInit+0x17c>)
 8000da4:	f000 fde8 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000da8:	2386      	movs	r3, #134	; 0x86
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db8:	230b      	movs	r3, #11
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4817      	ldr	r0, [pc, #92]	; (8000e20 <HAL_ETH_MspInit+0x180>)
 8000dc4:	f000 fdd8 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	480f      	ldr	r0, [pc, #60]	; (8000e24 <HAL_ETH_MspInit+0x184>)
 8000de6:	f000 fdc7 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000e08:	f000 fdb6 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40028000 	.word	0x40028000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40021800 	.word	0x40021800

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12c      	bne.n	8000ea8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_UART_MspInit+0x8c>)
 8000ea4:	f000 fd68 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004800 	.word	0x40004800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000edc:	d13f      	bne.n	8000f5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000efa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f18:	f000 fd2e 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f32:	f000 fd21 	bl	8001978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6353      	str	r3, [r2, #52]	; 0x34
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000f94:	f3ef 8314 	mrs	r3, CONTROL
 8000f98:	607b      	str	r3, [r7, #4]
  return(result);
 8000f9a:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8000f9c:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f383 8814 	msr	CONTROL, r3
}
 8000fb0:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f000 f88d 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 800100c:	bf00      	nop
  nop
 800100e:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001016:	490e      	ldr	r1, [pc, #56]	; (8001050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800102c:	4c0b      	ldr	r4, [pc, #44]	; (800105c <LoopFillZerobss+0x26>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800103a:	f7ff ffd5 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f002 f9d9 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fb95 	bl	8000770 <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001048:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001054:	0800348c 	.word	0x0800348c
  ldr r2, =_sbss
 8001058:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800105c:	200007ac 	.word	0x200007ac

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x34>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x34>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001072:	6013      	str	r3, [r2, #0]
/*#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif // DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x34>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x34>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f931 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fde0 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f93b 	bl	8001336 <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f911 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	200007a8 	.word	0x200007a8

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200007a8 	.word	0x200007a8

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff47 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff5c 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffb0 	bl	80012a4 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e06c      	b.n	800143c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2223      	movs	r2, #35	; 0x23
 8001370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fc93 	bl	8000ca0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <HAL_ETH_Init+0xf4>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_ETH_Init+0xf4>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <HAL_ETH_Init+0xf4>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_ETH_Init+0xf8>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a2b      	ldr	r2, [pc, #172]	; (8001448 <HAL_ETH_Init+0xf8>)
 800139c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <HAL_ETH_Init+0xf8>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4927      	ldr	r1, [pc, #156]	; (8001448 <HAL_ETH_Init+0xf8>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <HAL_ETH_Init+0xf8>)
 80013b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff feaa 	bl	8001124 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013d2:	e011      	b.n	80013f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013d4:	f7ff fea6 	bl	8001124 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013e2:	d909      	bls.n	80013f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2204      	movs	r2, #4
 80013e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	22e0      	movs	r2, #224	; 0xe0
 80013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e021      	b.n	800143c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e4      	bne.n	80013d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f944 	bl	8001698 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f9eb 	bl	80017ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fa41 	bl	800189e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	461a      	mov	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f9a9 	bl	800177c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2210      	movs	r2, #16
 8001436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800

0800144c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <ETH_SetMACConfig+0x134>)
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	7c1b      	ldrb	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <ETH_SetMACConfig+0x28>
 800146e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001472:	e000      	b.n	8001476 <ETH_SetMACConfig+0x2a>
 8001474:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	7c5b      	ldrb	r3, [r3, #17]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <ETH_SetMACConfig+0x38>
 800147e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001482:	e000      	b.n	8001486 <ETH_SetMACConfig+0x3a>
 8001484:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001486:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800148c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	7fdb      	ldrb	r3, [r3, #31]
 8001492:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001494:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800149a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	7f92      	ldrb	r2, [r2, #30]
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d102      	bne.n	80014aa <ETH_SetMACConfig+0x5e>
 80014a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a8:	e000      	b.n	80014ac <ETH_SetMACConfig+0x60>
 80014aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80014ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	7f1b      	ldrb	r3, [r3, #28]
 80014b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d102      	bne.n	80014d4 <ETH_SetMACConfig+0x88>
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	e000      	b.n	80014d6 <ETH_SetMACConfig+0x8a>
 80014d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	7bdb      	ldrb	r3, [r3, #15]
 80014dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ee:	4313      	orrs	r3, r2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff fe18 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001522:	4013      	ands	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001532:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001538:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001540:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001548:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001550:	4313      	orrs	r3, r2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff fde7 	bl	800113c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	ff20810f 	.word	0xff20810f

08001584 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <ETH_SetDMAConfig+0x110>)
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	7b1b      	ldrb	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <ETH_SetDMAConfig+0x2c>
 80015aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ae:	e000      	b.n	80015b2 <ETH_SetDMAConfig+0x2e>
 80015b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	7b5b      	ldrb	r3, [r3, #13]
 80015b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	7f52      	ldrb	r2, [r2, #29]
 80015be:	2a00      	cmp	r2, #0
 80015c0:	d102      	bne.n	80015c8 <ETH_SetDMAConfig+0x44>
 80015c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015c6:	e000      	b.n	80015ca <ETH_SetDMAConfig+0x46>
 80015c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	7b9b      	ldrb	r3, [r3, #14]
 80015d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7f1b      	ldrb	r3, [r3, #28]
 80015de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	7f9b      	ldrb	r3, [r3, #30]
 80015e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015f8:	4313      	orrs	r3, r2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff fd8e 	bl	800113c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	461a      	mov	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	791b      	ldrb	r3, [r3, #4]
 8001632:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001638:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800163e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001644:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800164c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800164e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001656:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800165c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800166a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff fd5f 	bl	800113c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f8de3f23 	.word	0xf8de3f23

08001698 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0a6      	sub	sp, #152	; 0x98
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016d4:	2300      	movs	r3, #0
 80016d6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800170c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001710:	4619      	mov	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fe9a 	bl	800144c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001718:	2301      	movs	r3, #1
 800171a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800171c:	2301      	movs	r3, #1
 800171e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001720:	2301      	movs	r3, #1
 8001722:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001726:	2301      	movs	r3, #1
 8001728:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800173a:	2300      	movs	r3, #0
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001744:	2301      	movs	r3, #1
 8001746:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800174e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001752:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff08 	bl	8001584 <ETH_SetDMAConfig>
}
 8001774:	bf00      	nop
 8001776:	3798      	adds	r7, #152	; 0x98
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3305      	adds	r3, #5
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	3204      	adds	r2, #4
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <ETH_MACAddressConfig+0x68>)
 800179e:	4413      	add	r3, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3303      	adds	r3, #3
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	061a      	lsls	r2, r3, #24
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3302      	adds	r3, #2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	041b      	lsls	r3, r3, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3301      	adds	r3, #1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	4313      	orrs	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <ETH_MACAddressConfig+0x6c>)
 80017ce:	4413      	add	r3, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40028040 	.word	0x40028040
 80017e8:	40028044 	.word	0x40028044

080017ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e03e      	b.n	8001878 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68d9      	ldr	r1, [r3, #12]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	3206      	adds	r2, #6
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d80c      	bhi.n	800185c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68d9      	ldr	r1, [r3, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	461a      	mov	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	e004      	b.n	8001866 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	461a      	mov	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3301      	adds	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d9bd      	bls.n	80017fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001890:	611a      	str	r2, [r3, #16]
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e046      	b.n	800193a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6919      	ldr	r1, [r3, #16]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80018f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	3212      	adds	r2, #18
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d80c      	bhi.n	800192a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6919      	ldr	r1, [r3, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	461a      	mov	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	e004      	b.n	8001934 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d9b5      	bls.n	80018ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196a:	60da      	str	r2, [r3, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e177      	b.n	8001c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8166 	bne.w	8001c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d130      	bne.n	8001a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0201 	and.w	r2, r3, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d017      	beq.n	8001a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d123      	bne.n	8001abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	69b9      	ldr	r1, [r7, #24]
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80c0 	beq.w	8001c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1a:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_GPIO_Init+0x32c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d037      	beq.n	8001bb6 <HAL_GPIO_Init+0x23e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_GPIO_Init+0x330>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_GPIO_Init+0x23a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d02b      	beq.n	8001bae <HAL_GPIO_Init+0x236>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <HAL_GPIO_Init+0x338>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d025      	beq.n	8001baa <HAL_GPIO_Init+0x232>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a54      	ldr	r2, [pc, #336]	; (8001cb4 <HAL_GPIO_Init+0x33c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01f      	beq.n	8001ba6 <HAL_GPIO_Init+0x22e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <HAL_GPIO_Init+0x340>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d019      	beq.n	8001ba2 <HAL_GPIO_Init+0x22a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_GPIO_Init+0x344>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_Init+0x226>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_GPIO_Init+0x348>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00d      	beq.n	8001b9a <HAL_GPIO_Init+0x222>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_GPIO_Init+0x34c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x21e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_GPIO_Init+0x350>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_GPIO_Init+0x21a>
 8001b8e:	2309      	movs	r3, #9
 8001b90:	e012      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b92:	230a      	movs	r3, #10
 8001b94:	e010      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b96:	2308      	movs	r3, #8
 8001b98:	e00e      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae84 	bls.w	8001994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40021c00 	.word	0x40021c00
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40022400 	.word	0x40022400
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cec:	e003      	b.n	8001cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cee:	887b      	ldrh	r3, [r7, #2]
 8001cf0:	041a      	lsls	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	619a      	str	r2, [r3, #24]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d04:	b08f      	sub	sp, #60	; 0x3c
 8001d06:	af0a      	add	r7, sp, #40	; 0x28
 8001d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e10f      	b.n	8001f34 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff f8c4 	bl	8000ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2203      	movs	r2, #3
 8001d38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 f8ad 	bl	8002eb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	687e      	ldr	r6, [r7, #4]
 8001d60:	466d      	mov	r5, sp
 8001d62:	f106 0410 	add.w	r4, r6, #16
 8001d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d76:	1d33      	adds	r3, r6, #4
 8001d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	f001 f838 	bl	8002df0 <USB_CoreInit>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0d0      	b.n	8001f34 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 f89b 	bl	8002ed4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e04a      	b.n	8001e3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	333d      	adds	r3, #61	; 0x3d
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	333c      	adds	r3, #60	; 0x3c
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	b298      	uxth	r0, r3
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3344      	adds	r3, #68	; 0x44
 8001de0:	4602      	mov	r2, r0
 8001de2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3340      	adds	r3, #64	; 0x40
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	3348      	adds	r3, #72	; 0x48
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	334c      	adds	r3, #76	; 0x4c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3354      	adds	r3, #84	; 0x54
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3301      	adds	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3af      	bcc.n	8001da4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e044      	b.n	8001ed4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d3b5      	bcc.n	8001e4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	687e      	ldr	r6, [r7, #4]
 8001ee6:	466d      	mov	r5, sp
 8001ee8:	f106 0410 	add.w	r4, r6, #16
 8001eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efc:	1d33      	adds	r3, r6, #4
 8001efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f00:	6838      	ldr	r0, [r7, #0]
 8001f02:	f001 f833 	bl	8002f6c <USB_DevInit>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00d      	b.n	8001f34 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 f9fe 	bl	800332e <USB_DevDisconnect>

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e267      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d075      	beq.n	8002046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f5a:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d00c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f66:	4b85      	ldr	r3, [pc, #532]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d112      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f7e:	d10b      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	4b7e      	ldr	r3, [pc, #504]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d05b      	beq.n	8002044 <HAL_RCC_OscConfig+0x108>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d157      	bne.n	8002044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e242      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d106      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x74>
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a75      	ldr	r2, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xb0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x98>
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6f      	ldr	r2, [pc, #444]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6c      	ldr	r2, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xb0>
 8001fd4:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a68      	ldr	r2, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f896 	bl	8001124 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f892 	bl	8001124 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e207      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b5b      	ldr	r3, [pc, #364]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xc0>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff f882 	bl	8001124 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff f87e 	bl	8001124 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1f3      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0xe8>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d063      	beq.n	800211a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002052:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	4b44      	ldr	r3, [pc, #272]	; (800217c <HAL_RCC_OscConfig+0x240>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x152>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e1c7      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4937      	ldr	r1, [pc, #220]	; (800217c <HAL_RCC_OscConfig+0x240>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	e03a      	b.n	800211a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCC_OscConfig+0x244>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff f837 	bl	8001124 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff f833 	bl	8001124 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1a8      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_RCC_OscConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4925      	ldr	r1, [pc, #148]	; (800217c <HAL_RCC_OscConfig+0x240>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_OscConfig+0x244>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff f816 	bl	8001124 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff f812 	bl	8001124 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e187      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d036      	beq.n	8002194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d016      	beq.n	800215c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_RCC_OscConfig+0x248>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7fe fff6 	bl	8001124 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213c:	f7fe fff2 	bl	8001124 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e167      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x200>
 800215a:	e01b      	b.n	8002194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x248>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7fe ffdf 	bl	8001124 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002168:	e00e      	b.n	8002188 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216a:	f7fe ffdb 	bl	8001124 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d907      	bls.n	8002188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e150      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
 800217c:	40023800 	.word	0x40023800
 8002180:	42470000 	.word	0x42470000
 8002184:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002188:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800218a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ea      	bne.n	800216a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8097 	beq.w	80022d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a6:	4b81      	ldr	r3, [pc, #516]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a7c      	ldr	r2, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b7a      	ldr	r3, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ce:	2301      	movs	r3, #1
 80021d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b77      	ldr	r3, [pc, #476]	; (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021de:	4b74      	ldr	r3, [pc, #464]	; (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a73      	ldr	r2, [pc, #460]	; (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7fe ff9b 	bl	8001124 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7fe ff97 	bl	8001124 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e10c      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x474>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x2ea>
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a63      	ldr	r2, [pc, #396]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
 8002224:	e01c      	b.n	8002260 <HAL_RCC_OscConfig+0x324>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x30c>
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a5e      	ldr	r2, [pc, #376]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a5b      	ldr	r2, [pc, #364]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0x324>
 8002248:	4b58      	ldr	r3, [pc, #352]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	4a57      	ldr	r2, [pc, #348]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6713      	str	r3, [r2, #112]	; 0x70
 8002254:	4b55      	ldr	r3, [pc, #340]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a54      	ldr	r2, [pc, #336]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7fe ff5c 	bl	8001124 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe ff58 	bl	8001124 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e0cb      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ee      	beq.n	8002270 <HAL_RCC_OscConfig+0x334>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe ff46 	bl	8001124 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7fe ff42 	bl	8001124 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0b5      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ee      	bne.n	800229c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c4:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a38      	ldr	r2, [pc, #224]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a1 	beq.w	800241c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022da:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d05c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d141      	bne.n	8002372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_RCC_OscConfig+0x478>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe ff16 	bl	8001124 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe ff12 	bl	8001124 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e087      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	491b      	ldr	r1, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_RCC_OscConfig+0x478>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe feeb 	bl	8001124 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe fee7 	bl	8001124 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e05c      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x416>
 8002370:	e054      	b.n	800241c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_RCC_OscConfig+0x478>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fed4 	bl	8001124 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe fed0 	bl	8001124 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e045      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x444>
 800239e:	e03d      	b.n	800241c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e038      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40007000 	.word	0x40007000
 80023b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x4ec>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d028      	beq.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d121      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d11a      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d111      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	3b01      	subs	r3, #1
 8002402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0cc      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d90c      	bls.n	8002468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800248a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d044      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d119      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e067      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4934      	ldr	r1, [pc, #208]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe fe02 	bl	8001124 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe fdfe 	bl	8001124 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e04f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d20c      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fd62 	bl	800109c <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08003464 	.word	0x08003464
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b094      	sub	sp, #80	; 0x50
 80025fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	647b      	str	r3, [r7, #68]	; 0x44
 8002604:	2300      	movs	r3, #0
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002608:	2300      	movs	r3, #0
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d00d      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x40>
 800261c:	2b08      	cmp	r3, #8
 800261e:	f200 80e1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3a>
 800262a:	e0db      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002630:	e0db      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <HAL_RCC_GetSysClockFreq+0x208>)
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002636:	e0d8      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
 8002658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	f04f 0000 	mov.w	r0, #0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267c:	0150      	lsls	r0, r2, #5
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4621      	mov	r1, r4
 8002684:	1a51      	subs	r1, r2, r1
 8002686:	6139      	str	r1, [r7, #16]
 8002688:	4629      	mov	r1, r5
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a6:	4651      	mov	r1, sl
 80026a8:	018a      	lsls	r2, r1, #6
 80026aa:	4651      	mov	r1, sl
 80026ac:	ebb2 0801 	subs.w	r8, r2, r1
 80026b0:	4659      	mov	r1, fp
 80026b2:	eb63 0901 	sbc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	eb18 0303 	adds.w	r3, r8, r3
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	462b      	mov	r3, r5
 80026d8:	eb49 0303 	adc.w	r3, r9, r3
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ea:	4629      	mov	r1, r5
 80026ec:	024b      	lsls	r3, r1, #9
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f4:	4621      	mov	r1, r4
 80026f6:	024a      	lsls	r2, r1, #9
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002708:	f7fd fdc2 	bl	8000290 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	e058      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	2200      	movs	r2, #0
 800271e:	4618      	mov	r0, r3
 8002720:	4611      	mov	r1, r2
 8002722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4641      	mov	r1, r8
 800274a:	ebb2 0a01 	subs.w	sl, r2, r1
 800274e:	4649      	mov	r1, r9
 8002750:	eb63 0b01 	sbc.w	fp, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002768:	ebb2 040a 	subs.w	r4, r2, sl
 800276c:	eb63 050b 	sbc.w	r5, r3, fp
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	61fa      	str	r2, [r7, #28]
 80027b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027bc:	f7fd fd68 	bl	8000290 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3750      	adds	r7, #80	; 0x50
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	08003474 	.word	0x08003474

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffdc 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b5b      	lsrs	r3, r3, #13
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	08003474 	.word	0x08003474

0800286c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e03f      	b.n	80028fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe faca 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	; 0x24
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f829 	bl	8002908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800290c:	b0c0      	sub	sp, #256	; 0x100
 800290e:	af00      	add	r7, sp, #0
 8002910:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	68d9      	ldr	r1, [r3, #12]
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	ea40 0301 	orr.w	r3, r0, r1
 8002930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	431a      	orrs	r2, r3
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	431a      	orrs	r2, r3
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002960:	f021 010c 	bic.w	r1, r1, #12
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800296e:	430b      	orrs	r3, r1
 8002970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002982:	6999      	ldr	r1, [r3, #24]
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	ea40 0301 	orr.w	r3, r0, r1
 800298e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b8f      	ldr	r3, [pc, #572]	; (8002bd4 <UART_SetConfig+0x2cc>)
 8002998:	429a      	cmp	r2, r3
 800299a:	d005      	beq.n	80029a8 <UART_SetConfig+0xa0>
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4b8d      	ldr	r3, [pc, #564]	; (8002bd8 <UART_SetConfig+0x2d0>)
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d104      	bne.n	80029b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029a8:	f7ff ff4c 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 80029ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029b0:	e003      	b.n	80029ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029b2:	f7ff ff33 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80029b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c4:	f040 810c 	bne.w	8002be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029cc:	2200      	movs	r2, #0
 80029ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029da:	4622      	mov	r2, r4
 80029dc:	462b      	mov	r3, r5
 80029de:	1891      	adds	r1, r2, r2
 80029e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80029e2:	415b      	adcs	r3, r3
 80029e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029ea:	4621      	mov	r1, r4
 80029ec:	eb12 0801 	adds.w	r8, r2, r1
 80029f0:	4629      	mov	r1, r5
 80029f2:	eb43 0901 	adc.w	r9, r3, r1
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a0a:	4690      	mov	r8, r2
 8002a0c:	4699      	mov	r9, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	eb18 0303 	adds.w	r3, r8, r3
 8002a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a18:	462b      	mov	r3, r5
 8002a1a:	eb49 0303 	adc.w	r3, r9, r3
 8002a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a36:	460b      	mov	r3, r1
 8002a38:	18db      	adds	r3, r3, r3
 8002a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	eb42 0303 	adc.w	r3, r2, r3
 8002a42:	657b      	str	r3, [r7, #84]	; 0x54
 8002a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a4c:	f7fd fc20 	bl	8000290 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <UART_SetConfig+0x2d4>)
 8002a56:	fba3 2302 	umull	r2, r3, r3, r2
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	011c      	lsls	r4, r3, #4
 8002a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a70:	4642      	mov	r2, r8
 8002a72:	464b      	mov	r3, r9
 8002a74:	1891      	adds	r1, r2, r2
 8002a76:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a78:	415b      	adcs	r3, r3
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a80:	4641      	mov	r1, r8
 8002a82:	eb12 0a01 	adds.w	sl, r2, r1
 8002a86:	4649      	mov	r1, r9
 8002a88:	eb43 0b01 	adc.w	fp, r3, r1
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aa0:	4692      	mov	sl, r2
 8002aa2:	469b      	mov	fp, r3
 8002aa4:	4643      	mov	r3, r8
 8002aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8002aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002aae:	464b      	mov	r3, r9
 8002ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002acc:	460b      	mov	r3, r1
 8002ace:	18db      	adds	r3, r3, r3
 8002ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	eb42 0303 	adc.w	r3, r2, r3
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ae2:	f7fd fbd5 	bl	8000290 <__aeabi_uldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <UART_SetConfig+0x2d4>)
 8002aee:	fba3 2301 	umull	r2, r3, r3, r1
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2264      	movs	r2, #100	; 0x64
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	1acb      	subs	r3, r1, r3
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b02:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <UART_SetConfig+0x2d4>)
 8002b04:	fba3 2302 	umull	r2, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b10:	441c      	add	r4, r3
 8002b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b24:	4642      	mov	r2, r8
 8002b26:	464b      	mov	r3, r9
 8002b28:	1891      	adds	r1, r2, r2
 8002b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b2c:	415b      	adcs	r3, r3
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b34:	4641      	mov	r1, r8
 8002b36:	1851      	adds	r1, r2, r1
 8002b38:	6339      	str	r1, [r7, #48]	; 0x30
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	414b      	adcs	r3, r1
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b4c:	4659      	mov	r1, fp
 8002b4e:	00cb      	lsls	r3, r1, #3
 8002b50:	4651      	mov	r1, sl
 8002b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b56:	4651      	mov	r1, sl
 8002b58:	00ca      	lsls	r2, r1, #3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4642      	mov	r2, r8
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b68:	464b      	mov	r3, r9
 8002b6a:	460a      	mov	r2, r1
 8002b6c:	eb42 0303 	adc.w	r3, r2, r3
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b88:	460b      	mov	r3, r1
 8002b8a:	18db      	adds	r3, r3, r3
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8e:	4613      	mov	r3, r2
 8002b90:	eb42 0303 	adc.w	r3, r2, r3
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b9e:	f7fd fb77 	bl	8000290 <__aeabi_uldivmod>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <UART_SetConfig+0x2d4>)
 8002ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	2164      	movs	r1, #100	; 0x64
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	3332      	adds	r3, #50	; 0x32
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <UART_SetConfig+0x2d4>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	f003 0207 	and.w	r2, r3, #7
 8002bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4422      	add	r2, r4
 8002bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bd0:	e105      	b.n	8002dde <UART_SetConfig+0x4d6>
 8002bd2:	bf00      	nop
 8002bd4:	40011000 	.word	0x40011000
 8002bd8:	40011400 	.word	0x40011400
 8002bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be4:	2200      	movs	r2, #0
 8002be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bf2:	4642      	mov	r2, r8
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	1891      	adds	r1, r2, r2
 8002bf8:	6239      	str	r1, [r7, #32]
 8002bfa:	415b      	adcs	r3, r3
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c02:	4641      	mov	r1, r8
 8002c04:	1854      	adds	r4, r2, r1
 8002c06:	4649      	mov	r1, r9
 8002c08:	eb43 0501 	adc.w	r5, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	00eb      	lsls	r3, r5, #3
 8002c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c1a:	00e2      	lsls	r2, r4, #3
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	461d      	mov	r5, r3
 8002c20:	4643      	mov	r3, r8
 8002c22:	18e3      	adds	r3, r4, r3
 8002c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c28:	464b      	mov	r3, r9
 8002c2a:	eb45 0303 	adc.w	r3, r5, r3
 8002c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c4e:	4629      	mov	r1, r5
 8002c50:	008b      	lsls	r3, r1, #2
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c58:	4621      	mov	r1, r4
 8002c5a:	008a      	lsls	r2, r1, #2
 8002c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c60:	f7fd fb16 	bl	8000290 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4b60      	ldr	r3, [pc, #384]	; (8002dec <UART_SetConfig+0x4e4>)
 8002c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	011c      	lsls	r4, r3, #4
 8002c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	1891      	adds	r1, r2, r2
 8002c8a:	61b9      	str	r1, [r7, #24]
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c94:	4641      	mov	r1, r8
 8002c96:	1851      	adds	r1, r2, r1
 8002c98:	6139      	str	r1, [r7, #16]
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	414b      	adcs	r3, r1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cac:	4659      	mov	r1, fp
 8002cae:	00cb      	lsls	r3, r1, #3
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	00ca      	lsls	r2, r1, #3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cc8:	464b      	mov	r3, r9
 8002cca:	460a      	mov	r2, r1
 8002ccc:	eb42 0303 	adc.w	r3, r2, r3
 8002cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cec:	4649      	mov	r1, r9
 8002cee:	008b      	lsls	r3, r1, #2
 8002cf0:	4641      	mov	r1, r8
 8002cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cf6:	4641      	mov	r1, r8
 8002cf8:	008a      	lsls	r2, r1, #2
 8002cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cfe:	f7fd fac7 	bl	8000290 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <UART_SetConfig+0x4e4>)
 8002d08:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	2164      	movs	r1, #100	; 0x64
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	3332      	adds	r3, #50	; 0x32
 8002d1a:	4a34      	ldr	r2, [pc, #208]	; (8002dec <UART_SetConfig+0x4e4>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d26:	441c      	add	r4, r3
 8002d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d30:	677a      	str	r2, [r7, #116]	; 0x74
 8002d32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d36:	4642      	mov	r2, r8
 8002d38:	464b      	mov	r3, r9
 8002d3a:	1891      	adds	r1, r2, r2
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	415b      	adcs	r3, r3
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d46:	4641      	mov	r1, r8
 8002d48:	1851      	adds	r1, r2, r1
 8002d4a:	6039      	str	r1, [r7, #0]
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	414b      	adcs	r3, r1
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d5e:	4659      	mov	r1, fp
 8002d60:	00cb      	lsls	r3, r1, #3
 8002d62:	4651      	mov	r1, sl
 8002d64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d68:	4651      	mov	r1, sl
 8002d6a:	00ca      	lsls	r2, r1, #3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4603      	mov	r3, r0
 8002d72:	4642      	mov	r2, r8
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d78:	464b      	mov	r3, r9
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d8c:	667a      	str	r2, [r7, #100]	; 0x64
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	008b      	lsls	r3, r1, #2
 8002d9e:	4641      	mov	r1, r8
 8002da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da4:	4641      	mov	r1, r8
 8002da6:	008a      	lsls	r2, r1, #2
 8002da8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dac:	f7fd fa70 	bl	8000290 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <UART_SetConfig+0x4e4>)
 8002db6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2164      	movs	r1, #100	; 0x64
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	3332      	adds	r3, #50	; 0x32
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <UART_SetConfig+0x4e4>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	f003 020f 	and.w	r2, r3, #15
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4422      	add	r2, r4
 8002ddc:	609a      	str	r2, [r3, #8]
}
 8002dde:	bf00      	nop
 8002de0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dea:	bf00      	nop
 8002dec:	51eb851f 	.word	0x51eb851f

08002df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002df0:	b084      	sub	sp, #16
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	f107 001c 	add.w	r0, r7, #28
 8002dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d122      	bne.n	8002e4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 faa2 	bl	800338c <USB_CoreReset>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e01a      	b.n	8002e84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa96 	bl	800338c <USB_CoreReset>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
 8002e76:	e005      	b.n	8002e84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10b      	bne.n	8002ea2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f043 0206 	orr.w	r2, r3, #6
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eae:	b004      	add	sp, #16
 8002eb0:	4770      	bx	lr

08002eb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0201 	bic.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d115      	bne.n	8002f22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fe f91a 	bl	800113c <HAL_Delay>
      ms++;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fa2e 	bl	8003370 <USB_GetMode>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d01e      	beq.n	8002f58 <USB_SetCurrentMode+0x84>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b31      	cmp	r3, #49	; 0x31
 8002f1e:	d9f0      	bls.n	8002f02 <USB_SetCurrentMode+0x2e>
 8002f20:	e01a      	b.n	8002f58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d115      	bne.n	8002f54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7fe f901 	bl	800113c <HAL_Delay>
      ms++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fa15 	bl	8003370 <USB_GetMode>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <USB_SetCurrentMode+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b31      	cmp	r3, #49	; 0x31
 8002f50:	d9f0      	bls.n	8002f34 <USB_SetCurrentMode+0x60>
 8002f52:	e001      	b.n	8002f58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e005      	b.n	8002f64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b32      	cmp	r3, #50	; 0x32
 8002f5c:	d101      	bne.n	8002f62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e009      	b.n	8002fa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3340      	adds	r3, #64	; 0x40
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b0e      	cmp	r3, #14
 8002fa4:	d9f2      	bls.n	8002f8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11c      	bne.n	8002fe6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe4:	e00b      	b.n	8002ffe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003004:	461a      	mov	r2, r3
 8003006:	2300      	movs	r3, #0
 8003008:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003010:	4619      	mov	r1, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003018:	461a      	mov	r2, r3
 800301a:	680b      	ldr	r3, [r1, #0]
 800301c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10c      	bne.n	800303e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800302a:	2100      	movs	r1, #0
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f965 	bl	80032fc <USB_SetDevSpeed>
 8003032:	e008      	b.n	8003046 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003034:	2101      	movs	r1, #1
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f960 	bl	80032fc <USB_SetDevSpeed>
 800303c:	e003      	b.n	8003046 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800303e:	2103      	movs	r1, #3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f95b 	bl	80032fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003046:	2110      	movs	r1, #16
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8f3 	bl	8003234 <USB_FlushTxFifo>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f91f 	bl	800329c <USB_FlushRxFifo>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306e:	461a      	mov	r2, r3
 8003070:	2300      	movs	r3, #0
 8003072:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307a:	461a      	mov	r2, r3
 800307c:	2300      	movs	r3, #0
 800307e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	461a      	mov	r2, r3
 8003088:	2300      	movs	r3, #0
 800308a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	e043      	b.n	800311a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a8:	d118      	bne.n	80030dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030bc:	461a      	mov	r2, r3
 80030be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e013      	b.n	80030ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d2:	461a      	mov	r2, r3
 80030d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e008      	b.n	80030ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e8:	461a      	mov	r2, r3
 80030ea:	2300      	movs	r3, #0
 80030ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fa:	461a      	mov	r2, r3
 80030fc:	2300      	movs	r3, #0
 80030fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310c:	461a      	mov	r2, r3
 800310e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	3301      	adds	r3, #1
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	429a      	cmp	r2, r3
 8003120:	d3b7      	bcc.n	8003092 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	e043      	b.n	80031b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800313a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313e:	d118      	bne.n	8003172 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	461a      	mov	r2, r3
 8003154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e013      	b.n	8003184 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003168:	461a      	mov	r2, r3
 800316a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	e008      	b.n	8003184 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003190:	461a      	mov	r2, r3
 8003192:	2300      	movs	r3, #0
 8003194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d3b7      	bcc.n	8003128 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <USB_DevInit+0x2c4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f043 0208 	orr.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800320a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003220:	7dfb      	ldrb	r3, [r7, #23]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800322c:	b004      	add	sp, #16
 800322e:	4770      	bx	lr
 8003230:	803c3800 	.word	0x803c3800

08003234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3301      	adds	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a13      	ldr	r2, [pc, #76]	; (8003298 <USB_FlushTxFifo+0x64>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e01b      	b.n	800328c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	daf2      	bge.n	8003242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	019b      	lsls	r3, r3, #6
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a08      	ldr	r2, [pc, #32]	; (8003298 <USB_FlushTxFifo+0x64>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e006      	b.n	800328c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b20      	cmp	r3, #32
 8003288:	d0f0      	beq.n	800326c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	00030d40 	.word	0x00030d40

0800329c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3301      	adds	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <USB_FlushRxFifo+0x5c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e018      	b.n	80032ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	daf2      	bge.n	80032a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2210      	movs	r2, #16
 80032ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <USB_FlushRxFifo+0x5c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e006      	b.n	80032ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d0f0      	beq.n	80032cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	00030d40 	.word	0x00030d40

080032fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	68f9      	ldr	r1, [r7, #12]
 8003318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003348:	f023 0303 	bic.w	r3, r3, #3
 800334c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0301 	and.w	r3, r3, #1
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <USB_CoreReset+0x64>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e01b      	b.n	80033e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	daf2      	bge.n	8003398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3301      	adds	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <USB_CoreReset+0x64>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e006      	b.n	80033e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d0f0      	beq.n	80033c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	00030d40 	.word	0x00030d40

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4d0d      	ldr	r5, [pc, #52]	; (800342c <__libc_init_array+0x38>)
 80033f8:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	2600      	movs	r6, #0
 8003400:	42a6      	cmp	r6, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	4d0b      	ldr	r5, [pc, #44]	; (8003434 <__libc_init_array+0x40>)
 8003406:	4c0c      	ldr	r4, [pc, #48]	; (8003438 <__libc_init_array+0x44>)
 8003408:	f000 f820 	bl	800344c <_init>
 800340c:	1b64      	subs	r4, r4, r5
 800340e:	10a4      	asrs	r4, r4, #2
 8003410:	2600      	movs	r6, #0
 8003412:	42a6      	cmp	r6, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f855 3b04 	ldr.w	r3, [r5], #4
 800341c:	4798      	blx	r3
 800341e:	3601      	adds	r6, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f855 3b04 	ldr.w	r3, [r5], #4
 8003426:	4798      	blx	r3
 8003428:	3601      	adds	r6, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08003484 	.word	0x08003484
 8003430:	08003484 	.word	0x08003484
 8003434:	08003484 	.word	0x08003484
 8003438:	08003488 	.word	0x08003488

0800343c <memset>:
 800343c:	4402      	add	r2, r0
 800343e:	4603      	mov	r3, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	f803 1b01 	strb.w	r1, [r3], #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <_init>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr

08003458 <_fini>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr
