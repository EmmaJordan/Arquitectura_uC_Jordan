
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005388  08005388  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005390  08005390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  20000824  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d9fb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00010046  00000000  00000000  0002da9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000204a  00000000  00000000  0003dae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cc8  00000000  00000000  0003fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dc54e  00000000  00000000  000407f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000be0  00000000  00000000  0011cd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024d9d  00000000  00000000  0011d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001426c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d88  00000000  00000000  00142718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080052ac 	.word	0x080052ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080052ac 	.word	0x080052ac

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@
.thumb_func
    asm_zeros:
        @ Registros usados
        @   r2: valor cero
        mov r2, 0           @ constante cero en r2
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <.asm_zeros_loop>:
    .asm_zeros_loop:
        str r2, [r0], 4    	@str carga en memoria el valor de un registro
 80001fc:	f840 2b04 	str.w	r2, [r0], #4
        					@carga en memoria (r0=*vector[0]) lo que tengo en r2 (0) y luego r0+=4 --> r0=*vector[1];
        					@ sizeof(uint32_t) == 4, *vector++ = r2. //
        subs r1, 1          @ r1-=1; longitud--; y actualiza flag de estado del procesador
 8000200:	3901      	subs	r1, #1
        bne .asm_zeros_loop @vuelve a repetir el ciclo, con salto condicional (NE: not equal, flag Z=0), es decir mientras r1 no sea 0
 8000202:	d1fb      	bne.n	80001fc <.asm_zeros_loop>
        bx lr				@retorna link register
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
@
.thumb_func

    asm_productoEscalar32:

    push {r5}
 8000206:	b420      	push	{r5}
	push {r6}
 8000208:	b440      	push	{r6}

0800020a <.loop32>:

    .loop32:
    	ldr	r5, [r0], 4 	@carga un registro r5 con un valor de memoria r0 y luego r0+=4;
 800020a:	f850 5b04 	ldr.w	r5, [r0], #4
    						@es decir, carga en r5 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul r6, r5, r3  	@multiplica r5 por r3 (escalar) y lo guarda en r6
 800020e:	fb05 f603 	mul.w	r6, r5, r3
		str r6, [r1], 4 	@carga en memoria r1 lo que tengo en r6 y luego r1+=4;
 8000212:	f841 6b04 	str.w	r6, [r1], #4
							@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs r2, 1      	@decrementa en 1 a r2 (longitud--)y actualiza flag de estado del procesador
 8000216:	3a01      	subs	r2, #1
        bne	.loop32			@vuelve a .loop32, ejecución condicional (Not Equal, es decir Z=0)
 8000218:	d1f7      	bne.n	800020a <.loop32>

        pop {r6}
 800021a:	bc40      	pop	{r6}
        pop {r5}
 800021c:	bc20      	pop	{r5}

        bx lr
 800021e:	4770      	bx	lr

08000220 <asm_productoEscalar16>:
@
.thumb_func

    asm_productoEscalar16: //Nota: da el mismo resultado ldr y str con parámetro 4, que ldrh t strh con parámetro 2

    push {r8}
 8000220:	f84d 8d04 	str.w	r8, [sp, #-4]!
	push {r9}
 8000224:	f84d 9d04 	str.w	r9, [sp, #-4]!

08000228 <.loop16>:

    .loop16:
    	ldrh	r8, [r0], 2 	@carga un registro r8 con un valor de memoria r0 y luego r0+=2;
 8000228:	f830 8b02 	ldrh.w	r8, [r0], #2
    							@es decir, carga en r8 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul 	r9, r8, r3  	@multiplica r8 por r3 (escalar) y lo guarda en r6
 800022c:	fb08 f903 	mul.w	r9, r8, r3
		strh 	r9, [r1], 2 	@carga en memoria r1 lo que tengo en r9 y luego r1+=2;
 8000230:	f821 9b02 	strh.w	r9, [r1], #2
								@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs 	r2, 1      		@decrementa en 1 a r2 (longitud--)
 8000234:	3a01      	subs	r2, #1
        bne		.loop16			@vuelve a .loop16, ejecución condicional (Not Equal, es decir Z=0)
 8000236:	d1f7      	bne.n	8000228 <.loop16>

        pop {r9}
 8000238:	f85d 9b04 	ldr.w	r9, [sp], #4
        pop {r8}
 800023c:	f85d 8b04 	ldr.w	r8, [sp], #4

        bx lr
 8000240:	4770      	bx	lr

08000242 <asm_productoEscalar12>:
@
.thumb_func

    asm_productoEscalar12:

    push {r4}
 8000242:	b410      	push	{r4}
	push {r5}
 8000244:	b420      	push	{r5}
	push {r6}
 8000246:	b440      	push	{r6}
	mov r6, #0x0FFF		//valor a saturar
 8000248:	f640 76ff 	movw	r6, #4095	; 0xfff

0800024c <.asm_productoEscalar12_loop12>:
    .asm_productoEscalar12_loop12:
		    	ldrh  	r4, [r0], 2 	@ carga un registro r4 con un valor de memoria r0 y luego r0+=2;
 800024c:	f830 4b02 	ldrh.w	r4, [r0], #2
		    							@ es decir, carga en r4 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
		    	mul 	r5, r4,  r3  	@ multiplica r4 por r3 (escalar) y lo guarda en r5
 8000250:	fb04 f503 	mul.w	r5, r4, r3
				cmp		r6, r5		    @ compara r5 con r6 (resta)
 8000254:	42ae      	cmp	r6, r5
				bhi		isNO			@ higher unsigned
 8000256:	d801      	bhi.n	800025c <isNO>

08000258 <isYES>:

		isYES: //Saturó
				mov 	r5, r6  		@ satura resultado a 12 bits
 8000258:	4635      	mov	r5, r6
				b isNO 					@ salto incondicional a done
 800025a:	e7ff      	b.n	800025c <isNO>

0800025c <isNO>:

		isNO:
				strh  	r5, [r1], 2		@ carga en memoria r1 lo que tengo en r5 y luego r1+=2; <----
 800025c:	f821 5b02 	strh.w	r5, [r1], #2
										@ es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
		    	subs 	r2, 1      		@ decrementa en 1 a r2 (longitud--)
 8000260:	3a01      	subs	r2, #1
		        bne		.asm_productoEscalar12_loop12			@ vuelve a .loop12, ejecución condicional (Not Equal, es decir Z=0)
 8000262:	d1f3      	bne.n	800024c <.asm_productoEscalar12_loop12>

	pop {r6}
 8000264:	bc40      	pop	{r6}
    pop {r5}
 8000266:	bc20      	pop	{r5}
    pop {r4}
 8000268:	bc10      	pop	{r4}

    bx lr
 800026a:	4770      	bx	lr

0800026c <asm_productoEscalar12_usat>:
@
.thumb_func

    asm_productoEscalar12_usat:

    push {r8}
 800026c:	f84d 8d04 	str.w	r8, [sp, #-4]!
	push {r9}
 8000270:	f84d 9d04 	str.w	r9, [sp, #-4]!

08000274 <.loop12_usat>:

    .loop12_usat:
    	ldrh  	r8, [r0], 2 	@carga un registro r8 con un valor de memoria r0 y luego r0+=2; <------
 8000274:	f830 8b02 	ldrh.w	r8, [r0], #2
    							@es decir, carga en r8 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul 	r9, r8,  r3  	@multiplica r8 por r3 (escalar) y lo guarda en r9
 8000278:	fb08 f903 	mul.w	r9, r8, r3
		usat 	r9, 12,  r9    //AGREGADO SATURACIÓN a 12 bits
 800027c:	f389 090c 	usat	r9, #12, r9
		strh  	r9, [r1], 2 	@carga en memoria r1 lo que tengo en r9 y luego r1+=2; <----
 8000280:	f821 9b02 	strh.w	r9, [r1], #2
								@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs 	r2, 1      		@decrementa en 1 a r2 (longitud--)
 8000284:	3a01      	subs	r2, #1
        bne		.loop12_usat	@vuelve a .loop12, ejecución condicional (Not Equal, es decir Z=0)
 8000286:	d1f5      	bne.n	8000274 <.loop12_usat>

    pop {r9}
 8000288:	f85d 9b04 	ldr.w	r9, [sp], #4
    pop {r8}
 800028c:	f85d 8b04 	ldr.w	r8, [sp], #4

    bx lr
 8000290:	4770      	bx	lr

08000292 <asm_max>:
@
.thumb_func

	    asm_max:

    	push {r4}
 8000292:	b410      	push	{r4}
    	push {r5}
 8000294:	b420      	push	{r5}

    	ldr r2, [r0], 4    		@ guardo en r2=*r0 (primer elemento del arreglo) e incremento puntero
 8000296:	f850 2b04 	ldr.w	r2, [r0], #4
    	mov r3, 1				@ r3 = 1; --> índice Máximo inicial
 800029a:	f04f 0301 	mov.w	r3, #1
    	mov r4, 1				@ r4 = 1;
 800029e:	f04f 0401 	mov.w	r4, #1
		subs r1, 1				@ r1-= 1; longitud--;
 80002a2:	3901      	subs	r1, #1
        beq .endMax				@ salto condicional Equal (Z=1) --> if(longitud==0) goto endMax
 80002a4:	d009      	beq.n	80002ba <.endMax>

080002a6 <.loopMax>:

		.loopMax:
			add r4, 1			@ r4+=1; --> r4 = 2;
 80002a6:	f104 0401 	add.w	r4, r4, #1
			ldr r5, [r0], 4		@ r5 = *r0
 80002aa:	f850 5b04 	ldr.w	r5, [r0], #4
			cmp r2, r5			@ comparo elemento actual con anterior
 80002ae:	42aa      	cmp	r2, r5
			bgt .saltoMax		@ salto condicional Greater Than signed (Z=0, N=V) --> si encontré un nuevo máximo, goto salto
 80002b0:	dc01      	bgt.n	80002b6 <.saltoMax>
			mov r2, r5			@ actualizo elemento actual
 80002b2:	462a      	mov	r2, r5
			mov r3, r4			@ actualizo índice Máximo
 80002b4:	4623      	mov	r3, r4

080002b6 <.saltoMax>:

		.saltoMax:
	    	subs r1, 1			@ r1-= 1; longitud--;
 80002b6:	3901      	subs	r1, #1
	        bne	.loopMax		@ salto condicional Not Equal (Z=0) --> if(longitud!=1) goto loopMax
 80002b8:	d1f5      	bne.n	80002a6 <.loopMax>

080002ba <.endMax>:

	    .endMax:
	        sub r3, 1
 80002ba:	f1a3 0301 	sub.w	r3, r3, #1
	        mov r0, r3			@ guardo en valor de retorno el índice máximo
 80002be:	4618      	mov	r0, r3

	    pop {r5}
 80002c0:	bc20      	pop	{r5}
	    pop {r4}
 80002c2:	bc10      	pop	{r4}
		bx lr
 80002c4:	4770      	bx	lr

080002c6 <asm_invertir>:

    asm_invertir:
   		// N = número de bytes ocupados
    	// ejemplo longitud = 10 --> N = 2*10 = 20
		// 0 a longitud-1 -> 0 a 18 bytes
        push {r4}
 80002c6:	b410      	push	{r4}

        subs r1, 1			@longitud--; 	--> longitud = 9
 80002c8:	3901      	subs	r1, #1
        beq .end_invertir	@salto condicional Equal (Z=1) --> if(longitud==1) goto end_invertir
 80002ca:	d010      	beq.n	80002ee <.end_invertir>

    	mov r3, 2			@r3 = 2
 80002cc:	f04f 0302 	mov.w	r3, #2
    	mul r4, r1, r3		@r4 = (longitud-1)*2 = 18
 80002d0:	fb01 f403 	mul.w	r4, r1, r3
    	add r4, r0			@r4  = r4 + *vector[0] = 18 + *vector[0] = *vector[longitud-1]
 80002d4:	4404      	add	r4, r0

    	add r1, 1			@longitud++;   --> longitud = 10;
 80002d6:	f101 0101 	add.w	r1, r1, #1
    	udiv r1, r1, r3		@r1 = r1/r3    --> longitud = 5;
 80002da:	fbb1 f1f3 	udiv	r1, r1, r3

080002de <.loop_invertir>:
    	//r0 <-- puntero a primer elemento
    	//r4 <-- puntero a último elemento

	.loop_invertir:

    	ldrh r2, [r0]		@r2 = *vector[0]				//guarda en r2 el primer elemento
 80002de:	8802      	ldrh	r2, [r0, #0]
    	ldrh r3, [r4]		@r3 = *vector[longitud-1]		//guarda en r3 el último elemento
 80002e0:	8823      	ldrh	r3, [r4, #0]
		strh r3, [r0],  2	@r0 = N + *vector [0]; r0+=2;   //guarda en memoria r0 el último elemento, y r0++; (sobreescribe último en primero)
 80002e2:	f820 3b02 	strh.w	r3, [r0], #2
		strh r2, [r4], -2   @r4 = vector[0]; r0-=2;			//guarda en memoria r0 el primer elemento, y r4--;
 80002e6:	f824 2902 	strh.w	r2, [r4], #-2

    	subs r1, 1			@longitud--; 	--> longitud = 4
 80002ea:	3901      	subs	r1, #1
        bne	.loop_invertir	@salto condicional Not Equal (Z=0) --> if(longitud!=1) goto loop_invertir
 80002ec:	d1f7      	bne.n	80002de <.loop_invertir>

080002ee <.end_invertir>:

	.end_invertir:

        pop {r4}
 80002ee:	bc10      	pop	{r4}
        bx lr
 80002f0:	4770      	bx	lr

080002f2 <asm_filtroVentana10>:
@
.thumb_func

	asm_filtroVentana10:

    push {r4}
 80002f2:	b410      	push	{r4}
    push {r5}
 80002f4:	b420      	push	{r5}
    push {r6}			//indiceVentana
 80002f6:	b440      	push	{r6}
    push {r7}
 80002f8:	b480      	push	{r7}
    push {r8}
 80002fa:	f84d 8d04 	str.w	r8, [sp, #-4]!
	mov r3, 0			// indice
 80002fe:	f04f 0300 	mov.w	r3, #0

08000302 <.ventana_while>:

		.ventana_while:

			mov r4, 0			@ promedio lo vuelve a 0 en cada vuelta
 8000302:	f04f 0400 	mov.w	r4, #0
			mov r5, 0			@ i=0
 8000306:	f04f 0500 	mov.w	r5, #0

0800030a <.ventana_for>:

		.ventana_for:

			add r6, r3, r5		@ r6 = indice+i
 800030a:	eb03 0605 	add.w	r6, r3, r5
			cmp r6, r2			@ if(r6<longitud)
 800030e:	4296      	cmp	r6, r2
			blt .ventana_salto	@ salgo condicional, Less Than
 8000310:	db05      	blt.n	800031e <.ventana_salto>
								@ sino, ventana salió del arreglo
			udiv r7, r6, r2		@ r7 = (indice+i) / longitudVectorIn
 8000312:	fbb6 f7f2 	udiv	r7, r6, r2
			mul r7, r7, r2		@ r7 = r7*longitudVectorin
 8000316:	fb07 f702 	mul.w	r7, r7, r2
			sub r6, r6, r7		@ r6 = (indice+i) % longitudVectorIn
 800031a:	eba6 0607 	sub.w	r6, r6, r7

0800031e <.ventana_salto>:

		.ventana_salto:

			mov r8, 2
 800031e:	f04f 0802 	mov.w	r8, #2
			mul r6, r6, r8		@ (indice+i) = (indice+i)*2
 8000322:	fb06 f608 	mul.w	r6, r6, r8
			add r6, r0, r6		@ (indice+1)*2+vectorIn
 8000326:	4406      	add	r6, r0
			ldrh r8, [r6]		@ r8 <-- guarda valor apuntado a vectorIn
 8000328:	f8b6 8000 	ldrh.w	r8, [r6]
			add r4, r4, r8		@ suma valor apuntado y acumula
 800032c:	4444      	add	r4, r8
			add r5, 1			@ i++ (for)
 800032e:	f105 0501 	add.w	r5, r5, #1
			cmp r5, 10			@ i<10 (for)
 8000332:	2d0a      	cmp	r5, #10
			blt .ventana_for    @ vuelve a iniciar (for)
 8000334:	dbe9      	blt.n	800030a <.ventana_for>

			mov r8, 10			@r8 = longitudVentana = 10
 8000336:	f04f 080a 	mov.w	r8, #10
			udiv r8, r4, r8		@r8 = sumaAcumulada/10 = promedio
 800033a:	fbb4 f8f8 	udiv	r8, r4, r8
			strh r8, [r1], 2    @guarda en memoria r1 (vectorOut) el promedio e incrementa puntero
 800033e:	f821 8b02 	strh.w	r8, [r1], #2
			add r3, 1			@índice++
 8000342:	f103 0301 	add.w	r3, r3, #1
			cmp r3, r2			@if(indice<longitudVectorin)
 8000346:	4293      	cmp	r3, r2
			blt .ventana_while	@salto condicional Less Than
 8000348:	dbdb      	blt.n	8000302 <.ventana_while>

	pop {r8}
 800034a:	f85d 8b04 	ldr.w	r8, [sp], #4
    pop {r7}
 800034e:	bc80      	pop	{r7}
	pop {r6}
 8000350:	bc40      	pop	{r6}
    pop {r5}
 8000352:	bc20      	pop	{r5}
    pop {r4}
 8000354:	bc10      	pop	{r4}

	bx lr
 8000356:	4770      	bx	lr

08000358 <asm_downsampleM>:
@
.thumb_func

	asm_downsampleM:

	push {r4}				@ indiceN
 8000358:	b410      	push	{r4}
	push {r5}				@ indiceOut
 800035a:	b420      	push	{r5}

	mov r4, 1
 800035c:	f04f 0401 	mov.w	r4, #1

08000360 <.downSample_for>:

	.downSample_for:

		ldr r5, [r0], 4		@ r5 = *vectorIn; *vectorIn++;
 8000360:	f850 5b04 	ldr.w	r5, [r0], #4
		cmp r4, r3			@ if ( indiceN==N )
 8000364:	429c      	cmp	r4, r3
		beq .downSample_1	@ salto condicional Equal
 8000366:	d002      	beq.n	800036e <.downSample_1>
		str r5, [r1], 4		@ vectorOut = *vectorIn; *vectorOut++
 8000368:	f841 5b04 	str.w	r5, [r1], #4
		bal .downSample_2	@ salto condicional Any Value
 800036c:	e001      	b.n	8000372 <.downSample_2>

0800036e <.downSample_1>:

	.downSample_1:

		mov r4, 0			@ índiceN = 1
 800036e:	f04f 0400 	mov.w	r4, #0

08000372 <.downSample_2>:

	.downSample_2:

		add  r4, 1			@ índiceN++
 8000372:	f104 0401 	add.w	r4, r4, #1
		subs r2, 1			@ longitud --
 8000376:	3a01      	subs	r2, #1
		bne .downSample_for @ salto condicional Not Equal (for)
 8000378:	d1f2      	bne.n	8000360 <.downSample_for>

	pop {r6}
 800037a:	bc40      	pop	{r6}
	pop {r5}
 800037c:	bc20      	pop	{r5}
	pop {r4}
 800037e:	bc10      	pop	{r4}
	bx lr
 8000380:	4770      	bx	lr

08000382 <asm_pack32to16>:
@
.thumb_func

asm_pack32to16:

add r0, 2
 8000382:	f100 0002 	add.w	r0, r0, #2

08000386 <.pack32to16_while>:

.pack32to16_while:

	ldrh r3, [r0], 4		@r3 = *vectorIn (parte alta h), *vectorIn++; (4 bytes)
 8000386:	f830 3b04 	ldrh.w	r3, [r0], #4
	strh r3, [r1], 2		@vectorOut = *vectorIn; vectorOut++; (2 bytes)
 800038a:	f821 3b02 	strh.w	r3, [r1], #2
	subs r2, 1          	@ --longitud
 800038e:	3a01      	subs	r2, #1
    bne	.pack32to16_while   @salto condicional Not Equal
 8000390:	d1f9      	bne.n	8000386 <.pack32to16_while>
	bx lr
 8000392:	4770      	bx	lr

08000394 <asm_fusion>:

.thumb_func

asm_fusion:
//Ejemplo cantidad = 10
push {r4-r5, lr}
 8000394:	b530      	push	{r4, r5, lr}
asr cant,1 			//shift un bit a la derecha --> cantidad = 5 (mitad de veces con instrucciones SIMD)
 8000396:	ea4f 0363 	mov.w	r3, r3, asr #1
sub cant,1			//longitud--; --> cantidad = 4 (loop 4 a 0)
 800039a:	f1a3 0301 	sub.w	r3, r3, #1

0800039e <fusion_while>:

	fusion_while:
		ldr r4, [s1, cant, LSL 2]   	@ cant = 4 --> r4 = *(s1+16)  <-- avanza de a 32 bits (guarda de 2 valores de 16 bits)
 800039e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
										@ cant = 3 --> r4 = *(s1+12)
										@ cant = 2 --> r4 = *(s1+8)
										@ cant = 1 --> r4 = *(s1+4)
										@ cant = 0 --> r4 = *(s1+0)

		ldr r5, [s2, cant, LSL 2]   	@ cant = 4 --> r5 = *(s2+16)  <-- avanza de a 32 bits (guarda de a 2 valores de 16 bits)
 80003a2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
										@ cant = 3 --> r5 = *(s2+12)
										@ cant = 2 --> r5 = *(s2+8)
										@ cant = 1 --> r5 = *(s2+4)
										@ cant = 0 --> r5 = *(s2+0)

		shadd16 r5, r5, r4				@ instrucción SIMD semi-suma  <-- suma r4a con r5a y r4b con r5b
 80003a6:	fa95 f524 	shadd16	r5, r5, r4

		str r5, [salida, cant, LSL 2]	@ cant = 4 --> *(salida+16) = r5  <-- avanza de a 32 bits (carga de a 2 valores de 16 bits)
 80003aa:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
										@ cant = 3 --> *(salida+12) = r5
										@ cant = 2 --> *(salida+8)  = r5
										@ cant = 1 --> *(salida+4)  = r5
										@ cant = 0 --> *(salida+0)  = r5

		subs cant, 1					@longitud--;
 80003ae:	3b01      	subs	r3, #1
		bpl fusion_while				@salto condicional Positive or Zero
 80003b0:	d5f5      	bpl.n	800039e <fusion_while>

pop {r4-r5, pc}
 80003b2:	bd30      	pop	{r4, r5, pc}

080003b4 <asm_corr>:

.thumb_func

asm_corr:
//Ejemplo cantidadElementos = 10
push {r4-r11, lr}
 80003b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

mov indiceVector, 		cantidadElementos
 80003b8:	4698      	mov	r8, r3
mov indiceElementos,	cantidadElementos
 80003ba:	469a      	mov	sl, r3
mov longSIMD,		    cantidadElementos
 80003bc:	469b      	mov	fp, r3
asr longSIMD,1 			@shift un bit a la derecha --> longitud = 5 (mitad de veces con instrucciones SIMD)
 80003be:	ea4f 0b6b 	mov.w	fp, fp, asr #1
sub longSIMD,1			@longitud--;  --> longitud  = 4 (loop 4 a 0)
 80003c2:	f1ab 0b01 	sub.w	fp, fp, #1

080003c6 <corr_elementos>:

	corr_elementos:

		//Resetea valores
		mov valor_vectorX,  0
 80003c6:	f04f 0400 	mov.w	r4, #0
 		mov valor_vectorY,  0
 80003ca:	f04f 0500 	mov.w	r5, #0
 		mov mul_iteracion,  0
 80003ce:	f04f 0600 	mov.w	r6, #0
 		mov suma_acumulada, 0
 80003d2:	f04f 0700 	mov.w	r7, #0

		mov indiceVector, cantidadElementos
 80003d6:	4698      	mov	r8, r3

		subs indiceElementos, 1					@ índiceVector--; (loop 9 a 0)
 80003d8:	f1ba 0a01 	subs.w	sl, sl, #1
		bpl corr_vector							@ salto condicional positivo o cero
 80003dc:	d500      	bpl.n	80003e0 <corr_vector>
		bal	corr_end						    @ salto condicional cualquier valor
 80003de:	e013      	b.n	8000408 <corr_end>

080003e0 <corr_vector>:

	corr_vector:

		subs indiceVector, 1					@ cantidad de elementos = 9 (0 a 9 = 10)
 80003e0:	f1b8 0801 	subs.w	r8, r8, #1
		bpl corr_vectorOK						@ salto condicional positivo o cero
 80003e4:	d500      	bpl.n	80003e8 <corr_vectorOK>
		bal corr_salto
 80003e6:	e00c      	b.n	8000402 <corr_salto>

080003e8 <corr_vectorOK>:

	corr_vectorOK:

		cmp  indiceVector, indiceElementos
 80003e8:	45d0      	cmp	r8, sl
		bmi  corr_vector						@si es negativo
 80003ea:	d4f9      	bmi.n	80003e0 <corr_vector>

		ldrh valor_vectorX, [vectorX, indiceVector, LSL 1]
 80003ec:	f830 4018 	ldrh.w	r4, [r0, r8, lsl #1]

		mov indiceVectorY, indiceVector
 80003f0:	46c1      	mov	r9, r8
		sub indiceVectorY, indiceElementos
 80003f2:	eba9 090a 	sub.w	r9, r9, sl

		ldrh valor_vectorY, [vectorY, indiceVectorY, LSL 1]
 80003f6:	f831 5019 	ldrh.w	r5, [r1, r9, lsl #1]

		mul  mul_iteracion, valor_vectorX, valor_vectorY			@ smuad: instrucción SIMD Signed Dual Multiply Add
 80003fa:	fb04 f605 	mul.w	r6, r4, r5

		add suma_acumulada, mul_iteracion							@ suma acumulada
 80003fe:	4437      	add	r7, r6

		bal corr_vector
 8000400:	e7ee      	b.n	80003e0 <corr_vector>

08000402 <corr_salto>:

    corr_salto:

		strh   suma_acumulada, [vectorCorr, indiceElementos, LSL 1]	@*vectorCorr = suma acumulada
 8000402:	f822 701a 	strh.w	r7, [r2, sl, lsl #1]

		bal corr_elementos									   @salto condicional Any Value
 8000406:	e7de      	b.n	80003c6 <corr_elementos>

08000408 <corr_end>:

	corr_end:

pop {r4-r11, pc}
 8000408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800040c <asm_corrSIMD>:

.thumb_func

asm_corrSIMD:
//Ejemplo longitud = 10
push {r4-r11, lr}
 800040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

mov r8, longitud	@índice L = 10
 8000410:	4698      	mov	r8, r3
asr longitud,1 		@shift un bit a la derecha --> longitud = 5 (mitad de veces con instrucciones SIMD)
 8000412:	ea4f 0363 	mov.w	r3, r3, asr #1
sub longitud,1		@longitud--;  --> longitud  = 4 (loop 4 a 0)
 8000416:	f1a3 0301 	sub.w	r3, r3, #1
mov r9, longitud	@longitudFija para cada iteración (4)
 800041a:	4699      	mov	r9, r3

0800041c <corrSIMD_elementos>:


	corrSIMD_elementos:

		mov longitud, r9						@vuelve a longitudFija
 800041c:	464b      	mov	r3, r9
		mov r7, 0								@suma acumulada reseteada
 800041e:	f04f 0700 	mov.w	r7, #0
		mov r6, 0								@suma reseteada
 8000422:	f04f 0600 	mov.w	r6, #0
		mov r5, 0
 8000426:	f04f 0500 	mov.w	r5, #0
		mov r4, 0
 800042a:	f04f 0400 	mov.w	r4, #0
		mov r10, 0
 800042e:	f04f 0a00 	mov.w	sl, #0
		subs r8,1								@índiceL--; (loop 9 a 0)
 8000432:	f1b8 0801 	subs.w	r8, r8, #1
		bpl corrSIMD_while						@salto condicional positivo o cero
 8000436:	d500      	bpl.n	800043a <corrSIMD_while>
		bal	corrSIMD_end						@salto condicional cualquier valor
 8000438:	e015      	b.n	8000466 <corrSIMD_end>

0800043a <corrSIMD_while>:

	corrSIMD_while:

		mov r11, 4
 800043a:	f04f 0b04 	mov.w	fp, #4
		mul r10, longitud, r11
 800043e:	fb03 fa0b 	mul.w	sl, r3, fp
		cmp r10, r8
 8000442:	45c2      	cmp	sl, r8
		bmi corrSIMD_salto						@negativo
 8000444:	d40a      	bmi.n	800045c <corrSIMD_salto>
		sub r10, r8
 8000446:	ebaa 0a08 	sub.w	sl, sl, r8
		sub r10, r8
 800044a:	ebaa 0a08 	sub.w	sl, sl, r8

		ldr r4, [vectorX, longitud, LSL 2]   	@ longitud = 4 --> r4 = *(vectorX+16)  <-- avanza de a 32 bits (guarda de 2 valores de 16 bits)
 800044e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
												@ longitud = 2 --> r4 = *(vectorX+8)
												@ longitud = 1 --> r4 = *(vectorX+4)
												@ longitud = 0 --> r4 = *(vectorX+0)


		ldr r5, [vectorY, r10]  				@ longitud = 4 --> r5 = *(vectorY+16)  <-- avanza de a 32 bits (guarda de a 2 valores de 16 bits)
 8000452:	f851 500a 	ldr.w	r5, [r1, sl]
												@ longitud = 3 --> r5 = *(vectorY+12)
												@ longitud = 2 --> r5 = *(vectorY+8)
												@ longitud = 1 --> r5 = *(vectorY+4)
												@ longitud = 0 --> r5 = *(vectorY+0)

		smuad  r6, r5, r4						@ smuad: instrucción SIMD Signed Dual Multiply Add
 8000456:	fb25 f604 	smuad	r6, r5, r4

		add    r7, r6							@ suma acumulada
 800045a:	4437      	add	r7, r6

0800045c <corrSIMD_salto>:

	corrSIMD_salto:

		subs longitud, 1						@longitud--;
 800045c:	3b01      	subs	r3, #1
		bpl corrSIMD_while						@salto condicional Positive or Zero
 800045e:	d5ec      	bpl.n	800043a <corrSIMD_while>

		strh r7, [vectorCorr, r8, LSL 1]		@*vectorCorr = suma acumulada
 8000460:	f822 7018 	strh.w	r7, [r2, r8, lsl #1]
		bal corrSIMD_elementos					@salto condicional Any Value
 8000464:	e7da      	b.n	800041c <corrSIMD_elementos>

08000466 <corrSIMD_end>:

	corrSIMD_end:

pop {r4-r11, pc}
 8000466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800046a:	0000      	movs	r0, r0
 800046c:	0000      	movs	r0, r0
	...

08000470 <memchr>:
 8000470:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000474:	2a10      	cmp	r2, #16
 8000476:	db2b      	blt.n	80004d0 <memchr+0x60>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	d008      	beq.n	8000490 <memchr+0x20>
 800047e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000482:	3a01      	subs	r2, #1
 8000484:	428b      	cmp	r3, r1
 8000486:	d02d      	beq.n	80004e4 <memchr+0x74>
 8000488:	f010 0f07 	tst.w	r0, #7
 800048c:	b342      	cbz	r2, 80004e0 <memchr+0x70>
 800048e:	d1f6      	bne.n	800047e <memchr+0xe>
 8000490:	b4f0      	push	{r4, r5, r6, r7}
 8000492:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000496:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800049a:	f022 0407 	bic.w	r4, r2, #7
 800049e:	f07f 0700 	mvns.w	r7, #0
 80004a2:	2300      	movs	r3, #0
 80004a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004a8:	3c08      	subs	r4, #8
 80004aa:	ea85 0501 	eor.w	r5, r5, r1
 80004ae:	ea86 0601 	eor.w	r6, r6, r1
 80004b2:	fa85 f547 	uadd8	r5, r5, r7
 80004b6:	faa3 f587 	sel	r5, r3, r7
 80004ba:	fa86 f647 	uadd8	r6, r6, r7
 80004be:	faa5 f687 	sel	r6, r5, r7
 80004c2:	b98e      	cbnz	r6, 80004e8 <memchr+0x78>
 80004c4:	d1ee      	bne.n	80004a4 <memchr+0x34>
 80004c6:	bcf0      	pop	{r4, r5, r6, r7}
 80004c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004cc:	f002 0207 	and.w	r2, r2, #7
 80004d0:	b132      	cbz	r2, 80004e0 <memchr+0x70>
 80004d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004d6:	3a01      	subs	r2, #1
 80004d8:	ea83 0301 	eor.w	r3, r3, r1
 80004dc:	b113      	cbz	r3, 80004e4 <memchr+0x74>
 80004de:	d1f8      	bne.n	80004d2 <memchr+0x62>
 80004e0:	2000      	movs	r0, #0
 80004e2:	4770      	bx	lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4770      	bx	lr
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	bf06      	itte	eq
 80004ec:	4635      	moveq	r5, r6
 80004ee:	3803      	subeq	r0, #3
 80004f0:	3807      	subne	r0, #7
 80004f2:	f015 0f01 	tst.w	r5, #1
 80004f6:	d107      	bne.n	8000508 <memchr+0x98>
 80004f8:	3001      	adds	r0, #1
 80004fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004fe:	bf02      	ittt	eq
 8000500:	3001      	addeq	r0, #1
 8000502:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000506:	3001      	addeq	r0, #1
 8000508:	bcf0      	pop	{r4, r5, r6, r7}
 800050a:	3801      	subs	r0, #1
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <__aeabi_uldivmod>:
 8000510:	b953      	cbnz	r3, 8000528 <__aeabi_uldivmod+0x18>
 8000512:	b94a      	cbnz	r2, 8000528 <__aeabi_uldivmod+0x18>
 8000514:	2900      	cmp	r1, #0
 8000516:	bf08      	it	eq
 8000518:	2800      	cmpeq	r0, #0
 800051a:	bf1c      	itt	ne
 800051c:	f04f 31ff 	movne.w	r1, #4294967295
 8000520:	f04f 30ff 	movne.w	r0, #4294967295
 8000524:	f000 b974 	b.w	8000810 <__aeabi_idiv0>
 8000528:	f1ad 0c08 	sub.w	ip, sp, #8
 800052c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000530:	f000 f806 	bl	8000540 <__udivmoddi4>
 8000534:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800053c:	b004      	add	sp, #16
 800053e:	4770      	bx	lr

08000540 <__udivmoddi4>:
 8000540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000544:	9d08      	ldr	r5, [sp, #32]
 8000546:	4604      	mov	r4, r0
 8000548:	468e      	mov	lr, r1
 800054a:	2b00      	cmp	r3, #0
 800054c:	d14d      	bne.n	80005ea <__udivmoddi4+0xaa>
 800054e:	428a      	cmp	r2, r1
 8000550:	4694      	mov	ip, r2
 8000552:	d969      	bls.n	8000628 <__udivmoddi4+0xe8>
 8000554:	fab2 f282 	clz	r2, r2
 8000558:	b152      	cbz	r2, 8000570 <__udivmoddi4+0x30>
 800055a:	fa01 f302 	lsl.w	r3, r1, r2
 800055e:	f1c2 0120 	rsb	r1, r2, #32
 8000562:	fa20 f101 	lsr.w	r1, r0, r1
 8000566:	fa0c fc02 	lsl.w	ip, ip, r2
 800056a:	ea41 0e03 	orr.w	lr, r1, r3
 800056e:	4094      	lsls	r4, r2
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	0c21      	lsrs	r1, r4, #16
 8000576:	fbbe f6f8 	udiv	r6, lr, r8
 800057a:	fa1f f78c 	uxth.w	r7, ip
 800057e:	fb08 e316 	mls	r3, r8, r6, lr
 8000582:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000586:	fb06 f107 	mul.w	r1, r6, r7
 800058a:	4299      	cmp	r1, r3
 800058c:	d90a      	bls.n	80005a4 <__udivmoddi4+0x64>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f106 30ff 	add.w	r0, r6, #4294967295
 8000596:	f080 811f 	bcs.w	80007d8 <__udivmoddi4+0x298>
 800059a:	4299      	cmp	r1, r3
 800059c:	f240 811c 	bls.w	80007d8 <__udivmoddi4+0x298>
 80005a0:	3e02      	subs	r6, #2
 80005a2:	4463      	add	r3, ip
 80005a4:	1a5b      	subs	r3, r3, r1
 80005a6:	b2a4      	uxth	r4, r4
 80005a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005ac:	fb08 3310 	mls	r3, r8, r0, r3
 80005b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005b4:	fb00 f707 	mul.w	r7, r0, r7
 80005b8:	42a7      	cmp	r7, r4
 80005ba:	d90a      	bls.n	80005d2 <__udivmoddi4+0x92>
 80005bc:	eb1c 0404 	adds.w	r4, ip, r4
 80005c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c4:	f080 810a 	bcs.w	80007dc <__udivmoddi4+0x29c>
 80005c8:	42a7      	cmp	r7, r4
 80005ca:	f240 8107 	bls.w	80007dc <__udivmoddi4+0x29c>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d6:	1be4      	subs	r4, r4, r7
 80005d8:	2600      	movs	r6, #0
 80005da:	b11d      	cbz	r5, 80005e4 <__udivmoddi4+0xa4>
 80005dc:	40d4      	lsrs	r4, r2
 80005de:	2300      	movs	r3, #0
 80005e0:	e9c5 4300 	strd	r4, r3, [r5]
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	428b      	cmp	r3, r1
 80005ec:	d909      	bls.n	8000602 <__udivmoddi4+0xc2>
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	f000 80ef 	beq.w	80007d2 <__udivmoddi4+0x292>
 80005f4:	2600      	movs	r6, #0
 80005f6:	e9c5 0100 	strd	r0, r1, [r5]
 80005fa:	4630      	mov	r0, r6
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	fab3 f683 	clz	r6, r3
 8000606:	2e00      	cmp	r6, #0
 8000608:	d14a      	bne.n	80006a0 <__udivmoddi4+0x160>
 800060a:	428b      	cmp	r3, r1
 800060c:	d302      	bcc.n	8000614 <__udivmoddi4+0xd4>
 800060e:	4282      	cmp	r2, r0
 8000610:	f200 80f9 	bhi.w	8000806 <__udivmoddi4+0x2c6>
 8000614:	1a84      	subs	r4, r0, r2
 8000616:	eb61 0303 	sbc.w	r3, r1, r3
 800061a:	2001      	movs	r0, #1
 800061c:	469e      	mov	lr, r3
 800061e:	2d00      	cmp	r5, #0
 8000620:	d0e0      	beq.n	80005e4 <__udivmoddi4+0xa4>
 8000622:	e9c5 4e00 	strd	r4, lr, [r5]
 8000626:	e7dd      	b.n	80005e4 <__udivmoddi4+0xa4>
 8000628:	b902      	cbnz	r2, 800062c <__udivmoddi4+0xec>
 800062a:	deff      	udf	#255	; 0xff
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	2a00      	cmp	r2, #0
 8000632:	f040 8092 	bne.w	800075a <__udivmoddi4+0x21a>
 8000636:	eba1 010c 	sub.w	r1, r1, ip
 800063a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800063e:	fa1f fe8c 	uxth.w	lr, ip
 8000642:	2601      	movs	r6, #1
 8000644:	0c20      	lsrs	r0, r4, #16
 8000646:	fbb1 f3f7 	udiv	r3, r1, r7
 800064a:	fb07 1113 	mls	r1, r7, r3, r1
 800064e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000652:	fb0e f003 	mul.w	r0, lr, r3
 8000656:	4288      	cmp	r0, r1
 8000658:	d908      	bls.n	800066c <__udivmoddi4+0x12c>
 800065a:	eb1c 0101 	adds.w	r1, ip, r1
 800065e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000662:	d202      	bcs.n	800066a <__udivmoddi4+0x12a>
 8000664:	4288      	cmp	r0, r1
 8000666:	f200 80cb 	bhi.w	8000800 <__udivmoddi4+0x2c0>
 800066a:	4643      	mov	r3, r8
 800066c:	1a09      	subs	r1, r1, r0
 800066e:	b2a4      	uxth	r4, r4
 8000670:	fbb1 f0f7 	udiv	r0, r1, r7
 8000674:	fb07 1110 	mls	r1, r7, r0, r1
 8000678:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800067c:	fb0e fe00 	mul.w	lr, lr, r0
 8000680:	45a6      	cmp	lr, r4
 8000682:	d908      	bls.n	8000696 <__udivmoddi4+0x156>
 8000684:	eb1c 0404 	adds.w	r4, ip, r4
 8000688:	f100 31ff 	add.w	r1, r0, #4294967295
 800068c:	d202      	bcs.n	8000694 <__udivmoddi4+0x154>
 800068e:	45a6      	cmp	lr, r4
 8000690:	f200 80bb 	bhi.w	800080a <__udivmoddi4+0x2ca>
 8000694:	4608      	mov	r0, r1
 8000696:	eba4 040e 	sub.w	r4, r4, lr
 800069a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800069e:	e79c      	b.n	80005da <__udivmoddi4+0x9a>
 80006a0:	f1c6 0720 	rsb	r7, r6, #32
 80006a4:	40b3      	lsls	r3, r6
 80006a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ae:	fa20 f407 	lsr.w	r4, r0, r7
 80006b2:	fa01 f306 	lsl.w	r3, r1, r6
 80006b6:	431c      	orrs	r4, r3
 80006b8:	40f9      	lsrs	r1, r7
 80006ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006be:	fa00 f306 	lsl.w	r3, r0, r6
 80006c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80006c6:	0c20      	lsrs	r0, r4, #16
 80006c8:	fa1f fe8c 	uxth.w	lr, ip
 80006cc:	fb09 1118 	mls	r1, r9, r8, r1
 80006d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006d4:	fb08 f00e 	mul.w	r0, r8, lr
 80006d8:	4288      	cmp	r0, r1
 80006da:	fa02 f206 	lsl.w	r2, r2, r6
 80006de:	d90b      	bls.n	80006f8 <__udivmoddi4+0x1b8>
 80006e0:	eb1c 0101 	adds.w	r1, ip, r1
 80006e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006e8:	f080 8088 	bcs.w	80007fc <__udivmoddi4+0x2bc>
 80006ec:	4288      	cmp	r0, r1
 80006ee:	f240 8085 	bls.w	80007fc <__udivmoddi4+0x2bc>
 80006f2:	f1a8 0802 	sub.w	r8, r8, #2
 80006f6:	4461      	add	r1, ip
 80006f8:	1a09      	subs	r1, r1, r0
 80006fa:	b2a4      	uxth	r4, r4
 80006fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000700:	fb09 1110 	mls	r1, r9, r0, r1
 8000704:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000708:	fb00 fe0e 	mul.w	lr, r0, lr
 800070c:	458e      	cmp	lr, r1
 800070e:	d908      	bls.n	8000722 <__udivmoddi4+0x1e2>
 8000710:	eb1c 0101 	adds.w	r1, ip, r1
 8000714:	f100 34ff 	add.w	r4, r0, #4294967295
 8000718:	d26c      	bcs.n	80007f4 <__udivmoddi4+0x2b4>
 800071a:	458e      	cmp	lr, r1
 800071c:	d96a      	bls.n	80007f4 <__udivmoddi4+0x2b4>
 800071e:	3802      	subs	r0, #2
 8000720:	4461      	add	r1, ip
 8000722:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000726:	fba0 9402 	umull	r9, r4, r0, r2
 800072a:	eba1 010e 	sub.w	r1, r1, lr
 800072e:	42a1      	cmp	r1, r4
 8000730:	46c8      	mov	r8, r9
 8000732:	46a6      	mov	lr, r4
 8000734:	d356      	bcc.n	80007e4 <__udivmoddi4+0x2a4>
 8000736:	d053      	beq.n	80007e0 <__udivmoddi4+0x2a0>
 8000738:	b15d      	cbz	r5, 8000752 <__udivmoddi4+0x212>
 800073a:	ebb3 0208 	subs.w	r2, r3, r8
 800073e:	eb61 010e 	sbc.w	r1, r1, lr
 8000742:	fa01 f707 	lsl.w	r7, r1, r7
 8000746:	fa22 f306 	lsr.w	r3, r2, r6
 800074a:	40f1      	lsrs	r1, r6
 800074c:	431f      	orrs	r7, r3
 800074e:	e9c5 7100 	strd	r7, r1, [r5]
 8000752:	2600      	movs	r6, #0
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	f1c2 0320 	rsb	r3, r2, #32
 800075e:	40d8      	lsrs	r0, r3
 8000760:	fa0c fc02 	lsl.w	ip, ip, r2
 8000764:	fa21 f303 	lsr.w	r3, r1, r3
 8000768:	4091      	lsls	r1, r2
 800076a:	4301      	orrs	r1, r0
 800076c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000770:	fa1f fe8c 	uxth.w	lr, ip
 8000774:	fbb3 f0f7 	udiv	r0, r3, r7
 8000778:	fb07 3610 	mls	r6, r7, r0, r3
 800077c:	0c0b      	lsrs	r3, r1, #16
 800077e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000782:	fb00 f60e 	mul.w	r6, r0, lr
 8000786:	429e      	cmp	r6, r3
 8000788:	fa04 f402 	lsl.w	r4, r4, r2
 800078c:	d908      	bls.n	80007a0 <__udivmoddi4+0x260>
 800078e:	eb1c 0303 	adds.w	r3, ip, r3
 8000792:	f100 38ff 	add.w	r8, r0, #4294967295
 8000796:	d22f      	bcs.n	80007f8 <__udivmoddi4+0x2b8>
 8000798:	429e      	cmp	r6, r3
 800079a:	d92d      	bls.n	80007f8 <__udivmoddi4+0x2b8>
 800079c:	3802      	subs	r0, #2
 800079e:	4463      	add	r3, ip
 80007a0:	1b9b      	subs	r3, r3, r6
 80007a2:	b289      	uxth	r1, r1
 80007a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80007a8:	fb07 3316 	mls	r3, r7, r6, r3
 80007ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007b0:	fb06 f30e 	mul.w	r3, r6, lr
 80007b4:	428b      	cmp	r3, r1
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x28a>
 80007b8:	eb1c 0101 	adds.w	r1, ip, r1
 80007bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80007c0:	d216      	bcs.n	80007f0 <__udivmoddi4+0x2b0>
 80007c2:	428b      	cmp	r3, r1
 80007c4:	d914      	bls.n	80007f0 <__udivmoddi4+0x2b0>
 80007c6:	3e02      	subs	r6, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	1ac9      	subs	r1, r1, r3
 80007cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007d0:	e738      	b.n	8000644 <__udivmoddi4+0x104>
 80007d2:	462e      	mov	r6, r5
 80007d4:	4628      	mov	r0, r5
 80007d6:	e705      	b.n	80005e4 <__udivmoddi4+0xa4>
 80007d8:	4606      	mov	r6, r0
 80007da:	e6e3      	b.n	80005a4 <__udivmoddi4+0x64>
 80007dc:	4618      	mov	r0, r3
 80007de:	e6f8      	b.n	80005d2 <__udivmoddi4+0x92>
 80007e0:	454b      	cmp	r3, r9
 80007e2:	d2a9      	bcs.n	8000738 <__udivmoddi4+0x1f8>
 80007e4:	ebb9 0802 	subs.w	r8, r9, r2
 80007e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007ec:	3801      	subs	r0, #1
 80007ee:	e7a3      	b.n	8000738 <__udivmoddi4+0x1f8>
 80007f0:	4646      	mov	r6, r8
 80007f2:	e7ea      	b.n	80007ca <__udivmoddi4+0x28a>
 80007f4:	4620      	mov	r0, r4
 80007f6:	e794      	b.n	8000722 <__udivmoddi4+0x1e2>
 80007f8:	4640      	mov	r0, r8
 80007fa:	e7d1      	b.n	80007a0 <__udivmoddi4+0x260>
 80007fc:	46d0      	mov	r8, sl
 80007fe:	e77b      	b.n	80006f8 <__udivmoddi4+0x1b8>
 8000800:	3b02      	subs	r3, #2
 8000802:	4461      	add	r1, ip
 8000804:	e732      	b.n	800066c <__udivmoddi4+0x12c>
 8000806:	4630      	mov	r0, r6
 8000808:	e709      	b.n	800061e <__udivmoddi4+0xde>
 800080a:	4464      	add	r4, ip
 800080c:	3802      	subs	r0, #2
 800080e:	e742      	b.n	8000696 <__udivmoddi4+0x156>

08000810 <__aeabi_idiv0>:
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop

08000814 <llenaArreglo32>:
 *      Author: Win10
 */
#include "c_func.h"

void llenaArreglo32(uint32_t *vectorOut, uint32_t longitud)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
	while(longitud--)
 800081e:	e005      	b.n	800082c <llenaArreglo32+0x18>
	{
		vectorOut[longitud] = longitud;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	601a      	str	r2, [r3, #0]
	while(longitud--)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	1e5a      	subs	r2, r3, #1
 8000830:	603a      	str	r2, [r7, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f4      	bne.n	8000820 <llenaArreglo32+0xc>
	}
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <llenaArreglo16>:

void llenaArreglo16(uint16_t *vectorOut, uint32_t longitud)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
	while(longitud--)
 800084e:	e006      	b.n	800085e <llenaArreglo16+0x1a>
	{
		vectorOut[longitud] = longitud;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	b292      	uxth	r2, r2
 800085c:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	603a      	str	r2, [r7, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f3      	bne.n	8000850 <llenaArreglo16+0xc>
	}
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <llenaArregloS1>:

void llenaArregloS1(int16_t *vectorOut, uint32_t longitud)
{
 8000876:	b480      	push	{r7}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	int16_t i = 10;
 8000880:	230a      	movs	r3, #10
 8000882:	81fb      	strh	r3, [r7, #14]
	while(longitud--)
 8000884:	e009      	b.n	800089a <llenaArregloS1+0x24>
	{
		vectorOut[longitud] = i;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	89fa      	ldrh	r2, [r7, #14]
 8000890:	801a      	strh	r2, [r3, #0]
		i-=3;
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	3b03      	subs	r3, #3
 8000896:	b29b      	uxth	r3, r3
 8000898:	81fb      	strh	r3, [r7, #14]
	while(longitud--)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	603a      	str	r2, [r7, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f0      	bne.n	8000886 <llenaArregloS1+0x10>
	}
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <llenaArregloS2>:

void llenaArregloS2(int16_t *vectorOut, uint32_t longitud)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
	int16_t i = 13;
 80008bc:	230d      	movs	r3, #13
 80008be:	81fb      	strh	r3, [r7, #14]
	while(longitud--)
 80008c0:	e009      	b.n	80008d6 <llenaArregloS2+0x24>
	{
		vectorOut[longitud] = i;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	89fa      	ldrh	r2, [r7, #14]
 80008cc:	801a      	strh	r2, [r3, #0]
		i-=4;
 80008ce:	89fb      	ldrh	r3, [r7, #14]
 80008d0:	3b04      	subs	r3, #4
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	81fb      	strh	r3, [r7, #14]
	while(longitud--)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	603a      	str	r2, [r7, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1f0      	bne.n	80008c2 <llenaArregloS2+0x10>
	}
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <llenaArregloSignado1>:

void llenaArregloSignado1(int32_t *vectorOut, uint32_t longitud)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
	while(longitud--)
 80008f8:	e005      	b.n	8000906 <llenaArregloSignado1+0x18>
	{
		vectorOut[longitud] = longitud;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	603a      	str	r2, [r7, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f4      	bne.n	80008fa <llenaArregloSignado1+0xc>
	}
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <llenaArregloSignado2>:

void llenaArregloSignado2(int32_t *vectorOut, uint32_t longitud)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000928:	e006      	b.n	8000938 <llenaArregloSignado2+0x1a>
	{
		vectorOut[longitud] = -1;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	f04f 32ff 	mov.w	r2, #4294967295
 8000936:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	1e5a      	subs	r2, r3, #1
 800093c:	603a      	str	r2, [r7, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f3      	bne.n	800092a <llenaArregloSignado2+0xc>
	}
}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <llenaArregloSignado16>:

void llenaArregloSignado16(int16_t *vectorOut, uint32_t longitud)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	while(longitud--)
 800095a:	e006      	b.n	800096a <llenaArregloSignado16+0x1a>
	{
		vectorOut[longitud] = -1;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000968:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	1e5a      	subs	r2, r3, #1
 800096e:	603a      	str	r2, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f3      	bne.n	800095c <llenaArregloSignado16+0xc>
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <llenaVectorCorr16>:

void llenaVectorCorr16(int16_t *vectorOut, uint32_t longitud)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
	while(longitud--)
 800098c:	e006      	b.n	800099c <llenaVectorCorr16+0x1a>
	{
		vectorOut[longitud] = -1;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099a:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	1e5a      	subs	r2, r3, #1
 80009a0:	603a      	str	r2, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f3      	bne.n	800098e <llenaVectorCorr16+0xc>
	}
}
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <llenaArregloSignado32>:
	}
}


void llenaArregloSignado32(int32_t *vectorOut, uint32_t longitud)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	int32_t i=-10000;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <llenaArregloSignado32+0x40>)
 80009c0:	60fb      	str	r3, [r7, #12]
	while(longitud--)
 80009c2:	e00a      	b.n	80009da <llenaArregloSignado32+0x26>
	{
		vectorOut[longitud] = i;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	601a      	str	r2, [r3, #0]
		i=i+30000;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80009d6:	3330      	adds	r3, #48	; 0x30
 80009d8:	60fb      	str	r3, [r7, #12]
	while(longitud--)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	1e5a      	subs	r2, r3, #1
 80009de:	603a      	str	r2, [r7, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1ef      	bne.n	80009c4 <llenaArregloSignado32+0x10>
	}
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	ffffd8f0 	.word	0xffffd8f0

080009f8 <llenaArregloSignado>:

void llenaArregloSignado(int32_t *vectorOut, uint32_t longitud)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
	int32_t i=70;
 8000a02:	2346      	movs	r3, #70	; 0x46
 8000a04:	60fb      	str	r3, [r7, #12]
	while(longitud--)
 8000a06:	e008      	b.n	8000a1a <llenaArregloSignado+0x22>
	{
		vectorOut[longitud] = i;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	601a      	str	r2, [r3, #0]
		i-=10;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3b0a      	subs	r3, #10
 8000a18:	60fb      	str	r3, [r7, #12]
	while(longitud--)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	603a      	str	r2, [r7, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1f1      	bne.n	8000a08 <llenaArregloSignado+0x10>
	}
	vectorOut[5] = 200;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3314      	adds	r3, #20
 8000a28:	22c8      	movs	r2, #200	; 0xc8
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <zeros>:

//Recorro el arreglo de atrás hacia adelante
void zeros(uint32_t *vector, uint32_t longitud)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000a42:	e005      	b.n	8000a50 <zeros+0x18>
	{
		vector[longitud] = 0;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	603a      	str	r2, [r7, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f4      	bne.n	8000a44 <zeros+0xc>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	603b      	str	r3, [r7, #0]
	while(longitud--)
 8000a76:	e00c      	b.n	8000a92 <productoEscalar32+0x2a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	440b      	add	r3, r1
 8000a8a:	6839      	ldr	r1, [r7, #0]
 8000a8c:	fb01 f202 	mul.w	r2, r1, r2
 8000a90:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	1e5a      	subs	r2, r3, #1
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1ed      	bne.n	8000a78 <productoEscalar32+0x10>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 8000ab8:	e00d      	b.n	8000ad6 <productoEscalar16+0x2c>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	881a      	ldrh	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	440b      	add	r3, r1
 8000acc:	8879      	ldrh	r1, [r7, #2]
 8000ace:	fb11 f202 	smulbb	r2, r1, r2
 8000ad2:	b292      	uxth	r2, r2
 8000ad4:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	1e5a      	subs	r2, r3, #1
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1ec      	bne.n	8000aba <productoEscalar16+0x10>
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 8000afc:	e01c      	b.n	8000b38 <productoEscalar12+0x4a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	881a      	ldrh	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	440b      	add	r3, r1
 8000b10:	8879      	ldrh	r1, [r7, #2]
 8000b12:	fb11 f202 	smulbb	r2, r1, r2
 8000b16:	b292      	uxth	r2, r2
 8000b18:	801a      	strh	r2, [r3, #0]
		if(vectorOut[longitud] > (uint16_t) 0x0FFF)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b28:	d306      	bcc.n	8000b38 <productoEscalar12+0x4a>
		{
			vectorOut[longitud] = (uint16_t) 0x0FFF;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	4413      	add	r3, r2
 8000b32:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b36:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1dd      	bne.n	8000afe <productoEscalar12+0x10>
		}
	}
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <max>:

int32_t max (int32_t * vectorIn, uint32_t longitud)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
    int32_t valorMaximo  = vectorIn[longitud-1]; //Empiezo en el último valor
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b60:	3b01      	subs	r3, #1
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	60fb      	str	r3, [r7, #12]
    int32_t indiceMaximo = longitud-1;			 //Empiezo en el último índice
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]

    while(longitud--)
 8000b72:	e00f      	b.n	8000b94 <max+0x44>
    {
        if(vectorIn[longitud] >= valorMaximo)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dc07      	bgt.n	8000b94 <max+0x44>
        {
        	valorMaximo  = vectorIn[longitud];
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	60fb      	str	r3, [r7, #12]
        	indiceMaximo = longitud;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	60bb      	str	r3, [r7, #8]
    while(longitud--)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	603a      	str	r2, [r7, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1ea      	bne.n	8000b74 <max+0x24>
        }
    }
    return indiceMaximo;
 8000b9e:	68bb      	ldr	r3, [r7, #8]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <invertir>:

void invertir (uint16_t * vector, uint32_t longitud)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	uint16_t aux;
	uint32_t i1 = 0;					//i1 comienza en el primer elemento y luego se incrementa
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
	uint32_t i2 = longitud - 1; 		//i2 comienza en el último elelmento y luego se decrementa
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
	uint32_t inversiones = longitud/2;	//cantidad de inversiones (la mitad del elemento del arreglo, tanto si es par o impar)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	085b      	lsrs	r3, r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
	while(inversiones--)
 8000bc6:	e01b      	b.n	8000c00 <invertir+0x54>
	{
		aux = vector[i2];
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	817b      	strh	r3, [r7, #10]
		vector[i2] = vector[i1];
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	441a      	add	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	440b      	add	r3, r1
 8000be4:	8812      	ldrh	r2, [r2, #0]
 8000be6:	801a      	strh	r2, [r3, #0]
		vector[i1] = aux;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	897a      	ldrh	r2, [r7, #10]
 8000bf2:	801a      	strh	r2, [r3, #0]
		i1++;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
		i2--;
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
	while(inversiones--)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	60fa      	str	r2, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1de      	bne.n	8000bc8 <invertir+0x1c>
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <filtroVentana10>:

void filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitudVectorIn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	uint8_t longitudVentana = 10;
 8000c24:	230a      	movs	r3, #10
 8000c26:	76bb      	strb	r3, [r7, #26]
	uint32_t indice = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t indiceVentana = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
	uint32_t suma = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
	uint32_t promedio = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
	while(indice < longitudVectorIn) // desde 0 hasta 7
 8000c38:	e045      	b.n	8000cc6 <filtroVentana10+0xae>
	{

		for(uint8_t i = 0; i<longitudVentana; i++) // desde 0 hasta 3
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	76fb      	strb	r3, [r7, #27]
 8000c3e:	e021      	b.n	8000c84 <filtroVentana10+0x6c>
		{
			if( (indice+i) < longitudVectorIn)
 8000c40:	7efa      	ldrb	r2, [r7, #27]
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	4413      	add	r3, r2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d904      	bls.n	8000c56 <filtroVentana10+0x3e>
			{
				indiceVentana = (indice+i);
 8000c4c:	7efb      	ldrb	r3, [r7, #27]
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c50:	4413      	add	r3, r2
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	e00a      	b.n	8000c6c <filtroVentana10+0x54>
			}
			else
			{
				indiceVentana = (indice+i) % longitudVectorIn;
 8000c56:	7efa      	ldrb	r2, [r7, #27]
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	4413      	add	r3, r2
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	fb01 f202 	mul.w	r2, r1, r2
 8000c68:	1a9b      	subs	r3, r3, r2
 8000c6a:	623b      	str	r3, [r7, #32]
			}
			suma += vectorIn[indiceVentana];
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i<longitudVentana; i++) // desde 0 hasta 3
 8000c7e:	7efb      	ldrb	r3, [r7, #27]
 8000c80:	3301      	adds	r3, #1
 8000c82:	76fb      	strb	r3, [r7, #27]
 8000c84:	7efa      	ldrb	r2, [r7, #27]
 8000c86:	7ebb      	ldrb	r3, [r7, #26]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d3d9      	bcc.n	8000c40 <filtroVentana10+0x28>
		}

		promedio = (float) suma/longitudVentana;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000c96:	7ebb      	ldrb	r3, [r7, #26]
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca8:	ee17 3a90 	vmov	r3, s15
 8000cac:	617b      	str	r3, [r7, #20]
		vectorOut[indice] = promedio;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	b292      	uxth	r2, r2
 8000cba:	801a      	strh	r2, [r3, #0]
		indice++;
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
		suma = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
	while(indice < longitudVectorIn) // desde 0 hasta 7
 8000cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3b5      	bcc.n	8000c3a <filtroVentana10+0x22>
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	372c      	adds	r7, #44	; 0x2c
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <downsampleM>:

void downsampleM(int32_t * vectorIn, int32_t * vectorOut, uint32_t longitud, uint32_t N)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	603b      	str	r3, [r7, #0]
	uint32_t indiceN = 0;	//recorre vector ignorando cada N elementos
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
	uint32_t indiceOut=0;	//índice vector de salida, será menor a medida que se quitan elementos
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]

	for(uint32_t indiceIn=0; indiceIn<longitud; indiceIn++) //recorre vector de entrada
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e01a      	b.n	8000d2e <downsampleM+0x52>
	{

		if( indiceN >= (N-1) )	//descarta el N-ésimo elemento, vuelve a contar desde 0
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d302      	bcc.n	8000d08 <downsampleM+0x2c>
		{
			indiceN = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e00f      	b.n	8000d28 <downsampleM+0x4c>
		}
		else		   			//llega hasta N-1
		{
			vectorOut[indiceOut] = vectorIn[indiceIn];
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	441a      	add	r2, r3
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	440b      	add	r3, r1
 8000d18:	6812      	ldr	r2, [r2, #0]
 8000d1a:	601a      	str	r2, [r3, #0]
			indiceOut++;
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
			indiceN ++;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3301      	adds	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
	for(uint32_t indiceIn=0; indiceIn<longitud; indiceIn++) //recorre vector de entrada
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d3e0      	bcc.n	8000cf8 <downsampleM+0x1c>
		}
	}
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	3724      	adds	r7, #36	; 0x24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <pack32to16>:

void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
    while(longitud--)
 8000d50:	e00b      	b.n	8000d6a <pack32to16+0x26>
    {
        vectorOut[longitud] = vectorIn[longitud] >> 16;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	1419      	asrs	r1, r3, #16
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	4413      	add	r3, r2
 8000d66:	b20a      	sxth	r2, r1
 8000d68:	801a      	strh	r2, [r3, #0]
    while(longitud--)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	1e5a      	subs	r2, r3, #1
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1ee      	bne.n	8000d52 <pack32to16+0xe>
    }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b088      	sub	sp, #32
 8000d86:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000d88:	f3ef 8314 	mrs	r3, CONTROL
 8000d8c:	607b      	str	r3, [r7, #4]
  return(result);
 8000d8e:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000d90:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f383 8814 	msr	CONTROL, r3
}
 8000da4:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000da6:	f3ef 8314 	mrs	r3, CONTROL
 8000daa:	60fb      	str	r3, [r7, #12]
  return(result);
 8000dac:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000dae:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f023 0301 	bic.w	r3, r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	f383 8814 	msr	CONTROL, r3
}
 8000dc2:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000dc4:	f3ef 8314 	mrs	r3, CONTROL
 8000dc8:	617b      	str	r3, [r7, #20]
  return(result);
 8000dca:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000dcc:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000dce:	f7ff fa0f 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000dd2:	f3ef 8314 	mrs	r3, CONTROL
 8000dd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000dd8:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000dda:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000de8:	b0ce      	sub	sp, #312	; 0x138
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dec:	f001 f860 	bl	8001eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df0:	f000 fbee 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 fcfc 	bl	80017f0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000df8:	f000 fc54 	bl	80016a4 <MX_ETH_Init>


  MX_USART3_UART_Init();
 8000dfc:	f000 fca0 	bl	8001740 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e00:	f000 fcc8 	bl	8001794 <MX_USB_OTG_FS_PCD_Init>
  printf("HOLA\r\n");
 8000e04:	48fa      	ldr	r0, [pc, #1000]	; (80011f0 <main+0x40c>)
 8000e06:	f003 fad3 	bl	80043b0 <puts>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000e0a:	f7ff ffba 	bl	8000d82 <PrivilegiosSVC>

  /* USER CODE END 2 */
  uint32_t miLongitud = 10;
 8000e0e:	230a      	movs	r3, #10
 8000e10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t miEscalar1  = 3;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t miEscalar2  = 10;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t miEscalar3  = 100;
 8000e20:	2364      	movs	r3, #100	; 0x64
 8000e22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t miArreglo32[miLongitud];
 8000e26:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000e32:	2300      	movs	r3, #0
 8000e34:	460c      	mov	r4, r1
 8000e36:	461d      	mov	r5, r3
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	016b      	lsls	r3, r5, #5
 8000e42:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000e46:	0162      	lsls	r2, r4, #5
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4688      	mov	r8, r1
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000e5a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000e5e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000e62:	008b      	lsls	r3, r1, #2
 8000e64:	3307      	adds	r3, #7
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e6e:	466b      	mov	r3, sp
 8000e70:	3303      	adds	r3, #3
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint16_t miArreglo16[miLongitud];
 8000e7a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000e7e:	460b      	mov	r3, r1
 8000e80:	3b01      	subs	r3, #1
 8000e82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000e86:	2300      	movs	r3, #0
 8000e88:	468a      	mov	sl, r1
 8000e8a:	469b      	mov	fp, r3
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000e98:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000e9c:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8000ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	0103      	lsls	r3, r0, #4
 8000eba:	4620      	mov	r0, r4
 8000ebc:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	0102      	lsls	r2, r0, #4
 8000ec4:	004b      	lsls	r3, r1, #1
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	ebad 0d03 	sub.w	sp, sp, r3
 8000ed0:	466b      	mov	r3, sp
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	085b      	lsrs	r3, r3, #1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  uint16_t miArreglo16_out[miLongitud];
 8000edc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8000efe:	4628      	mov	r0, r5
 8000f00:	0103      	lsls	r3, r0, #4
 8000f02:	4620      	mov	r0, r4
 8000f04:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000f08:	4620      	mov	r0, r4
 8000f0a:	0102      	lsls	r2, r0, #4
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8000f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8000f22:	4628      	mov	r0, r5
 8000f24:	0103      	lsls	r3, r0, #4
 8000f26:	4620      	mov	r0, r4
 8000f28:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	0102      	lsls	r2, r0, #4
 8000f30:	004b      	lsls	r3, r1, #1
 8000f32:	3307      	adds	r3, #7
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	ebad 0d03 	sub.w	sp, sp, r3
 8000f3c:	466b      	mov	r3, sp
 8000f3e:	3301      	adds	r3, #1
 8000f40:	085b      	lsrs	r3, r3, #1
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int32_t  miArregloSignado[miLongitud];
 8000f48:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8000f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	0143      	lsls	r3, r0, #5
 8000f6e:	4620      	mov	r0, r4
 8000f70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f74:	4620      	mov	r0, r4
 8000f76:	0142      	lsls	r2, r0, #5
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000f8e:	4628      	mov	r0, r5
 8000f90:	0143      	lsls	r3, r0, #5
 8000f92:	4620      	mov	r0, r4
 8000f94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f98:	4620      	mov	r0, r4
 8000f9a:	0142      	lsls	r2, r0, #5
 8000f9c:	008b      	lsls	r3, r1, #2
 8000f9e:	3307      	adds	r3, #7
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	ebad 0d03 	sub.w	sp, sp, r3
 8000fa8:	466b      	mov	r3, sp
 8000faa:	3303      	adds	r3, #3
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  int32_t  miArregloSignado_out[miLongitud];
 8000fb4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000fb8:	460b      	mov	r3, r1
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	0143      	lsls	r3, r0, #5
 8000fda:	4620      	mov	r0, r4
 8000fdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	0142      	lsls	r2, r0, #5
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8000fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000ffa:	4628      	mov	r0, r5
 8000ffc:	0143      	lsls	r3, r0, #5
 8000ffe:	4620      	mov	r0, r4
 8001000:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001004:	4620      	mov	r0, r4
 8001006:	0142      	lsls	r2, r0, #5
 8001008:	008b      	lsls	r3, r1, #2
 800100a:	3307      	adds	r3, #7
 800100c:	08db      	lsrs	r3, r3, #3
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	ebad 0d03 	sub.w	sp, sp, r3
 8001014:	466b      	mov	r3, sp
 8001016:	3303      	adds	r3, #3
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

  llenaArreglo32(miArreglo32,miLongitud);
 8001020:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001024:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001028:	f7ff fbf4 	bl	8000814 <llenaArreglo32>
  llenaArreglo16(miArreglo16,miLongitud);
 800102c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001030:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001034:	f7ff fc06 	bl	8000844 <llenaArreglo16>
  llenaArregloSignado(miArregloSignado,miLongitud);
 8001038:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800103c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001040:	f7ff fcda 	bl	80009f8 <llenaArregloSignado>

  //zeros
  zeros(miArreglo32,miLongitud);
 8001044:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001048:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800104c:	f7ff fcf4 	bl	8000a38 <zeros>
  asm_zeros(miArreglo32,miLongitud);
 8001050:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001054:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001058:	f7ff f8ce 	bl	80001f8 <asm_zeros>

  //32 bits
  productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 800105c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001060:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001064:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001068:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800106c:	f7ff fcfc 	bl	8000a68 <productoEscalar32>
  asm_productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 8001070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001074:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001078:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800107c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001080:	f7ff f8c1 	bl	8000206 <asm_productoEscalar32>

  //16bits
  productoEscalar16(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 8001084:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001088:	b29b      	uxth	r3, r3
 800108a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800108e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001092:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001096:	f7ff fd08 	bl	8000aaa <productoEscalar16>
  asm_productoEscalar16(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 800109a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80010a4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80010a8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80010ac:	f7ff f8b8 	bl	8000220 <asm_productoEscalar16>

  //12 bits
  llenaArreglo16(miArreglo16,miLongitud);
 80010b0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80010b4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80010b8:	f7ff fbc4 	bl	8000844 <llenaArreglo16>
  productoEscalar12(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 80010bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80010c6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80010ca:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80010ce:	f7ff fd0e 	bl	8000aee <productoEscalar12>
  asm_productoEscalar12(miArreglo16,miArreglo16,miLongitud,miEscalar3);
 80010d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80010dc:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80010e0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80010e4:	f7ff f8ad 	bl	8000242 <asm_productoEscalar12>

  //maximo
  int32_t numMax = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  numMax = max(miArregloSignado,miLongitud);
 80010ee:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80010f2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80010f6:	f7ff fd2b 	bl	8000b50 <max>
 80010fa:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
  numMax = asm_max(miArregloSignado,miLongitud);
 80010fe:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001102:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001106:	f7ff f8c4 	bl	8000292 <asm_max>
 800110a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
  numMax++;
 800110e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001112:	3301      	adds	r3, #1
 8001114:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

  //invertir
  llenaArreglo16(miArreglo16,miLongitud);
 8001118:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800111c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001120:	f7ff fb90 	bl	8000844 <llenaArreglo16>
  invertir(miArreglo16,miLongitud);
 8001124:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001128:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800112c:	f7ff fd3e 	bl	8000bac <invertir>
  asm_invertir(miArreglo16,miLongitud);
 8001130:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001134:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001138:	f7ff f8c5 	bl	80002c6 <asm_invertir>

  //filtroVentana
  llenaArreglo16(miArreglo16,miLongitud);
 800113c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001140:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001144:	f7ff fb7e 	bl	8000844 <llenaArreglo16>
  filtroVentana10(miArreglo16,miArreglo16_out,miLongitud);
 8001148:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800114c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001150:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001154:	f7ff fd60 	bl	8000c18 <filtroVentana10>
  llenaArreglo16(miArreglo16,miLongitud);
 8001158:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800115c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001160:	f7ff fb70 	bl	8000844 <llenaArreglo16>
  asm_filtroVentana10(miArreglo16,miArreglo16_out,miLongitud);
 8001164:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001168:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800116c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001170:	f7ff f8bf 	bl	80002f2 <asm_filtroVentana10>


  //decima
  llenaArregloSignado1(miArregloSignado,miLongitud);
 8001174:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001178:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800117c:	f7ff fbb7 	bl	80008ee <llenaArregloSignado1>
  llenaArregloSignado2(miArregloSignado_out,miLongitud);
 8001180:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001184:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8001188:	f7ff fbc9 	bl	800091e <llenaArregloSignado2>
  downsampleM(miArregloSignado,miArregloSignado_out,miLongitud,3);
 800118c:	2303      	movs	r3, #3
 800118e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001192:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8001196:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800119a:	f7ff fd9f 	bl	8000cdc <downsampleM>
  llenaArregloSignado2(miArregloSignado_out,miLongitud);
 800119e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80011a2:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80011a6:	f7ff fbba 	bl	800091e <llenaArregloSignado2>
  asm_downsampleM(miArregloSignado,miArregloSignado_out,miLongitud,3);
 80011aa:	2303      	movs	r3, #3
 80011ac:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80011b0:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80011b4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80011b8:	f7ff f8ce 	bl	8000358 <asm_downsampleM>

  //empaqueta
  int32_t  miArregloSignado32[miLongitud];
 80011bc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80011c0:	460b      	mov	r3, r1
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80011c8:	2300      	movs	r3, #0
 80011ca:	67b9      	str	r1, [r7, #120]	; 0x78
 80011cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80011da:	4628      	mov	r0, r5
 80011dc:	0143      	lsls	r3, r0, #5
 80011de:	4620      	mov	r0, r4
 80011e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011e4:	4620      	mov	r0, r4
 80011e6:	0142      	lsls	r2, r0, #5
 80011e8:	2300      	movs	r3, #0
 80011ea:	6739      	str	r1, [r7, #112]	; 0x70
 80011ec:	e002      	b.n	80011f4 <main+0x410>
 80011ee:	bf00      	nop
 80011f0:	080052c4 	.word	0x080052c4
 80011f4:	677b      	str	r3, [r7, #116]	; 0x74
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001202:	4628      	mov	r0, r5
 8001204:	0143      	lsls	r3, r0, #5
 8001206:	4620      	mov	r0, r4
 8001208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800120c:	4620      	mov	r0, r4
 800120e:	0142      	lsls	r2, r0, #5
 8001210:	008b      	lsls	r3, r1, #2
 8001212:	3307      	adds	r3, #7
 8001214:	08db      	lsrs	r3, r3, #3
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	ebad 0d03 	sub.w	sp, sp, r3
 800121c:	466b      	mov	r3, sp
 800121e:	3303      	adds	r3, #3
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  int16_t  miArregloSignado16[miLongitud];
 8001228:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800122c:	460b      	mov	r3, r1
 800122e:	3b01      	subs	r3, #1
 8001230:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001234:	2300      	movs	r3, #0
 8001236:	66b9      	str	r1, [r7, #104]	; 0x68
 8001238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001246:	4628      	mov	r0, r5
 8001248:	0103      	lsls	r3, r0, #4
 800124a:	4620      	mov	r0, r4
 800124c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001250:	4620      	mov	r0, r4
 8001252:	0102      	lsls	r2, r0, #4
 8001254:	2300      	movs	r3, #0
 8001256:	6639      	str	r1, [r7, #96]	; 0x60
 8001258:	667b      	str	r3, [r7, #100]	; 0x64
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001266:	4628      	mov	r0, r5
 8001268:	0103      	lsls	r3, r0, #4
 800126a:	4620      	mov	r0, r4
 800126c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001270:	4620      	mov	r0, r4
 8001272:	0102      	lsls	r2, r0, #4
 8001274:	004b      	lsls	r3, r1, #1
 8001276:	3307      	adds	r3, #7
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	ebad 0d03 	sub.w	sp, sp, r3
 8001280:	466b      	mov	r3, sp
 8001282:	3301      	adds	r3, #1
 8001284:	085b      	lsrs	r3, r3, #1
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  llenaArregloSignado32(miArregloSignado32,miLongitud);
 800128c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001290:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001294:	f7ff fb8e 	bl	80009b4 <llenaArregloSignado32>
  llenaArregloSignado16(miArregloSignado16,miLongitud);
 8001298:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800129c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80012a0:	f7ff fb56 	bl	8000950 <llenaArregloSignado16>
  pack32to16(miArregloSignado32,miArregloSignado16,miLongitud);
 80012a4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80012a8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80012ac:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80012b0:	f7ff fd48 	bl	8000d44 <pack32to16>
  asm_pack32to16(miArregloSignado32,miArregloSignado16,miLongitud);
 80012b4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80012b8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80012bc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80012c0:	f7ff f85f 	bl	8000382 <asm_pack32to16>

  //fusion
  int16_t  s1[miLongitud];
 80012c4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80012c8:	460b      	mov	r3, r1
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80012d0:	2300      	movs	r3, #0
 80012d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80012d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80012e2:	4628      	mov	r0, r5
 80012e4:	0103      	lsls	r3, r0, #4
 80012e6:	4620      	mov	r0, r4
 80012e8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80012ec:	4620      	mov	r0, r4
 80012ee:	0102      	lsls	r2, r0, #4
 80012f0:	2300      	movs	r3, #0
 80012f2:	6539      	str	r1, [r7, #80]	; 0x50
 80012f4:	657b      	str	r3, [r7, #84]	; 0x54
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001302:	4628      	mov	r0, r5
 8001304:	0103      	lsls	r3, r0, #4
 8001306:	4620      	mov	r0, r4
 8001308:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800130c:	4620      	mov	r0, r4
 800130e:	0102      	lsls	r2, r0, #4
 8001310:	004b      	lsls	r3, r1, #1
 8001312:	3307      	adds	r3, #7
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	ebad 0d03 	sub.w	sp, sp, r3
 800131c:	466b      	mov	r3, sp
 800131e:	3301      	adds	r3, #1
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  int16_t  s2[miLongitud];
 8001328:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800132c:	460b      	mov	r3, r1
 800132e:	3b01      	subs	r3, #1
 8001330:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001334:	2300      	movs	r3, #0
 8001336:	64b9      	str	r1, [r7, #72]	; 0x48
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001346:	4628      	mov	r0, r5
 8001348:	0103      	lsls	r3, r0, #4
 800134a:	4620      	mov	r0, r4
 800134c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001350:	4620      	mov	r0, r4
 8001352:	0102      	lsls	r2, r0, #4
 8001354:	2300      	movs	r3, #0
 8001356:	6439      	str	r1, [r7, #64]	; 0x40
 8001358:	647b      	str	r3, [r7, #68]	; 0x44
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001366:	4628      	mov	r0, r5
 8001368:	0103      	lsls	r3, r0, #4
 800136a:	4620      	mov	r0, r4
 800136c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001370:	4620      	mov	r0, r4
 8001372:	0102      	lsls	r2, r0, #4
 8001374:	004b      	lsls	r3, r1, #1
 8001376:	3307      	adds	r3, #7
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	ebad 0d03 	sub.w	sp, sp, r3
 8001380:	466b      	mov	r3, sp
 8001382:	3301      	adds	r3, #1
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  int16_t  salida[miLongitud];
 800138c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001390:	460b      	mov	r3, r1
 8001392:	3b01      	subs	r3, #1
 8001394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001398:	2300      	movs	r3, #0
 800139a:	63b9      	str	r1, [r7, #56]	; 0x38
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80013aa:	4628      	mov	r0, r5
 80013ac:	0103      	lsls	r3, r0, #4
 80013ae:	4620      	mov	r0, r4
 80013b0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80013b4:	4620      	mov	r0, r4
 80013b6:	0102      	lsls	r2, r0, #4
 80013b8:	2300      	movs	r3, #0
 80013ba:	6339      	str	r1, [r7, #48]	; 0x30
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013ca:	4628      	mov	r0, r5
 80013cc:	0103      	lsls	r3, r0, #4
 80013ce:	4620      	mov	r0, r4
 80013d0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80013d4:	4620      	mov	r0, r4
 80013d6:	0102      	lsls	r2, r0, #4
 80013d8:	004b      	lsls	r3, r1, #1
 80013da:	3307      	adds	r3, #7
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	ebad 0d03 	sub.w	sp, sp, r3
 80013e4:	466b      	mov	r3, sp
 80013e6:	3301      	adds	r3, #1
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

  llenaArregloS1(s1,miLongitud);
 80013f0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80013f4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80013f8:	f7ff fa3d 	bl	8000876 <llenaArregloS1>
  llenaArregloS2(s2,miLongitud);
 80013fc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001400:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001404:	f7ff fa55 	bl	80008b2 <llenaArregloS2>
  llenaArregloSignado16(salida,miLongitud);
 8001408:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800140c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001410:	f7ff fa9e 	bl	8000950 <llenaArregloSignado16>
  asm_fusion(salida,s1,s2,miLongitud);
 8001414:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001418:	b29b      	uxth	r3, r3
 800141a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800141e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8001422:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001426:	f7fe ffb5 	bl	8000394 <asm_fusion>

  //correlación sin SIMD
  int16_t  vectorX[miLongitud];
 800142a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800142e:	460b      	mov	r3, r1
 8001430:	3b01      	subs	r3, #1
 8001432:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001436:	2300      	movs	r3, #0
 8001438:	62b9      	str	r1, [r7, #40]	; 0x28
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001448:	4628      	mov	r0, r5
 800144a:	0103      	lsls	r3, r0, #4
 800144c:	4620      	mov	r0, r4
 800144e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001452:	4620      	mov	r0, r4
 8001454:	0102      	lsls	r2, r0, #4
 8001456:	2300      	movs	r3, #0
 8001458:	6239      	str	r1, [r7, #32]
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001468:	4628      	mov	r0, r5
 800146a:	0103      	lsls	r3, r0, #4
 800146c:	4620      	mov	r0, r4
 800146e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001472:	4620      	mov	r0, r4
 8001474:	0102      	lsls	r2, r0, #4
 8001476:	004b      	lsls	r3, r1, #1
 8001478:	3307      	adds	r3, #7
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	ebad 0d03 	sub.w	sp, sp, r3
 8001482:	466b      	mov	r3, sp
 8001484:	3301      	adds	r3, #1
 8001486:	085b      	lsrs	r3, r3, #1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  int16_t  vectorY[miLongitud];
 800148e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001492:	460b      	mov	r3, r1
 8001494:	3b01      	subs	r3, #1
 8001496:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800149a:	2300      	movs	r3, #0
 800149c:	61b9      	str	r1, [r7, #24]
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80014ac:	4628      	mov	r0, r5
 80014ae:	0103      	lsls	r3, r0, #4
 80014b0:	4620      	mov	r0, r4
 80014b2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80014b6:	4620      	mov	r0, r4
 80014b8:	0102      	lsls	r2, r0, #4
 80014ba:	2300      	movs	r3, #0
 80014bc:	6139      	str	r1, [r7, #16]
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014cc:	4628      	mov	r0, r5
 80014ce:	0103      	lsls	r3, r0, #4
 80014d0:	4620      	mov	r0, r4
 80014d2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80014d6:	4620      	mov	r0, r4
 80014d8:	0102      	lsls	r2, r0, #4
 80014da:	004b      	lsls	r3, r1, #1
 80014dc:	3307      	adds	r3, #7
 80014de:	08db      	lsrs	r3, r3, #3
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	ebad 0d03 	sub.w	sp, sp, r3
 80014e6:	466b      	mov	r3, sp
 80014e8:	3301      	adds	r3, #1
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  int16_t  vectorCorr[miLongitud];
 80014f2:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80014f6:	460b      	mov	r3, r1
 80014f8:	3b01      	subs	r3, #1
 80014fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014fe:	2300      	movs	r3, #0
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001510:	4628      	mov	r0, r5
 8001512:	0103      	lsls	r3, r0, #4
 8001514:	4620      	mov	r0, r4
 8001516:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800151a:	4620      	mov	r0, r4
 800151c:	0102      	lsls	r2, r0, #4
 800151e:	2300      	movs	r3, #0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001530:	4628      	mov	r0, r5
 8001532:	0103      	lsls	r3, r0, #4
 8001534:	4620      	mov	r0, r4
 8001536:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800153a:	4620      	mov	r0, r4
 800153c:	0102      	lsls	r2, r0, #4
 800153e:	004b      	lsls	r3, r1, #1
 8001540:	3307      	adds	r3, #7
 8001542:	08db      	lsrs	r3, r3, #3
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	ebad 0d03 	sub.w	sp, sp, r3
 800154a:	466b      	mov	r3, sp
 800154c:	3301      	adds	r3, #1
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  llenaArregloS1(vectorX,miLongitud);
 8001556:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800155a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800155e:	f7ff f98a 	bl	8000876 <llenaArregloS1>
  llenaArregloS2(vectorY,miLongitud);
 8001562:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001566:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800156a:	f7ff f9a2 	bl	80008b2 <llenaArregloS2>
  llenaVectorCorr16(vectorCorr,miLongitud);
 800156e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001572:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001576:	f7ff fa04 	bl	8000982 <llenaVectorCorr16>

  asm_corr(vectorX,vectorY,vectorCorr,miLongitud);
 800157a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800157e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001582:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001586:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800158a:	f7fe ff13 	bl	80003b4 <asm_corr>

  //correlación sin SIMD
  llenaVectorCorr16(vectorCorr,miLongitud);
 800158e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001592:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001596:	f7ff f9f4 	bl	8000982 <llenaVectorCorr16>
  asm_corrSIMD(vectorX,vectorY,vectorCorr,miLongitud);
 800159a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800159e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80015a2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80015a6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80015aa:	f7fe ff2f 	bl	800040c <asm_corrSIMD>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char miChar = 'a';
 80015ae:	2361      	movs	r3, #97	; 0x61
 80015b0:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  while (1)
  {
    /* USER CODE END WHILE */
	  miChar++;
 80015b4:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80015b8:	3301      	adds	r3, #1
 80015ba:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	  printf("HOLA %c\r\n",miChar);
 80015be:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80015c2:	4619      	mov	r1, r3
 80015c4:	4801      	ldr	r0, [pc, #4]	; (80015cc <main+0x7e8>)
 80015c6:	f002 fe6d 	bl	80042a4 <iprintf>
	  miChar++;
 80015ca:	e7f3      	b.n	80015b4 <main+0x7d0>
 80015cc:	080052cc 	.word	0x080052cc

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fe58 	bl	8004294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <SystemClock_Config+0xcc>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <SystemClock_Config+0xcc>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <SystemClock_Config+0xcc>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <SystemClock_Config+0xd0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <SystemClock_Config+0xd0>)
 800161a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <SystemClock_Config+0xd0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800162c:	2301      	movs	r3, #1
 800162e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001630:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	2302      	movs	r3, #2
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800163e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001640:	2308      	movs	r3, #8
 8001642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001644:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800164e:	2307      	movs	r3, #7
 8001650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fb96 	bl	8002d88 <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001662:	f000 f973 	bl	800194c <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
      clocks dividers */
   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001666:	230f      	movs	r3, #15
 8001668:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166a:	2302      	movs	r3, #2
 800166c:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001676:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167c:	61fb      	str	r3, [r7, #28]
   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	2105      	movs	r1, #5
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fdf7 	bl	8003278 <HAL_RCC_ClockConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0xc4>
   {
     /* Initialization Error */
     Error_Handler();
 8001690:	f000 f95c 	bl	800194c <Error_Handler>
   }
}
 8001694:	bf00      	nop
 8001696:	3750      	adds	r7, #80	; 0x50
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000

080016a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_ETH_Init+0x84>)
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <MX_ETH_Init+0x88>)
 80016ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <MX_ETH_Init+0x8c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_ETH_Init+0x8c>)
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_ETH_Init+0x8c>)
 80016bc:	22e1      	movs	r2, #225	; 0xe1
 80016be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_ETH_Init+0x8c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_ETH_Init+0x8c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_ETH_Init+0x8c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_ETH_Init+0x84>)
 80016d4:	4a16      	ldr	r2, [pc, #88]	; (8001730 <MX_ETH_Init+0x8c>)
 80016d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <MX_ETH_Init+0x84>)
 80016da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016de:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_ETH_Init+0x84>)
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <MX_ETH_Init+0x90>)
 80016e4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_ETH_Init+0x84>)
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <MX_ETH_Init+0x94>)
 80016ea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_ETH_Init+0x84>)
 80016ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016f2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <MX_ETH_Init+0x84>)
 80016f6:	f000 fd51 	bl	800219c <HAL_ETH_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001700:	f000 f924 	bl	800194c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001704:	2238      	movs	r2, #56	; 0x38
 8001706:	2100      	movs	r1, #0
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_ETH_Init+0x98>)
 800170a:	f002 fdc3 	bl	8004294 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <MX_ETH_Init+0x98>)
 8001710:	2221      	movs	r2, #33	; 0x21
 8001712:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_ETH_Init+0x98>)
 8001716:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800171a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <MX_ETH_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000204 	.word	0x20000204
 800172c:	40028000 	.word	0x40028000
 8001730:	20000804 	.word	0x20000804
 8001734:	20000164 	.word	0x20000164
 8001738:	200000c4 	.word	0x200000c4
 800173c:	2000008c 	.word	0x2000008c

08001740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART3_UART_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_USART3_UART_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_USART3_UART_Init+0x4c>)
 800174c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART3_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART3_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART3_UART_Init+0x4c>)
 8001760:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001764:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART3_UART_Init+0x4c>)
 8001768:	220c      	movs	r2, #12
 800176a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_USART3_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART3_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_USART3_UART_Init+0x4c>)
 800177a:	f001 ff9d 	bl	80036b8 <HAL_UART_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART3_UART_Init+0x48>
  {
	//printf("UART ERROR\r\n");
    Error_Handler();
 8001784:	f000 f8e2 	bl	800194c <Error_Handler>
  //printf("UART OK\r\n");
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200002b4 	.word	0x200002b4
 8001790:	40004800 	.word	0x40004800

08001794 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800179e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a2:	2204      	movs	r2, #4
 80017a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d8:	f001 f9b9 	bl	8002b4e <HAL_PCD_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017e2:	f000 f8b3 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002f8 	.word	0x200002f8

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <MX_GPIO_Init+0x14c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a4b      	ldr	r2, [pc, #300]	; (800193c <MX_GPIO_Init+0x14c>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <MX_GPIO_Init+0x14c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <MX_GPIO_Init+0x14c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a44      	ldr	r2, [pc, #272]	; (800193c <MX_GPIO_Init+0x14c>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <MX_GPIO_Init+0x14c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <MX_GPIO_Init+0x14c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a3d      	ldr	r2, [pc, #244]	; (800193c <MX_GPIO_Init+0x14c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <MX_GPIO_Init+0x14c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <MX_GPIO_Init+0x14c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a36      	ldr	r2, [pc, #216]	; (800193c <MX_GPIO_Init+0x14c>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <MX_GPIO_Init+0x14c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <MX_GPIO_Init+0x14c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a2f      	ldr	r2, [pc, #188]	; (800193c <MX_GPIO_Init+0x14c>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_GPIO_Init+0x14c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <MX_GPIO_Init+0x14c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <MX_GPIO_Init+0x14c>)
 800189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_GPIO_Init+0x14c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80018b4:	4822      	ldr	r0, [pc, #136]	; (8001940 <MX_GPIO_Init+0x150>)
 80018b6:	f001 f931 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2140      	movs	r1, #64	; 0x40
 80018be:	4821      	ldr	r0, [pc, #132]	; (8001944 <MX_GPIO_Init+0x154>)
 80018c0:	f001 f92c 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	481b      	ldr	r0, [pc, #108]	; (8001948 <MX_GPIO_Init+0x158>)
 80018dc:	f000 ff72 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <MX_GPIO_Init+0x150>)
 80018fa:	f000 ff63 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018fe:	2340      	movs	r3, #64	; 0x40
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	480b      	ldr	r0, [pc, #44]	; (8001944 <MX_GPIO_Init+0x154>)
 8001916:	f000 ff55 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_GPIO_Init+0x154>)
 800192e:	f000 ff49 	bl	80027c4 <HAL_GPIO_Init>

}
 8001932:	bf00      	nop
 8001934:	3730      	adds	r7, #48	; 0x30
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40020400 	.word	0x40020400
 8001944:	40021800 	.word	0x40021800
 8001948:	40020800 	.word	0x40020800

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08e      	sub	sp, #56	; 0x38
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <HAL_ETH_MspInit+0x174>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	f040 80a4 	bne.w	8001b14 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	4a52      	ldr	r2, [pc, #328]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 80019d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019da:	6313      	str	r3, [r2, #48]	; 0x30
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	623b      	str	r3, [r7, #32]
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4a4b      	ldr	r2, [pc, #300]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 80019f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019f6:	6313      	str	r3, [r2, #48]	; 0x30
 80019f8:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4a44      	ldr	r2, [pc, #272]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a12:	6313      	str	r3, [r2, #48]	; 0x30
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a3d      	ldr	r2, [pc, #244]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a82:	6313      	str	r3, [r2, #48]	; 0x30
 8001a84:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <HAL_ETH_MspInit+0x178>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a90:	2332      	movs	r3, #50	; 0x32
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa0:	230b      	movs	r3, #11
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	481e      	ldr	r0, [pc, #120]	; (8001b24 <HAL_ETH_MspInit+0x17c>)
 8001aac:	f000 fe8a 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ab0:	2386      	movs	r3, #134	; 0x86
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac0:	230b      	movs	r3, #11
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4817      	ldr	r0, [pc, #92]	; (8001b28 <HAL_ETH_MspInit+0x180>)
 8001acc:	f000 fe7a 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae2:	230b      	movs	r3, #11
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <HAL_ETH_MspInit+0x184>)
 8001aee:	f000 fe69 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001af2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b04:	230b      	movs	r3, #11
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4808      	ldr	r0, [pc, #32]	; (8001b30 <HAL_ETH_MspInit+0x188>)
 8001b10:	f000 fe58 	bl	80027c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3738      	adds	r7, #56	; 0x38
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40028000 	.word	0x40028000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40021800 	.word	0x40021800

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <HAL_UART_MspInit+0x84>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12c      	bne.n	8001bb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_UART_MspInit+0x88>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_UART_MspInit+0x88>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_UART_MspInit+0x88>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_UART_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_UART_MspInit+0x88>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_UART_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_UART_MspInit+0x8c>)
 8001bac:	f000 fe0a 	bl	80027c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40004800 	.word	0x40004800
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020c00 	.word	0x40020c00

08001bc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be4:	d13f      	bne.n	8001c66 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_PCD_MspInit+0xac>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <HAL_PCD_MspInit+0xac>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <HAL_PCD_MspInit+0xac>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c14:	230a      	movs	r3, #10
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4815      	ldr	r0, [pc, #84]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c20:	f000 fdd0 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	480e      	ldr	r0, [pc, #56]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c3a:	f000 fdc3 	bl	80027c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_PCD_MspInit+0xac>)
 8001c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_PCD_MspInit+0xac>)
 8001c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c48:	6353      	str	r3, [r2, #52]	; 0x34
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_PCD_MspInit+0xac>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_PCD_MspInit+0xac>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_PCD_MspInit+0xac>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <NMI_Handler+0x4>

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001c9c:	f3ef 8314 	mrs	r3, CONTROL
 8001ca0:	607b      	str	r3, [r7, #4]
  return(result);
 8001ca2:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001ca4:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f383 8814 	msr	CONTROL, r3
}
 8001cb8:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce6:	f000 f92f 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e00a      	b.n	8001d16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d00:	f3af 8000 	nop.w
 8001d04:	4601      	mov	r1, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	60ba      	str	r2, [r7, #8]
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dbf0      	blt.n	8001d00 <_read+0x12>
	}

return len;
 8001d1e:	687b      	ldr	r3, [r7, #4]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e009      	b.n	8001d4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	60ba      	str	r2, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbf1      	blt.n	8001d3a <_write+0x12>
	}
	return len;
 8001d56:	687b      	ldr	r3, [r7, #4]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_close>:

int _close(int file)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	return -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d88:	605a      	str	r2, [r3, #4]
	return 0;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_isatty>:

int _isatty(int file)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	return 1;
 8001da0:	2301      	movs	r3, #1
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
	return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <_sbrk+0x5c>)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <_sbrk+0x60>)
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <_sbrk+0x64>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <_sbrk+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df8:	f002 fa22 	bl	8004240 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	220c      	movs	r2, #12
 8001e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e009      	b.n	8001e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <_sbrk+0x64>)
 8001e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20030000 	.word	0x20030000
 8001e28:	00000400 	.word	0x00000400
 8001e2c:	2000080c 	.word	0x2000080c
 8001e30:	20000828 	.word	0x20000828

08001e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <SystemInit+0x20>)
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <SystemInit+0x20>)
 8001e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001e58:	bf00      	nop
  nop
 8001e5a:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e62:	490e      	ldr	r1, [pc, #56]	; (8001e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e64:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e78:	4c0b      	ldr	r4, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e86:	f7ff ffd5 	bl	8001e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8a:	f002 f9df 	bl	800424c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8e:	f7fe ffa9 	bl	8000de4 <main>
  bx  lr    
 8001e92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ea0:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 8001ea4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ea8:	20000824 	.word	0x20000824

08001eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eac:	e7fe      	b.n	8001eac <ADC_IRQHandler>
	...

08001eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_Init+0x34>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_Init+0x34>)
 8001eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebe:	6013      	str	r3, [r2, #0]
/*#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif // DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_Init+0x34>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_Init+0x34>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f931 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f808 	bl	8001ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed8:	f7ff fd3e 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023c00 	.word	0x40023c00

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x54>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x58>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f93b 	bl	8002182 <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f000 f911 	bl	800214a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x5c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	20000810 	.word	0x20000810

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000810 	.word	0x20000810

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_Delay+0x44>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	60d3      	str	r3, [r2, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff47 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff5c 	bl	8002018 <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffb0 	bl	80020f0 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06c      	b.n	8002288 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2223      	movs	r2, #35	; 0x23
 80021bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff fbf1 	bl	80019a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_ETH_Init+0xf4>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a30      	ldr	r2, [pc, #192]	; (8002290 <HAL_ETH_Init+0xf4>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_ETH_Init+0xf4>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_ETH_Init+0xf8>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <HAL_ETH_Init+0xf8>)
 80021e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021ee:	4b29      	ldr	r3, [pc, #164]	; (8002294 <HAL_ETH_Init+0xf8>)
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	4927      	ldr	r1, [pc, #156]	; (8002294 <HAL_ETH_Init+0xf8>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_ETH_Init+0xf8>)
 80021fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002216:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002218:	f7ff feaa 	bl	8001f70 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800221e:	e011      	b.n	8002244 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002220:	f7ff fea6 	bl	8001f70 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800222e:	d909      	bls.n	8002244 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2204      	movs	r2, #4
 8002234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	22e0      	movs	r2, #224	; 0xe0
 800223c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e021      	b.n	8002288 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e4      	bne.n	8002220 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f944 	bl	80024e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f9eb 	bl	8002638 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fa41 	bl	80026ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	461a      	mov	r2, r3
 800226e:	2100      	movs	r1, #0
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f9a9 	bl	80025c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2210      	movs	r2, #16
 8002282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800

08002298 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4b47      	ldr	r3, [pc, #284]	; (80023cc <ETH_SetMACConfig+0x134>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	7c1b      	ldrb	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <ETH_SetMACConfig+0x28>
 80022ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022be:	e000      	b.n	80022c2 <ETH_SetMACConfig+0x2a>
 80022c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	7c5b      	ldrb	r3, [r3, #17]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <ETH_SetMACConfig+0x38>
 80022ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ce:	e000      	b.n	80022d2 <ETH_SetMACConfig+0x3a>
 80022d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	7fdb      	ldrb	r3, [r3, #31]
 80022de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	7f92      	ldrb	r2, [r2, #30]
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d102      	bne.n	80022f6 <ETH_SetMACConfig+0x5e>
 80022f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f4:	e000      	b.n	80022f8 <ETH_SetMACConfig+0x60>
 80022f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80022f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	7f1b      	ldrb	r3, [r3, #28]
 80022fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002300:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002306:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	791b      	ldrb	r3, [r3, #4]
 800230c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800230e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002316:	2a00      	cmp	r2, #0
 8002318:	d102      	bne.n	8002320 <ETH_SetMACConfig+0x88>
 800231a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800231e:	e000      	b.n	8002322 <ETH_SetMACConfig+0x8a>
 8002320:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002322:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7bdb      	ldrb	r3, [r3, #15]
 8002328:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800232a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002330:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002338:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800233a:	4313      	orrs	r3, r2
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002352:	2001      	movs	r0, #1
 8002354:	f7ff fe18 	bl	8001f88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800236e:	4013      	ands	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800237e:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8002384:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 800238c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002394:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800239c:	4313      	orrs	r3, r2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7ff fde7 	bl	8001f88 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	ff20810f 	.word	0xff20810f

080023d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <ETH_SetDMAConfig+0x110>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7b1b      	ldrb	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <ETH_SetDMAConfig+0x2c>
 80023f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023fa:	e000      	b.n	80023fe <ETH_SetDMAConfig+0x2e>
 80023fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	7b5b      	ldrb	r3, [r3, #13]
 8002402:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002404:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	7f52      	ldrb	r2, [r2, #29]
 800240a:	2a00      	cmp	r2, #0
 800240c:	d102      	bne.n	8002414 <ETH_SetDMAConfig+0x44>
 800240e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002412:	e000      	b.n	8002416 <ETH_SetDMAConfig+0x46>
 8002414:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002416:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	7b9b      	ldrb	r3, [r3, #14]
 800241c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800241e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002424:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	7f1b      	ldrb	r3, [r3, #28]
 800242a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800242c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7f9b      	ldrb	r3, [r3, #30]
 8002432:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002434:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800243a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002442:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002444:	4313      	orrs	r3, r2
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002454:	461a      	mov	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff fd8e 	bl	8001f88 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	791b      	ldrb	r3, [r3, #4]
 800247e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002484:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800248a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002490:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002498:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800249a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7ff fd5f 	bl	8001f88 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	f8de3f23 	.word	0xf8de3f23

080024e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0a6      	sub	sp, #152	; 0x98
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002520:	2300      	movs	r3, #0
 8002522:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800252a:	2300      	movs	r3, #0
 800252c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800254c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002550:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fe9a 	bl	8002298 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002564:	2301      	movs	r3, #1
 8002566:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002572:	2301      	movs	r3, #1
 8002574:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002590:	2301      	movs	r3, #1
 8002592:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002598:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800259a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800259e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff08 	bl	80023d0 <ETH_SetDMAConfig>
}
 80025c0:	bf00      	nop
 80025c2:	3798      	adds	r7, #152	; 0x98
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3305      	adds	r3, #5
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	3204      	adds	r2, #4
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <ETH_MACAddressConfig+0x68>)
 80025ea:	4413      	add	r3, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3303      	adds	r3, #3
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	061a      	lsls	r2, r3, #24
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3302      	adds	r3, #2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3301      	adds	r3, #1
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	4313      	orrs	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <ETH_MACAddressConfig+0x6c>)
 800261a:	4413      	add	r3, r2
 800261c:	461a      	mov	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	6013      	str	r3, [r2, #0]
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40028040 	.word	0x40028040
 8002634:	40028044 	.word	0x40028044

08002638 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e03e      	b.n	80026c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	3206      	adds	r2, #6
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d80c      	bhi.n	80026a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68d9      	ldr	r1, [r3, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	e004      	b.n	80026b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d9bd      	bls.n	8002646 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026dc:	611a      	str	r2, [r3, #16]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e046      	b.n	8002786 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6919      	ldr	r1, [r3, #16]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002734:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800273c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	3212      	adds	r2, #18
 8002752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d80c      	bhi.n	8002776 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6919      	ldr	r1, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	e004      	b.n	8002780 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d9b5      	bls.n	80026f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b6:	60da      	str	r2, [r3, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e177      	b.n	8002ad0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f040 8166 	bne.w	8002aca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d005      	beq.n	8002816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002812:	2b02      	cmp	r3, #2
 8002814:	d130      	bne.n	8002878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 0201 	and.w	r2, r3, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b03      	cmp	r3, #3
 8002882:	d017      	beq.n	80028b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d123      	bne.n	8002908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	08da      	lsrs	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3208      	adds	r2, #8
 80028c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	08da      	lsrs	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3208      	adds	r2, #8
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80c0 	beq.w	8002aca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 8002954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002958:	6453      	str	r3, [r2, #68]	; 0x44
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002966:	4a61      	ldr	r2, [pc, #388]	; (8002aec <HAL_GPIO_Init+0x328>)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_GPIO_Init+0x32c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d037      	beq.n	8002a02 <HAL_GPIO_Init+0x23e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <HAL_GPIO_Init+0x330>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_GPIO_Init+0x23a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_GPIO_Init+0x334>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02b      	beq.n	80029fa <HAL_GPIO_Init+0x236>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a55      	ldr	r2, [pc, #340]	; (8002afc <HAL_GPIO_Init+0x338>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d025      	beq.n	80029f6 <HAL_GPIO_Init+0x232>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_GPIO_Init+0x33c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <HAL_GPIO_Init+0x22e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a53      	ldr	r2, [pc, #332]	; (8002b04 <HAL_GPIO_Init+0x340>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x22a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x344>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x226>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_GPIO_Init+0x348>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x222>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a50      	ldr	r2, [pc, #320]	; (8002b10 <HAL_GPIO_Init+0x34c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x21e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <HAL_GPIO_Init+0x350>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x21a>
 80029da:	2309      	movs	r3, #9
 80029dc:	e012      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029de:	230a      	movs	r3, #10
 80029e0:	e010      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029e2:	2308      	movs	r3, #8
 80029e4:	e00e      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e00c      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029ea:	2306      	movs	r3, #6
 80029ec:	e00a      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e008      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e004      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 8002a02:	2300      	movs	r3, #0
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f002 0203 	and.w	r2, r2, #3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a14:	4935      	ldr	r1, [pc, #212]	; (8002aec <HAL_GPIO_Init+0x328>)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a46:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3301      	adds	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b0f      	cmp	r3, #15
 8002ad4:	f67f ae84 	bls.w	80027e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40021400 	.word	0x40021400
 8002b08:	40021800 	.word	0x40021800
 8002b0c:	40021c00 	.word	0x40021c00
 8002b10:	40022000 	.word	0x40022000
 8002b14:	40022400 	.word	0x40022400
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b50:	b08f      	sub	sp, #60	; 0x3c
 8002b52:	af0a      	add	r7, sp, #40	; 0x28
 8002b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e10f      	b.n	8002d80 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff f822 	bl	8001bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2203      	movs	r2, #3
 8002b84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f8ad 	bl	8003cfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	687e      	ldr	r6, [r7, #4]
 8002bac:	466d      	mov	r5, sp
 8002bae:	f106 0410 	add.w	r4, r6, #16
 8002bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc2:	1d33      	adds	r3, r6, #4
 8002bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc6:	6838      	ldr	r0, [r7, #0]
 8002bc8:	f001 f838 	bl	8003c3c <USB_CoreInit>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0d0      	b.n	8002d80 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 f89b 	bl	8003d20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e04a      	b.n	8002c86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	333d      	adds	r3, #61	; 0x3d
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	333c      	adds	r3, #60	; 0x3c
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	b298      	uxth	r0, r3
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3344      	adds	r3, #68	; 0x44
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3340      	adds	r3, #64	; 0x40
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3348      	adds	r3, #72	; 0x48
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	334c      	adds	r3, #76	; 0x4c
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3354      	adds	r3, #84	; 0x54
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	3301      	adds	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3af      	bcc.n	8002bf0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e044      	b.n	8002d20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3b5      	bcc.n	8002c96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	687e      	ldr	r6, [r7, #4]
 8002d32:	466d      	mov	r5, sp
 8002d34:	f106 0410 	add.w	r4, r6, #16
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d48:	1d33      	adds	r3, r6, #4
 8002d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d4c:	6838      	ldr	r0, [r7, #0]
 8002d4e:	f001 f833 	bl	8003db8 <USB_DevInit>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e00d      	b.n	8002d80 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 f9fe 	bl	800417a <USB_DevDisconnect>

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e267      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d075      	beq.n	8002e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da6:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d00c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db2:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d112      	bne.n	8002de4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dbe:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d05b      	beq.n	8002e90 <HAL_RCC_OscConfig+0x108>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d157      	bne.n	8002e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e242      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x74>
 8002dee:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a75      	ldr	r2, [pc, #468]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e01d      	b.n	8002e38 <HAL_RCC_OscConfig+0xb0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x98>
 8002e06:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6f      	ldr	r2, [pc, #444]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6c      	ldr	r2, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0xb0>
 8002e20:	4b69      	ldr	r3, [pc, #420]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a68      	ldr	r2, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a65      	ldr	r2, [pc, #404]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7ff f896 	bl	8001f70 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e48:	f7ff f892 	bl	8001f70 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e207      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0xc0>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7ff f882 	bl	8001f70 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e70:	f7ff f87e 	bl	8001f70 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1f3      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0xe8>
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d063      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb6:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d116      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_RCC_OscConfig+0x152>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1c7      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4937      	ldr	r1, [pc, #220]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eee:	e03a      	b.n	8002f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef8:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_OscConfig+0x244>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7ff f837 	bl	8001f70 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f06:	f7ff f833 	bl	8001f70 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e1a8      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4925      	ldr	r1, [pc, #148]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x244>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7ff f816 	bl	8001f70 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f48:	f7ff f812 	bl	8001f70 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e187      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d036      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x248>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe fff6 	bl	8001f70 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fe fff2 	bl	8001f70 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e167      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x200>
 8002fa6:	e01b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_OscConfig+0x248>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe ffdf 	bl	8001f70 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	e00e      	b.n	8002fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7fe ffdb 	bl	8001f70 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d907      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e150      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	42470000 	.word	0x42470000
 8002fd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ea      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8097 	beq.w	800311c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b7d      	ldr	r3, [pc, #500]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a7c      	ldr	r2, [pc, #496]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b7a      	ldr	r3, [pc, #488]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301e:	4b77      	ldr	r3, [pc, #476]	; (80031fc <HAL_RCC_OscConfig+0x474>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302a:	4b74      	ldr	r3, [pc, #464]	; (80031fc <HAL_RCC_OscConfig+0x474>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a73      	ldr	r2, [pc, #460]	; (80031fc <HAL_RCC_OscConfig+0x474>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7fe ff9b 	bl	8001f70 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe ff97 	bl	8001f70 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e10c      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <HAL_RCC_OscConfig+0x474>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x2ea>
 8003064:	4b64      	ldr	r3, [pc, #400]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a63      	ldr	r2, [pc, #396]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x324>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x30c>
 800307a:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a5e      	ldr	r2, [pc, #376]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	4b5c      	ldr	r3, [pc, #368]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a5b      	ldr	r2, [pc, #364]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x324>
 8003094:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a57      	ldr	r2, [pc, #348]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a54      	ldr	r2, [pc, #336]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe ff5c 	bl	8001f70 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe ff58 	bl	8001f70 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0cb      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	4b49      	ldr	r3, [pc, #292]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ee      	beq.n	80030bc <HAL_RCC_OscConfig+0x334>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e0:	f7fe ff46 	bl	8001f70 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fe ff42 	bl	8001f70 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0b5      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ee      	bne.n	80030e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	4a38      	ldr	r2, [pc, #224]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a1 	beq.w	8003268 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003126:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b08      	cmp	r3, #8
 8003130:	d05c      	beq.n	80031ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d141      	bne.n	80031be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_OscConfig+0x478>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe ff16 	bl	8001f70 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe ff12 	bl	8001f70 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e087      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	3b01      	subs	r3, #1
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	491b      	ldr	r1, [pc, #108]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x478>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe feeb 	bl	8001f70 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319e:	f7fe fee7 	bl	8001f70 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e05c      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x416>
 80031bc:	e054      	b.n	8003268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_OscConfig+0x478>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe fed4 	bl	8001f70 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe fed0 	bl	8001f70 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e045      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x444>
 80031ea:	e03d      	b.n	8003268 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e038      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40007000 	.word	0x40007000
 8003200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCC_OscConfig+0x4ec>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d028      	beq.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d121      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d11a      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800323a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323c:	4293      	cmp	r3, r2
 800323e:	d111      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d107      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0cc      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d90c      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b8      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a58      	ldr	r2, [pc, #352]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f0:	4b50      	ldr	r3, [pc, #320]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	494d      	ldr	r1, [pc, #308]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d044      	beq.n	8003398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d119      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	2b03      	cmp	r3, #3
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e067      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b37      	ldr	r3, [pc, #220]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4934      	ldr	r1, [pc, #208]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7fe fe02 	bl	8001f70 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fe fdfe 	bl	8001f70 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e04f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d20c      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e032      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4916      	ldr	r1, [pc, #88]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	490e      	ldr	r1, [pc, #56]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fe:	f000 f821 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8003402:	4602      	mov	r2, r0
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	490a      	ldr	r1, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	fa22 f303 	lsr.w	r3, r2, r3
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fd62 	bl	8001ee8 <HAL_InitTick>

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	080052d8 	.word	0x080052d8
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003448:	b094      	sub	sp, #80	; 0x50
 800344a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
 8003450:	2300      	movs	r3, #0
 8003452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003454:	2300      	movs	r3, #0
 8003456:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345c:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d00d      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x40>
 8003468:	2b08      	cmp	r3, #8
 800346a:	f200 80e1 	bhi.w	8003630 <HAL_RCC_GetSysClockFreq+0x1ec>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x34>
 8003472:	2b04      	cmp	r3, #4
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x3a>
 8003476:	e0db      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b73      	ldr	r3, [pc, #460]	; (8003648 <HAL_RCC_GetSysClockFreq+0x204>)
 800347a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800347c:	e0db      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800347e:	4b73      	ldr	r3, [pc, #460]	; (800364c <HAL_RCC_GetSysClockFreq+0x208>)
 8003480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003482:	e0d8      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003484:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800348c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348e:	4b6d      	ldr	r3, [pc, #436]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d063      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349a:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	2200      	movs	r2, #0
 80034a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ac:	633b      	str	r3, [r7, #48]	; 0x30
 80034ae:	2300      	movs	r3, #0
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
 80034b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034b6:	4622      	mov	r2, r4
 80034b8:	462b      	mov	r3, r5
 80034ba:	f04f 0000 	mov.w	r0, #0
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	0159      	lsls	r1, r3, #5
 80034c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c8:	0150      	lsls	r0, r2, #5
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4621      	mov	r1, r4
 80034d0:	1a51      	subs	r1, r2, r1
 80034d2:	6139      	str	r1, [r7, #16]
 80034d4:	4629      	mov	r1, r5
 80034d6:	eb63 0301 	sbc.w	r3, r3, r1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034e8:	4659      	mov	r1, fp
 80034ea:	018b      	lsls	r3, r1, #6
 80034ec:	4651      	mov	r1, sl
 80034ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034f2:	4651      	mov	r1, sl
 80034f4:	018a      	lsls	r2, r1, #6
 80034f6:	4651      	mov	r1, sl
 80034f8:	ebb2 0801 	subs.w	r8, r2, r1
 80034fc:	4659      	mov	r1, fp
 80034fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800350e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003516:	4690      	mov	r8, r2
 8003518:	4699      	mov	r9, r3
 800351a:	4623      	mov	r3, r4
 800351c:	eb18 0303 	adds.w	r3, r8, r3
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	462b      	mov	r3, r5
 8003524:	eb49 0303 	adc.w	r3, r9, r3
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003536:	4629      	mov	r1, r5
 8003538:	024b      	lsls	r3, r1, #9
 800353a:	4621      	mov	r1, r4
 800353c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003540:	4621      	mov	r1, r4
 8003542:	024a      	lsls	r2, r1, #9
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354a:	2200      	movs	r2, #0
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
 800354e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003550:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003554:	f7fc ffdc 	bl	8000510 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4613      	mov	r3, r2
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003560:	e058      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003562:	4b38      	ldr	r3, [pc, #224]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	2200      	movs	r2, #0
 800356a:	4618      	mov	r0, r3
 800356c:	4611      	mov	r1, r2
 800356e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	f04f 0000 	mov.w	r0, #0
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	0159      	lsls	r1, r3, #5
 800358a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800358e:	0150      	lsls	r0, r2, #5
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4641      	mov	r1, r8
 8003596:	ebb2 0a01 	subs.w	sl, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb63 0b01 	sbc.w	fp, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035b4:	ebb2 040a 	subs.w	r4, r2, sl
 80035b8:	eb63 050b 	sbc.w	r5, r3, fp
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	00eb      	lsls	r3, r5, #3
 80035c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ca:	00e2      	lsls	r2, r4, #3
 80035cc:	4614      	mov	r4, r2
 80035ce:	461d      	mov	r5, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	18e3      	adds	r3, r4, r3
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	464b      	mov	r3, r9
 80035d8:	eb45 0303 	adc.w	r3, r5, r3
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ea:	4629      	mov	r1, r5
 80035ec:	028b      	lsls	r3, r1, #10
 80035ee:	4621      	mov	r1, r4
 80035f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f4:	4621      	mov	r1, r4
 80035f6:	028a      	lsls	r2, r1, #10
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fe:	2200      	movs	r2, #0
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	61fa      	str	r2, [r7, #28]
 8003604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003608:	f7fc ff82 	bl	8000510 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4613      	mov	r3, r2
 8003612:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	3301      	adds	r3, #1
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362e:	e002      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetSysClockFreq+0x204>)
 8003632:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003638:	4618      	mov	r0, r3
 800363a:	3750      	adds	r7, #80	; 0x50
 800363c:	46bd      	mov	sp, r7
 800363e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	00f42400 	.word	0x00f42400
 800364c:	007a1200 	.word	0x007a1200

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <HAL_RCC_GetHCLKFreq+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000000 	.word	0x20000000

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800366c:	f7ff fff0 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0a9b      	lsrs	r3, r3, #10
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	; (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	080052e8 	.word	0x080052e8

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003694:	f7ff ffdc 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0b5b      	lsrs	r3, r3, #13
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	080052e8 	.word	0x080052e8

080036b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e03f      	b.n	800374a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fe fa28 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f829 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b0c0      	sub	sp, #256	; 0x100
 800375a:	af00      	add	r7, sp, #0
 800375c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	ea40 0301 	orr.w	r3, r0, r1
 800377c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037ac:	f021 010c 	bic.w	r1, r1, #12
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ce:	6999      	ldr	r1, [r3, #24]
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	ea40 0301 	orr.w	r3, r0, r1
 80037da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <UART_SetConfig+0x2cc>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d005      	beq.n	80037f4 <UART_SetConfig+0xa0>
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <UART_SetConfig+0x2d0>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d104      	bne.n	80037fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7ff ff4c 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80037f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037fc:	e003      	b.n	8003806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037fe:	f7ff ff33 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8003802:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	f040 810c 	bne.w	8003a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800381e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003826:	4622      	mov	r2, r4
 8003828:	462b      	mov	r3, r5
 800382a:	1891      	adds	r1, r2, r2
 800382c:	65b9      	str	r1, [r7, #88]	; 0x58
 800382e:	415b      	adcs	r3, r3
 8003830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003836:	4621      	mov	r1, r4
 8003838:	eb12 0801 	adds.w	r8, r2, r1
 800383c:	4629      	mov	r1, r5
 800383e:	eb43 0901 	adc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003864:	462b      	mov	r3, r5
 8003866:	eb49 0303 	adc.w	r3, r9, r3
 800386a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800387a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800387e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003882:	460b      	mov	r3, r1
 8003884:	18db      	adds	r3, r3, r3
 8003886:	653b      	str	r3, [r7, #80]	; 0x50
 8003888:	4613      	mov	r3, r2
 800388a:	eb42 0303 	adc.w	r3, r2, r3
 800388e:	657b      	str	r3, [r7, #84]	; 0x54
 8003890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003898:	f7fc fe3a 	bl	8000510 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <UART_SetConfig+0x2d4>)
 80038a2:	fba3 2302 	umull	r2, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	011c      	lsls	r4, r3, #4
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80038c4:	415b      	adcs	r3, r3
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038cc:	4641      	mov	r1, r8
 80038ce:	eb12 0a01 	adds.w	sl, r2, r1
 80038d2:	4649      	mov	r1, r9
 80038d4:	eb43 0b01 	adc.w	fp, r3, r1
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ec:	4692      	mov	sl, r2
 80038ee:	469b      	mov	fp, r3
 80038f0:	4643      	mov	r3, r8
 80038f2:	eb1a 0303 	adds.w	r3, sl, r3
 80038f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003910:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003918:	460b      	mov	r3, r1
 800391a:	18db      	adds	r3, r3, r3
 800391c:	643b      	str	r3, [r7, #64]	; 0x40
 800391e:	4613      	mov	r3, r2
 8003920:	eb42 0303 	adc.w	r3, r2, r3
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
 8003926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800392a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800392e:	f7fc fdef 	bl	8000510 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4611      	mov	r1, r2
 8003938:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <UART_SetConfig+0x2d4>)
 800393a:	fba3 2301 	umull	r2, r3, r3, r1
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2264      	movs	r2, #100	; 0x64
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	1acb      	subs	r3, r1, r3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800394e:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <UART_SetConfig+0x2d4>)
 8003950:	fba3 2302 	umull	r2, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800395c:	441c      	add	r4, r3
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003968:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800396c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	1891      	adds	r1, r2, r2
 8003976:	63b9      	str	r1, [r7, #56]	; 0x38
 8003978:	415b      	adcs	r3, r3
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003980:	4641      	mov	r1, r8
 8003982:	1851      	adds	r1, r2, r1
 8003984:	6339      	str	r1, [r7, #48]	; 0x30
 8003986:	4649      	mov	r1, r9
 8003988:	414b      	adcs	r3, r1
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003998:	4659      	mov	r1, fp
 800399a:	00cb      	lsls	r3, r1, #3
 800399c:	4651      	mov	r1, sl
 800399e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a2:	4651      	mov	r1, sl
 80039a4:	00ca      	lsls	r2, r1, #3
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	4642      	mov	r2, r8
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b4:	464b      	mov	r3, r9
 80039b6:	460a      	mov	r2, r1
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039d4:	460b      	mov	r3, r1
 80039d6:	18db      	adds	r3, r3, r3
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	4613      	mov	r3, r2
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039ea:	f7fc fd91 	bl	8000510 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <UART_SetConfig+0x2d4>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	; 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	3332      	adds	r3, #50	; 0x32
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <UART_SetConfig+0x2d4>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4422      	add	r2, r4
 8003a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a1c:	e105      	b.n	8003c2a <UART_SetConfig+0x4d6>
 8003a1e:	bf00      	nop
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40011400 	.word	0x40011400
 8003a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	6239      	str	r1, [r7, #32]
 8003a46:	415b      	adcs	r3, r3
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4e:	4641      	mov	r1, r8
 8003a50:	1854      	adds	r4, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0501 	adc.w	r5, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	00eb      	lsls	r3, r5, #3
 8003a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a66:	00e2      	lsls	r2, r4, #3
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	4643      	mov	r3, r8
 8003a6e:	18e3      	adds	r3, r4, r3
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a74:	464b      	mov	r3, r9
 8003a76:	eb45 0303 	adc.w	r3, r5, r3
 8003a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	008b      	lsls	r3, r1, #2
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	008a      	lsls	r2, r1, #2
 8003aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003aac:	f7fc fd30 	bl	8000510 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	011c      	lsls	r4, r3, #4
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	61b9      	str	r1, [r7, #24]
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6139      	str	r1, [r7, #16]
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b38:	4649      	mov	r1, r9
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b42:	4641      	mov	r1, r8
 8003b44:	008a      	lsls	r2, r1, #2
 8003b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b4a:	f7fc fce1 	bl	8000510 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003b54:	fba3 1302 	umull	r1, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2164      	movs	r1, #100	; 0x64
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	3332      	adds	r3, #50	; 0x32
 8003b66:	4a34      	ldr	r2, [pc, #208]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b72:	441c      	add	r4, r3
 8003b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b78:	2200      	movs	r2, #0
 8003b7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003b7c:	677a      	str	r2, [r7, #116]	; 0x74
 8003b7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b82:	4642      	mov	r2, r8
 8003b84:	464b      	mov	r3, r9
 8003b86:	1891      	adds	r1, r2, r2
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	415b      	adcs	r3, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b92:	4641      	mov	r1, r8
 8003b94:	1851      	adds	r1, r2, r1
 8003b96:	6039      	str	r1, [r7, #0]
 8003b98:	4649      	mov	r1, r9
 8003b9a:	414b      	adcs	r3, r1
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003baa:	4659      	mov	r1, fp
 8003bac:	00cb      	lsls	r3, r1, #3
 8003bae:	4651      	mov	r1, sl
 8003bb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	00ca      	lsls	r2, r1, #3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	189b      	adds	r3, r3, r2
 8003bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	460a      	mov	r2, r1
 8003bc8:	eb42 0303 	adc.w	r3, r2, r3
 8003bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd8:	667a      	str	r2, [r7, #100]	; 0x64
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003be6:	4649      	mov	r1, r9
 8003be8:	008b      	lsls	r3, r1, #2
 8003bea:	4641      	mov	r1, r8
 8003bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	008a      	lsls	r2, r1, #2
 8003bf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bf8:	f7fc fc8a 	bl	8000510 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003c02:	fba3 1302 	umull	r1, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2164      	movs	r1, #100	; 0x64
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4422      	add	r2, r4
 8003c28:	609a      	str	r2, [r3, #8]
}
 8003c2a:	bf00      	nop
 8003c2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c30:	46bd      	mov	sp, r7
 8003c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c36:	bf00      	nop
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	f107 001c 	add.w	r0, r7, #28
 8003c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d122      	bne.n	8003c9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d105      	bne.n	8003c8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 faa2 	bl	80041d8 <USB_CoreReset>
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
 8003c98:	e01a      	b.n	8003cd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa96 	bl	80041d8 <USB_CoreReset>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cc2:	e005      	b.n	8003cd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10b      	bne.n	8003cee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f043 0206 	orr.w	r2, r3, #6
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cfa:	b004      	add	sp, #16
 8003cfc:	4770      	bx	lr

08003cfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 0201 	bic.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d115      	bne.n	8003d6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f7fe f91a 	bl	8001f88 <HAL_Delay>
      ms++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa2e 	bl	80041bc <USB_GetMode>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d01e      	beq.n	8003da4 <USB_SetCurrentMode+0x84>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b31      	cmp	r3, #49	; 0x31
 8003d6a:	d9f0      	bls.n	8003d4e <USB_SetCurrentMode+0x2e>
 8003d6c:	e01a      	b.n	8003da4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d115      	bne.n	8003da0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d80:	2001      	movs	r0, #1
 8003d82:	f7fe f901 	bl	8001f88 <HAL_Delay>
      ms++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa15 	bl	80041bc <USB_GetMode>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <USB_SetCurrentMode+0x84>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b31      	cmp	r3, #49	; 0x31
 8003d9c:	d9f0      	bls.n	8003d80 <USB_SetCurrentMode+0x60>
 8003d9e:	e001      	b.n	8003da4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e005      	b.n	8003db0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b32      	cmp	r3, #50	; 0x32
 8003da8:	d101      	bne.n	8003dae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003db8:	b084      	sub	sp, #16
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	e009      	b.n	8003dec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	3340      	adds	r3, #64	; 0x40
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	2200      	movs	r2, #0
 8003de4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	3301      	adds	r3, #1
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b0e      	cmp	r3, #14
 8003df0:	d9f2      	bls.n	8003dd8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11c      	bne.n	8003e32 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e06:	f043 0302 	orr.w	r3, r3, #2
 8003e0a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e30:	e00b      	b.n	8003e4a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e50:	461a      	mov	r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	461a      	mov	r2, r3
 8003e66:	680b      	ldr	r3, [r1, #0]
 8003e68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10c      	bne.n	8003e8a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d104      	bne.n	8003e80 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e76:	2100      	movs	r1, #0
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f965 	bl	8004148 <USB_SetDevSpeed>
 8003e7e:	e008      	b.n	8003e92 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e80:	2101      	movs	r1, #1
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f960 	bl	8004148 <USB_SetDevSpeed>
 8003e88:	e003      	b.n	8003e92 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f95b 	bl	8004148 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e92:	2110      	movs	r1, #16
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f8f3 	bl	8004080 <USB_FlushTxFifo>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f91f 	bl	80040e8 <USB_FlushRxFifo>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e043      	b.n	8003f66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef4:	d118      	bne.n	8003f28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	e013      	b.n	8003f3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e008      	b.n	8003f3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	461a      	mov	r2, r3
 8003f36:	2300      	movs	r3, #0
 8003f38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	461a      	mov	r2, r3
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3301      	adds	r3, #1
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3b7      	bcc.n	8003ede <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	e043      	b.n	8003ffc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f8a:	d118      	bne.n	8003fbe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e013      	b.n	8003fd0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e008      	b.n	8003fd0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2300      	movs	r3, #0
 8003fce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	429a      	cmp	r2, r3
 8004002:	d3b7      	bcc.n	8003f74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004016:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004024:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f043 0210 	orr.w	r2, r3, #16
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <USB_DevInit+0x2c4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f043 0208 	orr.w	r2, r3, #8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d107      	bne.n	800406c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800406c:	7dfb      	ldrb	r3, [r7, #23]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004078:	b004      	add	sp, #16
 800407a:	4770      	bx	lr
 800407c:	803c3800 	.word	0x803c3800

08004080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <USB_FlushTxFifo+0x64>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e01b      	b.n	80040d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	daf2      	bge.n	800408e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	019b      	lsls	r3, r3, #6
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <USB_FlushTxFifo+0x64>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e006      	b.n	80040d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d0f0      	beq.n	80040b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	00030d40 	.word	0x00030d40

080040e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a11      	ldr	r2, [pc, #68]	; (8004144 <USB_FlushRxFifo+0x5c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e018      	b.n	8004138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	daf2      	bge.n	80040f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2210      	movs	r2, #16
 8004116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a08      	ldr	r2, [pc, #32]	; (8004144 <USB_FlushRxFifo+0x5c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e006      	b.n	8004138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b10      	cmp	r3, #16
 8004134:	d0f0      	beq.n	8004118 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	00030d40 	.word	0x00030d40

08004148 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004194:	f023 0303 	bic.w	r3, r3, #3
 8004198:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0301 	and.w	r3, r3, #1
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a13      	ldr	r2, [pc, #76]	; (800423c <USB_CoreReset+0x64>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e01b      	b.n	800422e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	daf2      	bge.n	80041e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3301      	adds	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <USB_CoreReset+0x64>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e006      	b.n	800422e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d0f0      	beq.n	800420e <USB_CoreReset+0x36>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	00030d40 	.word	0x00030d40

08004240 <__errno>:
 8004240:	4b01      	ldr	r3, [pc, #4]	; (8004248 <__errno+0x8>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000000c 	.word	0x2000000c

0800424c <__libc_init_array>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	4d0d      	ldr	r5, [pc, #52]	; (8004284 <__libc_init_array+0x38>)
 8004250:	4c0d      	ldr	r4, [pc, #52]	; (8004288 <__libc_init_array+0x3c>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	2600      	movs	r6, #0
 8004258:	42a6      	cmp	r6, r4
 800425a:	d109      	bne.n	8004270 <__libc_init_array+0x24>
 800425c:	4d0b      	ldr	r5, [pc, #44]	; (800428c <__libc_init_array+0x40>)
 800425e:	4c0c      	ldr	r4, [pc, #48]	; (8004290 <__libc_init_array+0x44>)
 8004260:	f001 f824 	bl	80052ac <_init>
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	2600      	movs	r6, #0
 800426a:	42a6      	cmp	r6, r4
 800426c:	d105      	bne.n	800427a <__libc_init_array+0x2e>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f855 3b04 	ldr.w	r3, [r5], #4
 8004274:	4798      	blx	r3
 8004276:	3601      	adds	r6, #1
 8004278:	e7ee      	b.n	8004258 <__libc_init_array+0xc>
 800427a:	f855 3b04 	ldr.w	r3, [r5], #4
 800427e:	4798      	blx	r3
 8004280:	3601      	adds	r6, #1
 8004282:	e7f2      	b.n	800426a <__libc_init_array+0x1e>
 8004284:	08005390 	.word	0x08005390
 8004288:	08005390 	.word	0x08005390
 800428c:	08005390 	.word	0x08005390
 8004290:	08005394 	.word	0x08005394

08004294 <memset>:
 8004294:	4402      	add	r2, r0
 8004296:	4603      	mov	r3, r0
 8004298:	4293      	cmp	r3, r2
 800429a:	d100      	bne.n	800429e <memset+0xa>
 800429c:	4770      	bx	lr
 800429e:	f803 1b01 	strb.w	r1, [r3], #1
 80042a2:	e7f9      	b.n	8004298 <memset+0x4>

080042a4 <iprintf>:
 80042a4:	b40f      	push	{r0, r1, r2, r3}
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <iprintf+0x2c>)
 80042a8:	b513      	push	{r0, r1, r4, lr}
 80042aa:	681c      	ldr	r4, [r3, #0]
 80042ac:	b124      	cbz	r4, 80042b8 <iprintf+0x14>
 80042ae:	69a3      	ldr	r3, [r4, #24]
 80042b0:	b913      	cbnz	r3, 80042b8 <iprintf+0x14>
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 fa5e 	bl	8004774 <__sinit>
 80042b8:	ab05      	add	r3, sp, #20
 80042ba:	9a04      	ldr	r2, [sp, #16]
 80042bc:	68a1      	ldr	r1, [r4, #8]
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 fc67 	bl	8004b94 <_vfiprintf_r>
 80042c6:	b002      	add	sp, #8
 80042c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042cc:	b004      	add	sp, #16
 80042ce:	4770      	bx	lr
 80042d0:	2000000c 	.word	0x2000000c

080042d4 <_puts_r>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	460e      	mov	r6, r1
 80042d8:	4605      	mov	r5, r0
 80042da:	b118      	cbz	r0, 80042e4 <_puts_r+0x10>
 80042dc:	6983      	ldr	r3, [r0, #24]
 80042de:	b90b      	cbnz	r3, 80042e4 <_puts_r+0x10>
 80042e0:	f000 fa48 	bl	8004774 <__sinit>
 80042e4:	69ab      	ldr	r3, [r5, #24]
 80042e6:	68ac      	ldr	r4, [r5, #8]
 80042e8:	b913      	cbnz	r3, 80042f0 <_puts_r+0x1c>
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 fa42 	bl	8004774 <__sinit>
 80042f0:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <_puts_r+0xd0>)
 80042f2:	429c      	cmp	r4, r3
 80042f4:	d120      	bne.n	8004338 <_puts_r+0x64>
 80042f6:	686c      	ldr	r4, [r5, #4]
 80042f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042fa:	07db      	lsls	r3, r3, #31
 80042fc:	d405      	bmi.n	800430a <_puts_r+0x36>
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	0598      	lsls	r0, r3, #22
 8004302:	d402      	bmi.n	800430a <_puts_r+0x36>
 8004304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004306:	f000 fad3 	bl	80048b0 <__retarget_lock_acquire_recursive>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	0719      	lsls	r1, r3, #28
 800430e:	d51d      	bpl.n	800434c <_puts_r+0x78>
 8004310:	6923      	ldr	r3, [r4, #16]
 8004312:	b1db      	cbz	r3, 800434c <_puts_r+0x78>
 8004314:	3e01      	subs	r6, #1
 8004316:	68a3      	ldr	r3, [r4, #8]
 8004318:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800431c:	3b01      	subs	r3, #1
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	bb39      	cbnz	r1, 8004372 <_puts_r+0x9e>
 8004322:	2b00      	cmp	r3, #0
 8004324:	da38      	bge.n	8004398 <_puts_r+0xc4>
 8004326:	4622      	mov	r2, r4
 8004328:	210a      	movs	r1, #10
 800432a:	4628      	mov	r0, r5
 800432c:	f000 f848 	bl	80043c0 <__swbuf_r>
 8004330:	3001      	adds	r0, #1
 8004332:	d011      	beq.n	8004358 <_puts_r+0x84>
 8004334:	250a      	movs	r5, #10
 8004336:	e011      	b.n	800435c <_puts_r+0x88>
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <_puts_r+0xd4>)
 800433a:	429c      	cmp	r4, r3
 800433c:	d101      	bne.n	8004342 <_puts_r+0x6e>
 800433e:	68ac      	ldr	r4, [r5, #8]
 8004340:	e7da      	b.n	80042f8 <_puts_r+0x24>
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <_puts_r+0xd8>)
 8004344:	429c      	cmp	r4, r3
 8004346:	bf08      	it	eq
 8004348:	68ec      	ldreq	r4, [r5, #12]
 800434a:	e7d5      	b.n	80042f8 <_puts_r+0x24>
 800434c:	4621      	mov	r1, r4
 800434e:	4628      	mov	r0, r5
 8004350:	f000 f888 	bl	8004464 <__swsetup_r>
 8004354:	2800      	cmp	r0, #0
 8004356:	d0dd      	beq.n	8004314 <_puts_r+0x40>
 8004358:	f04f 35ff 	mov.w	r5, #4294967295
 800435c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800435e:	07da      	lsls	r2, r3, #31
 8004360:	d405      	bmi.n	800436e <_puts_r+0x9a>
 8004362:	89a3      	ldrh	r3, [r4, #12]
 8004364:	059b      	lsls	r3, r3, #22
 8004366:	d402      	bmi.n	800436e <_puts_r+0x9a>
 8004368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800436a:	f000 faa2 	bl	80048b2 <__retarget_lock_release_recursive>
 800436e:	4628      	mov	r0, r5
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	2b00      	cmp	r3, #0
 8004374:	da04      	bge.n	8004380 <_puts_r+0xac>
 8004376:	69a2      	ldr	r2, [r4, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	dc06      	bgt.n	800438a <_puts_r+0xb6>
 800437c:	290a      	cmp	r1, #10
 800437e:	d004      	beq.n	800438a <_puts_r+0xb6>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	6022      	str	r2, [r4, #0]
 8004386:	7019      	strb	r1, [r3, #0]
 8004388:	e7c5      	b.n	8004316 <_puts_r+0x42>
 800438a:	4622      	mov	r2, r4
 800438c:	4628      	mov	r0, r5
 800438e:	f000 f817 	bl	80043c0 <__swbuf_r>
 8004392:	3001      	adds	r0, #1
 8004394:	d1bf      	bne.n	8004316 <_puts_r+0x42>
 8004396:	e7df      	b.n	8004358 <_puts_r+0x84>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	250a      	movs	r5, #10
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	6022      	str	r2, [r4, #0]
 80043a0:	701d      	strb	r5, [r3, #0]
 80043a2:	e7db      	b.n	800435c <_puts_r+0x88>
 80043a4:	08005314 	.word	0x08005314
 80043a8:	08005334 	.word	0x08005334
 80043ac:	080052f4 	.word	0x080052f4

080043b0 <puts>:
 80043b0:	4b02      	ldr	r3, [pc, #8]	; (80043bc <puts+0xc>)
 80043b2:	4601      	mov	r1, r0
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	f7ff bf8d 	b.w	80042d4 <_puts_r>
 80043ba:	bf00      	nop
 80043bc:	2000000c 	.word	0x2000000c

080043c0 <__swbuf_r>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	460e      	mov	r6, r1
 80043c4:	4614      	mov	r4, r2
 80043c6:	4605      	mov	r5, r0
 80043c8:	b118      	cbz	r0, 80043d2 <__swbuf_r+0x12>
 80043ca:	6983      	ldr	r3, [r0, #24]
 80043cc:	b90b      	cbnz	r3, 80043d2 <__swbuf_r+0x12>
 80043ce:	f000 f9d1 	bl	8004774 <__sinit>
 80043d2:	4b21      	ldr	r3, [pc, #132]	; (8004458 <__swbuf_r+0x98>)
 80043d4:	429c      	cmp	r4, r3
 80043d6:	d12b      	bne.n	8004430 <__swbuf_r+0x70>
 80043d8:	686c      	ldr	r4, [r5, #4]
 80043da:	69a3      	ldr	r3, [r4, #24]
 80043dc:	60a3      	str	r3, [r4, #8]
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	071a      	lsls	r2, r3, #28
 80043e2:	d52f      	bpl.n	8004444 <__swbuf_r+0x84>
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	b36b      	cbz	r3, 8004444 <__swbuf_r+0x84>
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	6820      	ldr	r0, [r4, #0]
 80043ec:	1ac0      	subs	r0, r0, r3
 80043ee:	6963      	ldr	r3, [r4, #20]
 80043f0:	b2f6      	uxtb	r6, r6
 80043f2:	4283      	cmp	r3, r0
 80043f4:	4637      	mov	r7, r6
 80043f6:	dc04      	bgt.n	8004402 <__swbuf_r+0x42>
 80043f8:	4621      	mov	r1, r4
 80043fa:	4628      	mov	r0, r5
 80043fc:	f000 f926 	bl	800464c <_fflush_r>
 8004400:	bb30      	cbnz	r0, 8004450 <__swbuf_r+0x90>
 8004402:	68a3      	ldr	r3, [r4, #8]
 8004404:	3b01      	subs	r3, #1
 8004406:	60a3      	str	r3, [r4, #8]
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	6022      	str	r2, [r4, #0]
 800440e:	701e      	strb	r6, [r3, #0]
 8004410:	6963      	ldr	r3, [r4, #20]
 8004412:	3001      	adds	r0, #1
 8004414:	4283      	cmp	r3, r0
 8004416:	d004      	beq.n	8004422 <__swbuf_r+0x62>
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	07db      	lsls	r3, r3, #31
 800441c:	d506      	bpl.n	800442c <__swbuf_r+0x6c>
 800441e:	2e0a      	cmp	r6, #10
 8004420:	d104      	bne.n	800442c <__swbuf_r+0x6c>
 8004422:	4621      	mov	r1, r4
 8004424:	4628      	mov	r0, r5
 8004426:	f000 f911 	bl	800464c <_fflush_r>
 800442a:	b988      	cbnz	r0, 8004450 <__swbuf_r+0x90>
 800442c:	4638      	mov	r0, r7
 800442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <__swbuf_r+0x9c>)
 8004432:	429c      	cmp	r4, r3
 8004434:	d101      	bne.n	800443a <__swbuf_r+0x7a>
 8004436:	68ac      	ldr	r4, [r5, #8]
 8004438:	e7cf      	b.n	80043da <__swbuf_r+0x1a>
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <__swbuf_r+0xa0>)
 800443c:	429c      	cmp	r4, r3
 800443e:	bf08      	it	eq
 8004440:	68ec      	ldreq	r4, [r5, #12]
 8004442:	e7ca      	b.n	80043da <__swbuf_r+0x1a>
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	f000 f80c 	bl	8004464 <__swsetup_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	d0cb      	beq.n	80043e8 <__swbuf_r+0x28>
 8004450:	f04f 37ff 	mov.w	r7, #4294967295
 8004454:	e7ea      	b.n	800442c <__swbuf_r+0x6c>
 8004456:	bf00      	nop
 8004458:	08005314 	.word	0x08005314
 800445c:	08005334 	.word	0x08005334
 8004460:	080052f4 	.word	0x080052f4

08004464 <__swsetup_r>:
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <__swsetup_r+0xcc>)
 8004466:	b570      	push	{r4, r5, r6, lr}
 8004468:	681d      	ldr	r5, [r3, #0]
 800446a:	4606      	mov	r6, r0
 800446c:	460c      	mov	r4, r1
 800446e:	b125      	cbz	r5, 800447a <__swsetup_r+0x16>
 8004470:	69ab      	ldr	r3, [r5, #24]
 8004472:	b913      	cbnz	r3, 800447a <__swsetup_r+0x16>
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f97d 	bl	8004774 <__sinit>
 800447a:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <__swsetup_r+0xd0>)
 800447c:	429c      	cmp	r4, r3
 800447e:	d10f      	bne.n	80044a0 <__swsetup_r+0x3c>
 8004480:	686c      	ldr	r4, [r5, #4]
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004488:	0719      	lsls	r1, r3, #28
 800448a:	d42c      	bmi.n	80044e6 <__swsetup_r+0x82>
 800448c:	06dd      	lsls	r5, r3, #27
 800448e:	d411      	bmi.n	80044b4 <__swsetup_r+0x50>
 8004490:	2309      	movs	r3, #9
 8004492:	6033      	str	r3, [r6, #0]
 8004494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	e03e      	b.n	800451e <__swsetup_r+0xba>
 80044a0:	4b25      	ldr	r3, [pc, #148]	; (8004538 <__swsetup_r+0xd4>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d101      	bne.n	80044aa <__swsetup_r+0x46>
 80044a6:	68ac      	ldr	r4, [r5, #8]
 80044a8:	e7eb      	b.n	8004482 <__swsetup_r+0x1e>
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <__swsetup_r+0xd8>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	bf08      	it	eq
 80044b0:	68ec      	ldreq	r4, [r5, #12]
 80044b2:	e7e6      	b.n	8004482 <__swsetup_r+0x1e>
 80044b4:	0758      	lsls	r0, r3, #29
 80044b6:	d512      	bpl.n	80044de <__swsetup_r+0x7a>
 80044b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ba:	b141      	cbz	r1, 80044ce <__swsetup_r+0x6a>
 80044bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044c0:	4299      	cmp	r1, r3
 80044c2:	d002      	beq.n	80044ca <__swsetup_r+0x66>
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 fa5b 	bl	8004980 <_free_r>
 80044ca:	2300      	movs	r3, #0
 80044cc:	6363      	str	r3, [r4, #52]	; 0x34
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	b94b      	cbnz	r3, 80044fe <__swsetup_r+0x9a>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f4:	d003      	beq.n	80044fe <__swsetup_r+0x9a>
 80044f6:	4621      	mov	r1, r4
 80044f8:	4630      	mov	r0, r6
 80044fa:	f000 fa01 	bl	8004900 <__smakebuf_r>
 80044fe:	89a0      	ldrh	r0, [r4, #12]
 8004500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004504:	f010 0301 	ands.w	r3, r0, #1
 8004508:	d00a      	beq.n	8004520 <__swsetup_r+0xbc>
 800450a:	2300      	movs	r3, #0
 800450c:	60a3      	str	r3, [r4, #8]
 800450e:	6963      	ldr	r3, [r4, #20]
 8004510:	425b      	negs	r3, r3
 8004512:	61a3      	str	r3, [r4, #24]
 8004514:	6923      	ldr	r3, [r4, #16]
 8004516:	b943      	cbnz	r3, 800452a <__swsetup_r+0xc6>
 8004518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800451c:	d1ba      	bne.n	8004494 <__swsetup_r+0x30>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	0781      	lsls	r1, r0, #30
 8004522:	bf58      	it	pl
 8004524:	6963      	ldrpl	r3, [r4, #20]
 8004526:	60a3      	str	r3, [r4, #8]
 8004528:	e7f4      	b.n	8004514 <__swsetup_r+0xb0>
 800452a:	2000      	movs	r0, #0
 800452c:	e7f7      	b.n	800451e <__swsetup_r+0xba>
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c
 8004534:	08005314 	.word	0x08005314
 8004538:	08005334 	.word	0x08005334
 800453c:	080052f4 	.word	0x080052f4

08004540 <__sflush_r>:
 8004540:	898a      	ldrh	r2, [r1, #12]
 8004542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004546:	4605      	mov	r5, r0
 8004548:	0710      	lsls	r0, r2, #28
 800454a:	460c      	mov	r4, r1
 800454c:	d458      	bmi.n	8004600 <__sflush_r+0xc0>
 800454e:	684b      	ldr	r3, [r1, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	dc05      	bgt.n	8004560 <__sflush_r+0x20>
 8004554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	dc02      	bgt.n	8004560 <__sflush_r+0x20>
 800455a:	2000      	movs	r0, #0
 800455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004562:	2e00      	cmp	r6, #0
 8004564:	d0f9      	beq.n	800455a <__sflush_r+0x1a>
 8004566:	2300      	movs	r3, #0
 8004568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800456c:	682f      	ldr	r7, [r5, #0]
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	d032      	beq.n	80045d8 <__sflush_r+0x98>
 8004572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	075a      	lsls	r2, r3, #29
 8004578:	d505      	bpl.n	8004586 <__sflush_r+0x46>
 800457a:	6863      	ldr	r3, [r4, #4]
 800457c:	1ac0      	subs	r0, r0, r3
 800457e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004580:	b10b      	cbz	r3, 8004586 <__sflush_r+0x46>
 8004582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004584:	1ac0      	subs	r0, r0, r3
 8004586:	2300      	movs	r3, #0
 8004588:	4602      	mov	r2, r0
 800458a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800458c:	6a21      	ldr	r1, [r4, #32]
 800458e:	4628      	mov	r0, r5
 8004590:	47b0      	blx	r6
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	d106      	bne.n	80045a6 <__sflush_r+0x66>
 8004598:	6829      	ldr	r1, [r5, #0]
 800459a:	291d      	cmp	r1, #29
 800459c:	d82c      	bhi.n	80045f8 <__sflush_r+0xb8>
 800459e:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <__sflush_r+0x108>)
 80045a0:	40ca      	lsrs	r2, r1
 80045a2:	07d6      	lsls	r6, r2, #31
 80045a4:	d528      	bpl.n	80045f8 <__sflush_r+0xb8>
 80045a6:	2200      	movs	r2, #0
 80045a8:	6062      	str	r2, [r4, #4]
 80045aa:	04d9      	lsls	r1, r3, #19
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	6022      	str	r2, [r4, #0]
 80045b0:	d504      	bpl.n	80045bc <__sflush_r+0x7c>
 80045b2:	1c42      	adds	r2, r0, #1
 80045b4:	d101      	bne.n	80045ba <__sflush_r+0x7a>
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	b903      	cbnz	r3, 80045bc <__sflush_r+0x7c>
 80045ba:	6560      	str	r0, [r4, #84]	; 0x54
 80045bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045be:	602f      	str	r7, [r5, #0]
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d0ca      	beq.n	800455a <__sflush_r+0x1a>
 80045c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045c8:	4299      	cmp	r1, r3
 80045ca:	d002      	beq.n	80045d2 <__sflush_r+0x92>
 80045cc:	4628      	mov	r0, r5
 80045ce:	f000 f9d7 	bl	8004980 <_free_r>
 80045d2:	2000      	movs	r0, #0
 80045d4:	6360      	str	r0, [r4, #52]	; 0x34
 80045d6:	e7c1      	b.n	800455c <__sflush_r+0x1c>
 80045d8:	6a21      	ldr	r1, [r4, #32]
 80045da:	2301      	movs	r3, #1
 80045dc:	4628      	mov	r0, r5
 80045de:	47b0      	blx	r6
 80045e0:	1c41      	adds	r1, r0, #1
 80045e2:	d1c7      	bne.n	8004574 <__sflush_r+0x34>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0c4      	beq.n	8004574 <__sflush_r+0x34>
 80045ea:	2b1d      	cmp	r3, #29
 80045ec:	d001      	beq.n	80045f2 <__sflush_r+0xb2>
 80045ee:	2b16      	cmp	r3, #22
 80045f0:	d101      	bne.n	80045f6 <__sflush_r+0xb6>
 80045f2:	602f      	str	r7, [r5, #0]
 80045f4:	e7b1      	b.n	800455a <__sflush_r+0x1a>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	e7ad      	b.n	800455c <__sflush_r+0x1c>
 8004600:	690f      	ldr	r7, [r1, #16]
 8004602:	2f00      	cmp	r7, #0
 8004604:	d0a9      	beq.n	800455a <__sflush_r+0x1a>
 8004606:	0793      	lsls	r3, r2, #30
 8004608:	680e      	ldr	r6, [r1, #0]
 800460a:	bf08      	it	eq
 800460c:	694b      	ldreq	r3, [r1, #20]
 800460e:	600f      	str	r7, [r1, #0]
 8004610:	bf18      	it	ne
 8004612:	2300      	movne	r3, #0
 8004614:	eba6 0807 	sub.w	r8, r6, r7
 8004618:	608b      	str	r3, [r1, #8]
 800461a:	f1b8 0f00 	cmp.w	r8, #0
 800461e:	dd9c      	ble.n	800455a <__sflush_r+0x1a>
 8004620:	6a21      	ldr	r1, [r4, #32]
 8004622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004624:	4643      	mov	r3, r8
 8004626:	463a      	mov	r2, r7
 8004628:	4628      	mov	r0, r5
 800462a:	47b0      	blx	r6
 800462c:	2800      	cmp	r0, #0
 800462e:	dc06      	bgt.n	800463e <__sflush_r+0xfe>
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	e78e      	b.n	800455c <__sflush_r+0x1c>
 800463e:	4407      	add	r7, r0
 8004640:	eba8 0800 	sub.w	r8, r8, r0
 8004644:	e7e9      	b.n	800461a <__sflush_r+0xda>
 8004646:	bf00      	nop
 8004648:	20400001 	.word	0x20400001

0800464c <_fflush_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	690b      	ldr	r3, [r1, #16]
 8004650:	4605      	mov	r5, r0
 8004652:	460c      	mov	r4, r1
 8004654:	b913      	cbnz	r3, 800465c <_fflush_r+0x10>
 8004656:	2500      	movs	r5, #0
 8004658:	4628      	mov	r0, r5
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	b118      	cbz	r0, 8004666 <_fflush_r+0x1a>
 800465e:	6983      	ldr	r3, [r0, #24]
 8004660:	b90b      	cbnz	r3, 8004666 <_fflush_r+0x1a>
 8004662:	f000 f887 	bl	8004774 <__sinit>
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <_fflush_r+0x6c>)
 8004668:	429c      	cmp	r4, r3
 800466a:	d11b      	bne.n	80046a4 <_fflush_r+0x58>
 800466c:	686c      	ldr	r4, [r5, #4]
 800466e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0ef      	beq.n	8004656 <_fflush_r+0xa>
 8004676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004678:	07d0      	lsls	r0, r2, #31
 800467a:	d404      	bmi.n	8004686 <_fflush_r+0x3a>
 800467c:	0599      	lsls	r1, r3, #22
 800467e:	d402      	bmi.n	8004686 <_fflush_r+0x3a>
 8004680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004682:	f000 f915 	bl	80048b0 <__retarget_lock_acquire_recursive>
 8004686:	4628      	mov	r0, r5
 8004688:	4621      	mov	r1, r4
 800468a:	f7ff ff59 	bl	8004540 <__sflush_r>
 800468e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004690:	07da      	lsls	r2, r3, #31
 8004692:	4605      	mov	r5, r0
 8004694:	d4e0      	bmi.n	8004658 <_fflush_r+0xc>
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	059b      	lsls	r3, r3, #22
 800469a:	d4dd      	bmi.n	8004658 <_fflush_r+0xc>
 800469c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800469e:	f000 f908 	bl	80048b2 <__retarget_lock_release_recursive>
 80046a2:	e7d9      	b.n	8004658 <_fflush_r+0xc>
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <_fflush_r+0x70>)
 80046a6:	429c      	cmp	r4, r3
 80046a8:	d101      	bne.n	80046ae <_fflush_r+0x62>
 80046aa:	68ac      	ldr	r4, [r5, #8]
 80046ac:	e7df      	b.n	800466e <_fflush_r+0x22>
 80046ae:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <_fflush_r+0x74>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	bf08      	it	eq
 80046b4:	68ec      	ldreq	r4, [r5, #12]
 80046b6:	e7da      	b.n	800466e <_fflush_r+0x22>
 80046b8:	08005314 	.word	0x08005314
 80046bc:	08005334 	.word	0x08005334
 80046c0:	080052f4 	.word	0x080052f4

080046c4 <std>:
 80046c4:	2300      	movs	r3, #0
 80046c6:	b510      	push	{r4, lr}
 80046c8:	4604      	mov	r4, r0
 80046ca:	e9c0 3300 	strd	r3, r3, [r0]
 80046ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046d2:	6083      	str	r3, [r0, #8]
 80046d4:	8181      	strh	r1, [r0, #12]
 80046d6:	6643      	str	r3, [r0, #100]	; 0x64
 80046d8:	81c2      	strh	r2, [r0, #14]
 80046da:	6183      	str	r3, [r0, #24]
 80046dc:	4619      	mov	r1, r3
 80046de:	2208      	movs	r2, #8
 80046e0:	305c      	adds	r0, #92	; 0x5c
 80046e2:	f7ff fdd7 	bl	8004294 <memset>
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <std+0x38>)
 80046e8:	6263      	str	r3, [r4, #36]	; 0x24
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <std+0x3c>)
 80046ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <std+0x40>)
 80046f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <std+0x44>)
 80046f4:	6224      	str	r4, [r4, #32]
 80046f6:	6323      	str	r3, [r4, #48]	; 0x30
 80046f8:	bd10      	pop	{r4, pc}
 80046fa:	bf00      	nop
 80046fc:	0800513d 	.word	0x0800513d
 8004700:	0800515f 	.word	0x0800515f
 8004704:	08005197 	.word	0x08005197
 8004708:	080051bb 	.word	0x080051bb

0800470c <_cleanup_r>:
 800470c:	4901      	ldr	r1, [pc, #4]	; (8004714 <_cleanup_r+0x8>)
 800470e:	f000 b8af 	b.w	8004870 <_fwalk_reent>
 8004712:	bf00      	nop
 8004714:	0800464d 	.word	0x0800464d

08004718 <__sfmoreglue>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	2268      	movs	r2, #104	; 0x68
 800471c:	1e4d      	subs	r5, r1, #1
 800471e:	4355      	muls	r5, r2
 8004720:	460e      	mov	r6, r1
 8004722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004726:	f000 f997 	bl	8004a58 <_malloc_r>
 800472a:	4604      	mov	r4, r0
 800472c:	b140      	cbz	r0, 8004740 <__sfmoreglue+0x28>
 800472e:	2100      	movs	r1, #0
 8004730:	e9c0 1600 	strd	r1, r6, [r0]
 8004734:	300c      	adds	r0, #12
 8004736:	60a0      	str	r0, [r4, #8]
 8004738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800473c:	f7ff fdaa 	bl	8004294 <memset>
 8004740:	4620      	mov	r0, r4
 8004742:	bd70      	pop	{r4, r5, r6, pc}

08004744 <__sfp_lock_acquire>:
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <__sfp_lock_acquire+0x8>)
 8004746:	f000 b8b3 	b.w	80048b0 <__retarget_lock_acquire_recursive>
 800474a:	bf00      	nop
 800474c:	20000815 	.word	0x20000815

08004750 <__sfp_lock_release>:
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <__sfp_lock_release+0x8>)
 8004752:	f000 b8ae 	b.w	80048b2 <__retarget_lock_release_recursive>
 8004756:	bf00      	nop
 8004758:	20000815 	.word	0x20000815

0800475c <__sinit_lock_acquire>:
 800475c:	4801      	ldr	r0, [pc, #4]	; (8004764 <__sinit_lock_acquire+0x8>)
 800475e:	f000 b8a7 	b.w	80048b0 <__retarget_lock_acquire_recursive>
 8004762:	bf00      	nop
 8004764:	20000816 	.word	0x20000816

08004768 <__sinit_lock_release>:
 8004768:	4801      	ldr	r0, [pc, #4]	; (8004770 <__sinit_lock_release+0x8>)
 800476a:	f000 b8a2 	b.w	80048b2 <__retarget_lock_release_recursive>
 800476e:	bf00      	nop
 8004770:	20000816 	.word	0x20000816

08004774 <__sinit>:
 8004774:	b510      	push	{r4, lr}
 8004776:	4604      	mov	r4, r0
 8004778:	f7ff fff0 	bl	800475c <__sinit_lock_acquire>
 800477c:	69a3      	ldr	r3, [r4, #24]
 800477e:	b11b      	cbz	r3, 8004788 <__sinit+0x14>
 8004780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004784:	f7ff bff0 	b.w	8004768 <__sinit_lock_release>
 8004788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800478c:	6523      	str	r3, [r4, #80]	; 0x50
 800478e:	4b13      	ldr	r3, [pc, #76]	; (80047dc <__sinit+0x68>)
 8004790:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <__sinit+0x6c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	62a2      	str	r2, [r4, #40]	; 0x28
 8004796:	42a3      	cmp	r3, r4
 8004798:	bf04      	itt	eq
 800479a:	2301      	moveq	r3, #1
 800479c:	61a3      	streq	r3, [r4, #24]
 800479e:	4620      	mov	r0, r4
 80047a0:	f000 f820 	bl	80047e4 <__sfp>
 80047a4:	6060      	str	r0, [r4, #4]
 80047a6:	4620      	mov	r0, r4
 80047a8:	f000 f81c 	bl	80047e4 <__sfp>
 80047ac:	60a0      	str	r0, [r4, #8]
 80047ae:	4620      	mov	r0, r4
 80047b0:	f000 f818 	bl	80047e4 <__sfp>
 80047b4:	2200      	movs	r2, #0
 80047b6:	60e0      	str	r0, [r4, #12]
 80047b8:	2104      	movs	r1, #4
 80047ba:	6860      	ldr	r0, [r4, #4]
 80047bc:	f7ff ff82 	bl	80046c4 <std>
 80047c0:	68a0      	ldr	r0, [r4, #8]
 80047c2:	2201      	movs	r2, #1
 80047c4:	2109      	movs	r1, #9
 80047c6:	f7ff ff7d 	bl	80046c4 <std>
 80047ca:	68e0      	ldr	r0, [r4, #12]
 80047cc:	2202      	movs	r2, #2
 80047ce:	2112      	movs	r1, #18
 80047d0:	f7ff ff78 	bl	80046c4 <std>
 80047d4:	2301      	movs	r3, #1
 80047d6:	61a3      	str	r3, [r4, #24]
 80047d8:	e7d2      	b.n	8004780 <__sinit+0xc>
 80047da:	bf00      	nop
 80047dc:	080052f0 	.word	0x080052f0
 80047e0:	0800470d 	.word	0x0800470d

080047e4 <__sfp>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	4607      	mov	r7, r0
 80047e8:	f7ff ffac 	bl	8004744 <__sfp_lock_acquire>
 80047ec:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <__sfp+0x84>)
 80047ee:	681e      	ldr	r6, [r3, #0]
 80047f0:	69b3      	ldr	r3, [r6, #24]
 80047f2:	b913      	cbnz	r3, 80047fa <__sfp+0x16>
 80047f4:	4630      	mov	r0, r6
 80047f6:	f7ff ffbd 	bl	8004774 <__sinit>
 80047fa:	3648      	adds	r6, #72	; 0x48
 80047fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004800:	3b01      	subs	r3, #1
 8004802:	d503      	bpl.n	800480c <__sfp+0x28>
 8004804:	6833      	ldr	r3, [r6, #0]
 8004806:	b30b      	cbz	r3, 800484c <__sfp+0x68>
 8004808:	6836      	ldr	r6, [r6, #0]
 800480a:	e7f7      	b.n	80047fc <__sfp+0x18>
 800480c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004810:	b9d5      	cbnz	r5, 8004848 <__sfp+0x64>
 8004812:	4b16      	ldr	r3, [pc, #88]	; (800486c <__sfp+0x88>)
 8004814:	60e3      	str	r3, [r4, #12]
 8004816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800481a:	6665      	str	r5, [r4, #100]	; 0x64
 800481c:	f000 f847 	bl	80048ae <__retarget_lock_init_recursive>
 8004820:	f7ff ff96 	bl	8004750 <__sfp_lock_release>
 8004824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800482c:	6025      	str	r5, [r4, #0]
 800482e:	61a5      	str	r5, [r4, #24]
 8004830:	2208      	movs	r2, #8
 8004832:	4629      	mov	r1, r5
 8004834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004838:	f7ff fd2c 	bl	8004294 <memset>
 800483c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004844:	4620      	mov	r0, r4
 8004846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004848:	3468      	adds	r4, #104	; 0x68
 800484a:	e7d9      	b.n	8004800 <__sfp+0x1c>
 800484c:	2104      	movs	r1, #4
 800484e:	4638      	mov	r0, r7
 8004850:	f7ff ff62 	bl	8004718 <__sfmoreglue>
 8004854:	4604      	mov	r4, r0
 8004856:	6030      	str	r0, [r6, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	d1d5      	bne.n	8004808 <__sfp+0x24>
 800485c:	f7ff ff78 	bl	8004750 <__sfp_lock_release>
 8004860:	230c      	movs	r3, #12
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	e7ee      	b.n	8004844 <__sfp+0x60>
 8004866:	bf00      	nop
 8004868:	080052f0 	.word	0x080052f0
 800486c:	ffff0001 	.word	0xffff0001

08004870 <_fwalk_reent>:
 8004870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004874:	4606      	mov	r6, r0
 8004876:	4688      	mov	r8, r1
 8004878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800487c:	2700      	movs	r7, #0
 800487e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004882:	f1b9 0901 	subs.w	r9, r9, #1
 8004886:	d505      	bpl.n	8004894 <_fwalk_reent+0x24>
 8004888:	6824      	ldr	r4, [r4, #0]
 800488a:	2c00      	cmp	r4, #0
 800488c:	d1f7      	bne.n	800487e <_fwalk_reent+0xe>
 800488e:	4638      	mov	r0, r7
 8004890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004894:	89ab      	ldrh	r3, [r5, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d907      	bls.n	80048aa <_fwalk_reent+0x3a>
 800489a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800489e:	3301      	adds	r3, #1
 80048a0:	d003      	beq.n	80048aa <_fwalk_reent+0x3a>
 80048a2:	4629      	mov	r1, r5
 80048a4:	4630      	mov	r0, r6
 80048a6:	47c0      	blx	r8
 80048a8:	4307      	orrs	r7, r0
 80048aa:	3568      	adds	r5, #104	; 0x68
 80048ac:	e7e9      	b.n	8004882 <_fwalk_reent+0x12>

080048ae <__retarget_lock_init_recursive>:
 80048ae:	4770      	bx	lr

080048b0 <__retarget_lock_acquire_recursive>:
 80048b0:	4770      	bx	lr

080048b2 <__retarget_lock_release_recursive>:
 80048b2:	4770      	bx	lr

080048b4 <__swhatbuf_r>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	460e      	mov	r6, r1
 80048b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048bc:	2900      	cmp	r1, #0
 80048be:	b096      	sub	sp, #88	; 0x58
 80048c0:	4614      	mov	r4, r2
 80048c2:	461d      	mov	r5, r3
 80048c4:	da08      	bge.n	80048d8 <__swhatbuf_r+0x24>
 80048c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	602a      	str	r2, [r5, #0]
 80048ce:	061a      	lsls	r2, r3, #24
 80048d0:	d410      	bmi.n	80048f4 <__swhatbuf_r+0x40>
 80048d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d6:	e00e      	b.n	80048f6 <__swhatbuf_r+0x42>
 80048d8:	466a      	mov	r2, sp
 80048da:	f000 fc95 	bl	8005208 <_fstat_r>
 80048de:	2800      	cmp	r0, #0
 80048e0:	dbf1      	blt.n	80048c6 <__swhatbuf_r+0x12>
 80048e2:	9a01      	ldr	r2, [sp, #4]
 80048e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80048e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80048ec:	425a      	negs	r2, r3
 80048ee:	415a      	adcs	r2, r3
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	e7ee      	b.n	80048d2 <__swhatbuf_r+0x1e>
 80048f4:	2340      	movs	r3, #64	; 0x40
 80048f6:	2000      	movs	r0, #0
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	b016      	add	sp, #88	; 0x58
 80048fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004900 <__smakebuf_r>:
 8004900:	898b      	ldrh	r3, [r1, #12]
 8004902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004904:	079d      	lsls	r5, r3, #30
 8004906:	4606      	mov	r6, r0
 8004908:	460c      	mov	r4, r1
 800490a:	d507      	bpl.n	800491c <__smakebuf_r+0x1c>
 800490c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	2301      	movs	r3, #1
 8004916:	6163      	str	r3, [r4, #20]
 8004918:	b002      	add	sp, #8
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	ab01      	add	r3, sp, #4
 800491e:	466a      	mov	r2, sp
 8004920:	f7ff ffc8 	bl	80048b4 <__swhatbuf_r>
 8004924:	9900      	ldr	r1, [sp, #0]
 8004926:	4605      	mov	r5, r0
 8004928:	4630      	mov	r0, r6
 800492a:	f000 f895 	bl	8004a58 <_malloc_r>
 800492e:	b948      	cbnz	r0, 8004944 <__smakebuf_r+0x44>
 8004930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004934:	059a      	lsls	r2, r3, #22
 8004936:	d4ef      	bmi.n	8004918 <__smakebuf_r+0x18>
 8004938:	f023 0303 	bic.w	r3, r3, #3
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	e7e3      	b.n	800490c <__smakebuf_r+0xc>
 8004944:	4b0d      	ldr	r3, [pc, #52]	; (800497c <__smakebuf_r+0x7c>)
 8004946:	62b3      	str	r3, [r6, #40]	; 0x28
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	6020      	str	r0, [r4, #0]
 800494c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004950:	81a3      	strh	r3, [r4, #12]
 8004952:	9b00      	ldr	r3, [sp, #0]
 8004954:	6163      	str	r3, [r4, #20]
 8004956:	9b01      	ldr	r3, [sp, #4]
 8004958:	6120      	str	r0, [r4, #16]
 800495a:	b15b      	cbz	r3, 8004974 <__smakebuf_r+0x74>
 800495c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004960:	4630      	mov	r0, r6
 8004962:	f000 fc63 	bl	800522c <_isatty_r>
 8004966:	b128      	cbz	r0, 8004974 <__smakebuf_r+0x74>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	89a0      	ldrh	r0, [r4, #12]
 8004976:	4305      	orrs	r5, r0
 8004978:	81a5      	strh	r5, [r4, #12]
 800497a:	e7cd      	b.n	8004918 <__smakebuf_r+0x18>
 800497c:	0800470d 	.word	0x0800470d

08004980 <_free_r>:
 8004980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004982:	2900      	cmp	r1, #0
 8004984:	d044      	beq.n	8004a10 <_free_r+0x90>
 8004986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800498a:	9001      	str	r0, [sp, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f1a1 0404 	sub.w	r4, r1, #4
 8004992:	bfb8      	it	lt
 8004994:	18e4      	addlt	r4, r4, r3
 8004996:	f000 fc6b 	bl	8005270 <__malloc_lock>
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <_free_r+0x94>)
 800499c:	9801      	ldr	r0, [sp, #4]
 800499e:	6813      	ldr	r3, [r2, #0]
 80049a0:	b933      	cbnz	r3, 80049b0 <_free_r+0x30>
 80049a2:	6063      	str	r3, [r4, #4]
 80049a4:	6014      	str	r4, [r2, #0]
 80049a6:	b003      	add	sp, #12
 80049a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049ac:	f000 bc66 	b.w	800527c <__malloc_unlock>
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	d908      	bls.n	80049c6 <_free_r+0x46>
 80049b4:	6825      	ldr	r5, [r4, #0]
 80049b6:	1961      	adds	r1, r4, r5
 80049b8:	428b      	cmp	r3, r1
 80049ba:	bf01      	itttt	eq
 80049bc:	6819      	ldreq	r1, [r3, #0]
 80049be:	685b      	ldreq	r3, [r3, #4]
 80049c0:	1949      	addeq	r1, r1, r5
 80049c2:	6021      	streq	r1, [r4, #0]
 80049c4:	e7ed      	b.n	80049a2 <_free_r+0x22>
 80049c6:	461a      	mov	r2, r3
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	b10b      	cbz	r3, 80049d0 <_free_r+0x50>
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	d9fa      	bls.n	80049c6 <_free_r+0x46>
 80049d0:	6811      	ldr	r1, [r2, #0]
 80049d2:	1855      	adds	r5, r2, r1
 80049d4:	42a5      	cmp	r5, r4
 80049d6:	d10b      	bne.n	80049f0 <_free_r+0x70>
 80049d8:	6824      	ldr	r4, [r4, #0]
 80049da:	4421      	add	r1, r4
 80049dc:	1854      	adds	r4, r2, r1
 80049de:	42a3      	cmp	r3, r4
 80049e0:	6011      	str	r1, [r2, #0]
 80049e2:	d1e0      	bne.n	80049a6 <_free_r+0x26>
 80049e4:	681c      	ldr	r4, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	6053      	str	r3, [r2, #4]
 80049ea:	4421      	add	r1, r4
 80049ec:	6011      	str	r1, [r2, #0]
 80049ee:	e7da      	b.n	80049a6 <_free_r+0x26>
 80049f0:	d902      	bls.n	80049f8 <_free_r+0x78>
 80049f2:	230c      	movs	r3, #12
 80049f4:	6003      	str	r3, [r0, #0]
 80049f6:	e7d6      	b.n	80049a6 <_free_r+0x26>
 80049f8:	6825      	ldr	r5, [r4, #0]
 80049fa:	1961      	adds	r1, r4, r5
 80049fc:	428b      	cmp	r3, r1
 80049fe:	bf04      	itt	eq
 8004a00:	6819      	ldreq	r1, [r3, #0]
 8004a02:	685b      	ldreq	r3, [r3, #4]
 8004a04:	6063      	str	r3, [r4, #4]
 8004a06:	bf04      	itt	eq
 8004a08:	1949      	addeq	r1, r1, r5
 8004a0a:	6021      	streq	r1, [r4, #0]
 8004a0c:	6054      	str	r4, [r2, #4]
 8004a0e:	e7ca      	b.n	80049a6 <_free_r+0x26>
 8004a10:	b003      	add	sp, #12
 8004a12:	bd30      	pop	{r4, r5, pc}
 8004a14:	20000818 	.word	0x20000818

08004a18 <sbrk_aligned>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4e0e      	ldr	r6, [pc, #56]	; (8004a54 <sbrk_aligned+0x3c>)
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	6831      	ldr	r1, [r6, #0]
 8004a20:	4605      	mov	r5, r0
 8004a22:	b911      	cbnz	r1, 8004a2a <sbrk_aligned+0x12>
 8004a24:	f000 fb7a 	bl	800511c <_sbrk_r>
 8004a28:	6030      	str	r0, [r6, #0]
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 fb75 	bl	800511c <_sbrk_r>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	d00a      	beq.n	8004a4c <sbrk_aligned+0x34>
 8004a36:	1cc4      	adds	r4, r0, #3
 8004a38:	f024 0403 	bic.w	r4, r4, #3
 8004a3c:	42a0      	cmp	r0, r4
 8004a3e:	d007      	beq.n	8004a50 <sbrk_aligned+0x38>
 8004a40:	1a21      	subs	r1, r4, r0
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 fb6a 	bl	800511c <_sbrk_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d101      	bne.n	8004a50 <sbrk_aligned+0x38>
 8004a4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004a50:	4620      	mov	r0, r4
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	2000081c 	.word	0x2000081c

08004a58 <_malloc_r>:
 8004a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5c:	1ccd      	adds	r5, r1, #3
 8004a5e:	f025 0503 	bic.w	r5, r5, #3
 8004a62:	3508      	adds	r5, #8
 8004a64:	2d0c      	cmp	r5, #12
 8004a66:	bf38      	it	cc
 8004a68:	250c      	movcc	r5, #12
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	db01      	blt.n	8004a74 <_malloc_r+0x1c>
 8004a70:	42a9      	cmp	r1, r5
 8004a72:	d905      	bls.n	8004a80 <_malloc_r+0x28>
 8004a74:	230c      	movs	r3, #12
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	2600      	movs	r6, #0
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a80:	4e2e      	ldr	r6, [pc, #184]	; (8004b3c <_malloc_r+0xe4>)
 8004a82:	f000 fbf5 	bl	8005270 <__malloc_lock>
 8004a86:	6833      	ldr	r3, [r6, #0]
 8004a88:	461c      	mov	r4, r3
 8004a8a:	bb34      	cbnz	r4, 8004ada <_malloc_r+0x82>
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	4638      	mov	r0, r7
 8004a90:	f7ff ffc2 	bl	8004a18 <sbrk_aligned>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	4604      	mov	r4, r0
 8004a98:	d14d      	bne.n	8004b36 <_malloc_r+0xde>
 8004a9a:	6834      	ldr	r4, [r6, #0]
 8004a9c:	4626      	mov	r6, r4
 8004a9e:	2e00      	cmp	r6, #0
 8004aa0:	d140      	bne.n	8004b24 <_malloc_r+0xcc>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	eb04 0803 	add.w	r8, r4, r3
 8004aac:	f000 fb36 	bl	800511c <_sbrk_r>
 8004ab0:	4580      	cmp	r8, r0
 8004ab2:	d13a      	bne.n	8004b2a <_malloc_r+0xd2>
 8004ab4:	6821      	ldr	r1, [r4, #0]
 8004ab6:	3503      	adds	r5, #3
 8004ab8:	1a6d      	subs	r5, r5, r1
 8004aba:	f025 0503 	bic.w	r5, r5, #3
 8004abe:	3508      	adds	r5, #8
 8004ac0:	2d0c      	cmp	r5, #12
 8004ac2:	bf38      	it	cc
 8004ac4:	250c      	movcc	r5, #12
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4638      	mov	r0, r7
 8004aca:	f7ff ffa5 	bl	8004a18 <sbrk_aligned>
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d02b      	beq.n	8004b2a <_malloc_r+0xd2>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	442b      	add	r3, r5
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	e00e      	b.n	8004af8 <_malloc_r+0xa0>
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	1b52      	subs	r2, r2, r5
 8004ade:	d41e      	bmi.n	8004b1e <_malloc_r+0xc6>
 8004ae0:	2a0b      	cmp	r2, #11
 8004ae2:	d916      	bls.n	8004b12 <_malloc_r+0xba>
 8004ae4:	1961      	adds	r1, r4, r5
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	6025      	str	r5, [r4, #0]
 8004aea:	bf18      	it	ne
 8004aec:	6059      	strne	r1, [r3, #4]
 8004aee:	6863      	ldr	r3, [r4, #4]
 8004af0:	bf08      	it	eq
 8004af2:	6031      	streq	r1, [r6, #0]
 8004af4:	5162      	str	r2, [r4, r5]
 8004af6:	604b      	str	r3, [r1, #4]
 8004af8:	4638      	mov	r0, r7
 8004afa:	f104 060b 	add.w	r6, r4, #11
 8004afe:	f000 fbbd 	bl	800527c <__malloc_unlock>
 8004b02:	f026 0607 	bic.w	r6, r6, #7
 8004b06:	1d23      	adds	r3, r4, #4
 8004b08:	1af2      	subs	r2, r6, r3
 8004b0a:	d0b6      	beq.n	8004a7a <_malloc_r+0x22>
 8004b0c:	1b9b      	subs	r3, r3, r6
 8004b0e:	50a3      	str	r3, [r4, r2]
 8004b10:	e7b3      	b.n	8004a7a <_malloc_r+0x22>
 8004b12:	6862      	ldr	r2, [r4, #4]
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	bf0c      	ite	eq
 8004b18:	6032      	streq	r2, [r6, #0]
 8004b1a:	605a      	strne	r2, [r3, #4]
 8004b1c:	e7ec      	b.n	8004af8 <_malloc_r+0xa0>
 8004b1e:	4623      	mov	r3, r4
 8004b20:	6864      	ldr	r4, [r4, #4]
 8004b22:	e7b2      	b.n	8004a8a <_malloc_r+0x32>
 8004b24:	4634      	mov	r4, r6
 8004b26:	6876      	ldr	r6, [r6, #4]
 8004b28:	e7b9      	b.n	8004a9e <_malloc_r+0x46>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f000 fba4 	bl	800527c <__malloc_unlock>
 8004b34:	e7a1      	b.n	8004a7a <_malloc_r+0x22>
 8004b36:	6025      	str	r5, [r4, #0]
 8004b38:	e7de      	b.n	8004af8 <_malloc_r+0xa0>
 8004b3a:	bf00      	nop
 8004b3c:	20000818 	.word	0x20000818

08004b40 <__sfputc_r>:
 8004b40:	6893      	ldr	r3, [r2, #8]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	b410      	push	{r4}
 8004b48:	6093      	str	r3, [r2, #8]
 8004b4a:	da08      	bge.n	8004b5e <__sfputc_r+0x1e>
 8004b4c:	6994      	ldr	r4, [r2, #24]
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	db01      	blt.n	8004b56 <__sfputc_r+0x16>
 8004b52:	290a      	cmp	r1, #10
 8004b54:	d103      	bne.n	8004b5e <__sfputc_r+0x1e>
 8004b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b5a:	f7ff bc31 	b.w	80043c0 <__swbuf_r>
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	1c58      	adds	r0, r3, #1
 8004b62:	6010      	str	r0, [r2, #0]
 8004b64:	7019      	strb	r1, [r3, #0]
 8004b66:	4608      	mov	r0, r1
 8004b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <__sfputs_r>:
 8004b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b70:	4606      	mov	r6, r0
 8004b72:	460f      	mov	r7, r1
 8004b74:	4614      	mov	r4, r2
 8004b76:	18d5      	adds	r5, r2, r3
 8004b78:	42ac      	cmp	r4, r5
 8004b7a:	d101      	bne.n	8004b80 <__sfputs_r+0x12>
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e007      	b.n	8004b90 <__sfputs_r+0x22>
 8004b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b84:	463a      	mov	r2, r7
 8004b86:	4630      	mov	r0, r6
 8004b88:	f7ff ffda 	bl	8004b40 <__sfputc_r>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d1f3      	bne.n	8004b78 <__sfputs_r+0xa>
 8004b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b94 <_vfiprintf_r>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	460d      	mov	r5, r1
 8004b9a:	b09d      	sub	sp, #116	; 0x74
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	4698      	mov	r8, r3
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	b118      	cbz	r0, 8004bac <_vfiprintf_r+0x18>
 8004ba4:	6983      	ldr	r3, [r0, #24]
 8004ba6:	b90b      	cbnz	r3, 8004bac <_vfiprintf_r+0x18>
 8004ba8:	f7ff fde4 	bl	8004774 <__sinit>
 8004bac:	4b89      	ldr	r3, [pc, #548]	; (8004dd4 <_vfiprintf_r+0x240>)
 8004bae:	429d      	cmp	r5, r3
 8004bb0:	d11b      	bne.n	8004bea <_vfiprintf_r+0x56>
 8004bb2:	6875      	ldr	r5, [r6, #4]
 8004bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bb6:	07d9      	lsls	r1, r3, #31
 8004bb8:	d405      	bmi.n	8004bc6 <_vfiprintf_r+0x32>
 8004bba:	89ab      	ldrh	r3, [r5, #12]
 8004bbc:	059a      	lsls	r2, r3, #22
 8004bbe:	d402      	bmi.n	8004bc6 <_vfiprintf_r+0x32>
 8004bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bc2:	f7ff fe75 	bl	80048b0 <__retarget_lock_acquire_recursive>
 8004bc6:	89ab      	ldrh	r3, [r5, #12]
 8004bc8:	071b      	lsls	r3, r3, #28
 8004bca:	d501      	bpl.n	8004bd0 <_vfiprintf_r+0x3c>
 8004bcc:	692b      	ldr	r3, [r5, #16]
 8004bce:	b9eb      	cbnz	r3, 8004c0c <_vfiprintf_r+0x78>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f7ff fc46 	bl	8004464 <__swsetup_r>
 8004bd8:	b1c0      	cbz	r0, 8004c0c <_vfiprintf_r+0x78>
 8004bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bdc:	07dc      	lsls	r4, r3, #31
 8004bde:	d50e      	bpl.n	8004bfe <_vfiprintf_r+0x6a>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	b01d      	add	sp, #116	; 0x74
 8004be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bea:	4b7b      	ldr	r3, [pc, #492]	; (8004dd8 <_vfiprintf_r+0x244>)
 8004bec:	429d      	cmp	r5, r3
 8004bee:	d101      	bne.n	8004bf4 <_vfiprintf_r+0x60>
 8004bf0:	68b5      	ldr	r5, [r6, #8]
 8004bf2:	e7df      	b.n	8004bb4 <_vfiprintf_r+0x20>
 8004bf4:	4b79      	ldr	r3, [pc, #484]	; (8004ddc <_vfiprintf_r+0x248>)
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	bf08      	it	eq
 8004bfa:	68f5      	ldreq	r5, [r6, #12]
 8004bfc:	e7da      	b.n	8004bb4 <_vfiprintf_r+0x20>
 8004bfe:	89ab      	ldrh	r3, [r5, #12]
 8004c00:	0598      	lsls	r0, r3, #22
 8004c02:	d4ed      	bmi.n	8004be0 <_vfiprintf_r+0x4c>
 8004c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c06:	f7ff fe54 	bl	80048b2 <__retarget_lock_release_recursive>
 8004c0a:	e7e9      	b.n	8004be0 <_vfiprintf_r+0x4c>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c10:	2320      	movs	r3, #32
 8004c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c1a:	2330      	movs	r3, #48	; 0x30
 8004c1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004de0 <_vfiprintf_r+0x24c>
 8004c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c24:	f04f 0901 	mov.w	r9, #1
 8004c28:	4623      	mov	r3, r4
 8004c2a:	469a      	mov	sl, r3
 8004c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c30:	b10a      	cbz	r2, 8004c36 <_vfiprintf_r+0xa2>
 8004c32:	2a25      	cmp	r2, #37	; 0x25
 8004c34:	d1f9      	bne.n	8004c2a <_vfiprintf_r+0x96>
 8004c36:	ebba 0b04 	subs.w	fp, sl, r4
 8004c3a:	d00b      	beq.n	8004c54 <_vfiprintf_r+0xc0>
 8004c3c:	465b      	mov	r3, fp
 8004c3e:	4622      	mov	r2, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	4630      	mov	r0, r6
 8004c44:	f7ff ff93 	bl	8004b6e <__sfputs_r>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f000 80aa 	beq.w	8004da2 <_vfiprintf_r+0x20e>
 8004c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c50:	445a      	add	r2, fp
 8004c52:	9209      	str	r2, [sp, #36]	; 0x24
 8004c54:	f89a 3000 	ldrb.w	r3, [sl]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a2 	beq.w	8004da2 <_vfiprintf_r+0x20e>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c68:	f10a 0a01 	add.w	sl, sl, #1
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	9307      	str	r3, [sp, #28]
 8004c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c74:	931a      	str	r3, [sp, #104]	; 0x68
 8004c76:	4654      	mov	r4, sl
 8004c78:	2205      	movs	r2, #5
 8004c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7e:	4858      	ldr	r0, [pc, #352]	; (8004de0 <_vfiprintf_r+0x24c>)
 8004c80:	f7fb fbf6 	bl	8000470 <memchr>
 8004c84:	9a04      	ldr	r2, [sp, #16]
 8004c86:	b9d8      	cbnz	r0, 8004cc0 <_vfiprintf_r+0x12c>
 8004c88:	06d1      	lsls	r1, r2, #27
 8004c8a:	bf44      	itt	mi
 8004c8c:	2320      	movmi	r3, #32
 8004c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c92:	0713      	lsls	r3, r2, #28
 8004c94:	bf44      	itt	mi
 8004c96:	232b      	movmi	r3, #43	; 0x2b
 8004c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca2:	d015      	beq.n	8004cd0 <_vfiprintf_r+0x13c>
 8004ca4:	9a07      	ldr	r2, [sp, #28]
 8004ca6:	4654      	mov	r4, sl
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f04f 0c0a 	mov.w	ip, #10
 8004cae:	4621      	mov	r1, r4
 8004cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cb4:	3b30      	subs	r3, #48	; 0x30
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d94e      	bls.n	8004d58 <_vfiprintf_r+0x1c4>
 8004cba:	b1b0      	cbz	r0, 8004cea <_vfiprintf_r+0x156>
 8004cbc:	9207      	str	r2, [sp, #28]
 8004cbe:	e014      	b.n	8004cea <_vfiprintf_r+0x156>
 8004cc0:	eba0 0308 	sub.w	r3, r0, r8
 8004cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	9304      	str	r3, [sp, #16]
 8004ccc:	46a2      	mov	sl, r4
 8004cce:	e7d2      	b.n	8004c76 <_vfiprintf_r+0xe2>
 8004cd0:	9b03      	ldr	r3, [sp, #12]
 8004cd2:	1d19      	adds	r1, r3, #4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	9103      	str	r1, [sp, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bfbb      	ittet	lt
 8004cdc:	425b      	neglt	r3, r3
 8004cde:	f042 0202 	orrlt.w	r2, r2, #2
 8004ce2:	9307      	strge	r3, [sp, #28]
 8004ce4:	9307      	strlt	r3, [sp, #28]
 8004ce6:	bfb8      	it	lt
 8004ce8:	9204      	strlt	r2, [sp, #16]
 8004cea:	7823      	ldrb	r3, [r4, #0]
 8004cec:	2b2e      	cmp	r3, #46	; 0x2e
 8004cee:	d10c      	bne.n	8004d0a <_vfiprintf_r+0x176>
 8004cf0:	7863      	ldrb	r3, [r4, #1]
 8004cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf4:	d135      	bne.n	8004d62 <_vfiprintf_r+0x1ce>
 8004cf6:	9b03      	ldr	r3, [sp, #12]
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	9203      	str	r2, [sp, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bfb8      	it	lt
 8004d02:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d06:	3402      	adds	r4, #2
 8004d08:	9305      	str	r3, [sp, #20]
 8004d0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004df0 <_vfiprintf_r+0x25c>
 8004d0e:	7821      	ldrb	r1, [r4, #0]
 8004d10:	2203      	movs	r2, #3
 8004d12:	4650      	mov	r0, sl
 8004d14:	f7fb fbac 	bl	8000470 <memchr>
 8004d18:	b140      	cbz	r0, 8004d2c <_vfiprintf_r+0x198>
 8004d1a:	2340      	movs	r3, #64	; 0x40
 8004d1c:	eba0 000a 	sub.w	r0, r0, sl
 8004d20:	fa03 f000 	lsl.w	r0, r3, r0
 8004d24:	9b04      	ldr	r3, [sp, #16]
 8004d26:	4303      	orrs	r3, r0
 8004d28:	3401      	adds	r4, #1
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d30:	482c      	ldr	r0, [pc, #176]	; (8004de4 <_vfiprintf_r+0x250>)
 8004d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d36:	2206      	movs	r2, #6
 8004d38:	f7fb fb9a 	bl	8000470 <memchr>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d03f      	beq.n	8004dc0 <_vfiprintf_r+0x22c>
 8004d40:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <_vfiprintf_r+0x254>)
 8004d42:	bb1b      	cbnz	r3, 8004d8c <_vfiprintf_r+0x1f8>
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	3307      	adds	r3, #7
 8004d48:	f023 0307 	bic.w	r3, r3, #7
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	9303      	str	r3, [sp, #12]
 8004d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d52:	443b      	add	r3, r7
 8004d54:	9309      	str	r3, [sp, #36]	; 0x24
 8004d56:	e767      	b.n	8004c28 <_vfiprintf_r+0x94>
 8004d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	2001      	movs	r0, #1
 8004d60:	e7a5      	b.n	8004cae <_vfiprintf_r+0x11a>
 8004d62:	2300      	movs	r3, #0
 8004d64:	3401      	adds	r4, #1
 8004d66:	9305      	str	r3, [sp, #20]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f04f 0c0a 	mov.w	ip, #10
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d74:	3a30      	subs	r2, #48	; 0x30
 8004d76:	2a09      	cmp	r2, #9
 8004d78:	d903      	bls.n	8004d82 <_vfiprintf_r+0x1ee>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0c5      	beq.n	8004d0a <_vfiprintf_r+0x176>
 8004d7e:	9105      	str	r1, [sp, #20]
 8004d80:	e7c3      	b.n	8004d0a <_vfiprintf_r+0x176>
 8004d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d86:	4604      	mov	r4, r0
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e7f0      	b.n	8004d6e <_vfiprintf_r+0x1da>
 8004d8c:	ab03      	add	r3, sp, #12
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	462a      	mov	r2, r5
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <_vfiprintf_r+0x258>)
 8004d94:	a904      	add	r1, sp, #16
 8004d96:	4630      	mov	r0, r6
 8004d98:	f3af 8000 	nop.w
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	1c78      	adds	r0, r7, #1
 8004da0:	d1d6      	bne.n	8004d50 <_vfiprintf_r+0x1bc>
 8004da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004da4:	07d9      	lsls	r1, r3, #31
 8004da6:	d405      	bmi.n	8004db4 <_vfiprintf_r+0x220>
 8004da8:	89ab      	ldrh	r3, [r5, #12]
 8004daa:	059a      	lsls	r2, r3, #22
 8004dac:	d402      	bmi.n	8004db4 <_vfiprintf_r+0x220>
 8004dae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004db0:	f7ff fd7f 	bl	80048b2 <__retarget_lock_release_recursive>
 8004db4:	89ab      	ldrh	r3, [r5, #12]
 8004db6:	065b      	lsls	r3, r3, #25
 8004db8:	f53f af12 	bmi.w	8004be0 <_vfiprintf_r+0x4c>
 8004dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dbe:	e711      	b.n	8004be4 <_vfiprintf_r+0x50>
 8004dc0:	ab03      	add	r3, sp, #12
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	462a      	mov	r2, r5
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <_vfiprintf_r+0x258>)
 8004dc8:	a904      	add	r1, sp, #16
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f000 f880 	bl	8004ed0 <_printf_i>
 8004dd0:	e7e4      	b.n	8004d9c <_vfiprintf_r+0x208>
 8004dd2:	bf00      	nop
 8004dd4:	08005314 	.word	0x08005314
 8004dd8:	08005334 	.word	0x08005334
 8004ddc:	080052f4 	.word	0x080052f4
 8004de0:	08005354 	.word	0x08005354
 8004de4:	0800535e 	.word	0x0800535e
 8004de8:	00000000 	.word	0x00000000
 8004dec:	08004b6f 	.word	0x08004b6f
 8004df0:	0800535a 	.word	0x0800535a

08004df4 <_printf_common>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	4616      	mov	r6, r2
 8004dfa:	4699      	mov	r9, r3
 8004dfc:	688a      	ldr	r2, [r1, #8]
 8004dfe:	690b      	ldr	r3, [r1, #16]
 8004e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bfb8      	it	lt
 8004e08:	4613      	movlt	r3, r2
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e10:	4607      	mov	r7, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	b10a      	cbz	r2, 8004e1a <_printf_common+0x26>
 8004e16:	3301      	adds	r3, #1
 8004e18:	6033      	str	r3, [r6, #0]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	0699      	lsls	r1, r3, #26
 8004e1e:	bf42      	ittt	mi
 8004e20:	6833      	ldrmi	r3, [r6, #0]
 8004e22:	3302      	addmi	r3, #2
 8004e24:	6033      	strmi	r3, [r6, #0]
 8004e26:	6825      	ldr	r5, [r4, #0]
 8004e28:	f015 0506 	ands.w	r5, r5, #6
 8004e2c:	d106      	bne.n	8004e3c <_printf_common+0x48>
 8004e2e:	f104 0a19 	add.w	sl, r4, #25
 8004e32:	68e3      	ldr	r3, [r4, #12]
 8004e34:	6832      	ldr	r2, [r6, #0]
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	42ab      	cmp	r3, r5
 8004e3a:	dc26      	bgt.n	8004e8a <_printf_common+0x96>
 8004e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e40:	1e13      	subs	r3, r2, #0
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	bf18      	it	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	0692      	lsls	r2, r2, #26
 8004e4a:	d42b      	bmi.n	8004ea4 <_printf_common+0xb0>
 8004e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e50:	4649      	mov	r1, r9
 8004e52:	4638      	mov	r0, r7
 8004e54:	47c0      	blx	r8
 8004e56:	3001      	adds	r0, #1
 8004e58:	d01e      	beq.n	8004e98 <_printf_common+0xa4>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	68e5      	ldr	r5, [r4, #12]
 8004e5e:	6832      	ldr	r2, [r6, #0]
 8004e60:	f003 0306 	and.w	r3, r3, #6
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	bf08      	it	eq
 8004e68:	1aad      	subeq	r5, r5, r2
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	6922      	ldr	r2, [r4, #16]
 8004e6e:	bf0c      	ite	eq
 8004e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e74:	2500      	movne	r5, #0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	bfc4      	itt	gt
 8004e7a:	1a9b      	subgt	r3, r3, r2
 8004e7c:	18ed      	addgt	r5, r5, r3
 8004e7e:	2600      	movs	r6, #0
 8004e80:	341a      	adds	r4, #26
 8004e82:	42b5      	cmp	r5, r6
 8004e84:	d11a      	bne.n	8004ebc <_printf_common+0xc8>
 8004e86:	2000      	movs	r0, #0
 8004e88:	e008      	b.n	8004e9c <_printf_common+0xa8>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4638      	mov	r0, r7
 8004e92:	47c0      	blx	r8
 8004e94:	3001      	adds	r0, #1
 8004e96:	d103      	bne.n	8004ea0 <_printf_common+0xac>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea0:	3501      	adds	r5, #1
 8004ea2:	e7c6      	b.n	8004e32 <_printf_common+0x3e>
 8004ea4:	18e1      	adds	r1, r4, r3
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	2030      	movs	r0, #48	; 0x30
 8004eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eae:	4422      	add	r2, r4
 8004eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb8:	3302      	adds	r3, #2
 8004eba:	e7c7      	b.n	8004e4c <_printf_common+0x58>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c0      	blx	r8
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d0e6      	beq.n	8004e98 <_printf_common+0xa4>
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7d9      	b.n	8004e82 <_printf_common+0x8e>
	...

08004ed0 <_printf_i>:
 8004ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	7e0f      	ldrb	r7, [r1, #24]
 8004ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ed8:	2f78      	cmp	r7, #120	; 0x78
 8004eda:	4691      	mov	r9, r2
 8004edc:	4680      	mov	r8, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ee6:	d807      	bhi.n	8004ef8 <_printf_i+0x28>
 8004ee8:	2f62      	cmp	r7, #98	; 0x62
 8004eea:	d80a      	bhi.n	8004f02 <_printf_i+0x32>
 8004eec:	2f00      	cmp	r7, #0
 8004eee:	f000 80d8 	beq.w	80050a2 <_printf_i+0x1d2>
 8004ef2:	2f58      	cmp	r7, #88	; 0x58
 8004ef4:	f000 80a3 	beq.w	800503e <_printf_i+0x16e>
 8004ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f00:	e03a      	b.n	8004f78 <_printf_i+0xa8>
 8004f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f06:	2b15      	cmp	r3, #21
 8004f08:	d8f6      	bhi.n	8004ef8 <_printf_i+0x28>
 8004f0a:	a101      	add	r1, pc, #4	; (adr r1, 8004f10 <_printf_i+0x40>)
 8004f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004f7d 	.word	0x08004f7d
 8004f18:	08004ef9 	.word	0x08004ef9
 8004f1c:	08004ef9 	.word	0x08004ef9
 8004f20:	08004ef9 	.word	0x08004ef9
 8004f24:	08004ef9 	.word	0x08004ef9
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08004ef9 	.word	0x08004ef9
 8004f30:	08004ef9 	.word	0x08004ef9
 8004f34:	08004ef9 	.word	0x08004ef9
 8004f38:	08004ef9 	.word	0x08004ef9
 8004f3c:	08005089 	.word	0x08005089
 8004f40:	08004fad 	.word	0x08004fad
 8004f44:	0800506b 	.word	0x0800506b
 8004f48:	08004ef9 	.word	0x08004ef9
 8004f4c:	08004ef9 	.word	0x08004ef9
 8004f50:	080050ab 	.word	0x080050ab
 8004f54:	08004ef9 	.word	0x08004ef9
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004ef9 	.word	0x08004ef9
 8004f60:	08004ef9 	.word	0x08004ef9
 8004f64:	08005073 	.word	0x08005073
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	602a      	str	r2, [r5, #0]
 8004f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0a3      	b.n	80050c4 <_printf_i+0x1f4>
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	6829      	ldr	r1, [r5, #0]
 8004f80:	0606      	lsls	r6, r0, #24
 8004f82:	f101 0304 	add.w	r3, r1, #4
 8004f86:	d50a      	bpl.n	8004f9e <_printf_i+0xce>
 8004f88:	680e      	ldr	r6, [r1, #0]
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	2e00      	cmp	r6, #0
 8004f8e:	da03      	bge.n	8004f98 <_printf_i+0xc8>
 8004f90:	232d      	movs	r3, #45	; 0x2d
 8004f92:	4276      	negs	r6, r6
 8004f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f98:	485e      	ldr	r0, [pc, #376]	; (8005114 <_printf_i+0x244>)
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	e019      	b.n	8004fd2 <_printf_i+0x102>
 8004f9e:	680e      	ldr	r6, [r1, #0]
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fa6:	bf18      	it	ne
 8004fa8:	b236      	sxthne	r6, r6
 8004faa:	e7ef      	b.n	8004f8c <_printf_i+0xbc>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	6820      	ldr	r0, [r4, #0]
 8004fb0:	1d19      	adds	r1, r3, #4
 8004fb2:	6029      	str	r1, [r5, #0]
 8004fb4:	0601      	lsls	r1, r0, #24
 8004fb6:	d501      	bpl.n	8004fbc <_printf_i+0xec>
 8004fb8:	681e      	ldr	r6, [r3, #0]
 8004fba:	e002      	b.n	8004fc2 <_printf_i+0xf2>
 8004fbc:	0646      	lsls	r6, r0, #25
 8004fbe:	d5fb      	bpl.n	8004fb8 <_printf_i+0xe8>
 8004fc0:	881e      	ldrh	r6, [r3, #0]
 8004fc2:	4854      	ldr	r0, [pc, #336]	; (8005114 <_printf_i+0x244>)
 8004fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2308      	moveq	r3, #8
 8004fca:	230a      	movne	r3, #10
 8004fcc:	2100      	movs	r1, #0
 8004fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fd2:	6865      	ldr	r5, [r4, #4]
 8004fd4:	60a5      	str	r5, [r4, #8]
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	bfa2      	ittt	ge
 8004fda:	6821      	ldrge	r1, [r4, #0]
 8004fdc:	f021 0104 	bicge.w	r1, r1, #4
 8004fe0:	6021      	strge	r1, [r4, #0]
 8004fe2:	b90e      	cbnz	r6, 8004fe8 <_printf_i+0x118>
 8004fe4:	2d00      	cmp	r5, #0
 8004fe6:	d04d      	beq.n	8005084 <_printf_i+0x1b4>
 8004fe8:	4615      	mov	r5, r2
 8004fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fee:	fb03 6711 	mls	r7, r3, r1, r6
 8004ff2:	5dc7      	ldrb	r7, [r0, r7]
 8004ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ff8:	4637      	mov	r7, r6
 8004ffa:	42bb      	cmp	r3, r7
 8004ffc:	460e      	mov	r6, r1
 8004ffe:	d9f4      	bls.n	8004fea <_printf_i+0x11a>
 8005000:	2b08      	cmp	r3, #8
 8005002:	d10b      	bne.n	800501c <_printf_i+0x14c>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	07de      	lsls	r6, r3, #31
 8005008:	d508      	bpl.n	800501c <_printf_i+0x14c>
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	6861      	ldr	r1, [r4, #4]
 800500e:	4299      	cmp	r1, r3
 8005010:	bfde      	ittt	le
 8005012:	2330      	movle	r3, #48	; 0x30
 8005014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800501c:	1b52      	subs	r2, r2, r5
 800501e:	6122      	str	r2, [r4, #16]
 8005020:	f8cd a000 	str.w	sl, [sp]
 8005024:	464b      	mov	r3, r9
 8005026:	aa03      	add	r2, sp, #12
 8005028:	4621      	mov	r1, r4
 800502a:	4640      	mov	r0, r8
 800502c:	f7ff fee2 	bl	8004df4 <_printf_common>
 8005030:	3001      	adds	r0, #1
 8005032:	d14c      	bne.n	80050ce <_printf_i+0x1fe>
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	b004      	add	sp, #16
 800503a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503e:	4835      	ldr	r0, [pc, #212]	; (8005114 <_printf_i+0x244>)
 8005040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005044:	6829      	ldr	r1, [r5, #0]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	f851 6b04 	ldr.w	r6, [r1], #4
 800504c:	6029      	str	r1, [r5, #0]
 800504e:	061d      	lsls	r5, r3, #24
 8005050:	d514      	bpl.n	800507c <_printf_i+0x1ac>
 8005052:	07df      	lsls	r7, r3, #31
 8005054:	bf44      	itt	mi
 8005056:	f043 0320 	orrmi.w	r3, r3, #32
 800505a:	6023      	strmi	r3, [r4, #0]
 800505c:	b91e      	cbnz	r6, 8005066 <_printf_i+0x196>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	f023 0320 	bic.w	r3, r3, #32
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	2310      	movs	r3, #16
 8005068:	e7b0      	b.n	8004fcc <_printf_i+0xfc>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f043 0320 	orr.w	r3, r3, #32
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	2378      	movs	r3, #120	; 0x78
 8005074:	4828      	ldr	r0, [pc, #160]	; (8005118 <_printf_i+0x248>)
 8005076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800507a:	e7e3      	b.n	8005044 <_printf_i+0x174>
 800507c:	0659      	lsls	r1, r3, #25
 800507e:	bf48      	it	mi
 8005080:	b2b6      	uxthmi	r6, r6
 8005082:	e7e6      	b.n	8005052 <_printf_i+0x182>
 8005084:	4615      	mov	r5, r2
 8005086:	e7bb      	b.n	8005000 <_printf_i+0x130>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	6826      	ldr	r6, [r4, #0]
 800508c:	6961      	ldr	r1, [r4, #20]
 800508e:	1d18      	adds	r0, r3, #4
 8005090:	6028      	str	r0, [r5, #0]
 8005092:	0635      	lsls	r5, r6, #24
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	d501      	bpl.n	800509c <_printf_i+0x1cc>
 8005098:	6019      	str	r1, [r3, #0]
 800509a:	e002      	b.n	80050a2 <_printf_i+0x1d2>
 800509c:	0670      	lsls	r0, r6, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0x1c8>
 80050a0:	8019      	strh	r1, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	4615      	mov	r5, r2
 80050a8:	e7ba      	b.n	8005020 <_printf_i+0x150>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	1d1a      	adds	r2, r3, #4
 80050ae:	602a      	str	r2, [r5, #0]
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	6862      	ldr	r2, [r4, #4]
 80050b4:	2100      	movs	r1, #0
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7fb f9da 	bl	8000470 <memchr>
 80050bc:	b108      	cbz	r0, 80050c2 <_printf_i+0x1f2>
 80050be:	1b40      	subs	r0, r0, r5
 80050c0:	6060      	str	r0, [r4, #4]
 80050c2:	6863      	ldr	r3, [r4, #4]
 80050c4:	6123      	str	r3, [r4, #16]
 80050c6:	2300      	movs	r3, #0
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	e7a8      	b.n	8005020 <_printf_i+0x150>
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	462a      	mov	r2, r5
 80050d2:	4649      	mov	r1, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	47d0      	blx	sl
 80050d8:	3001      	adds	r0, #1
 80050da:	d0ab      	beq.n	8005034 <_printf_i+0x164>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	079b      	lsls	r3, r3, #30
 80050e0:	d413      	bmi.n	800510a <_printf_i+0x23a>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	4298      	cmp	r0, r3
 80050e8:	bfb8      	it	lt
 80050ea:	4618      	movlt	r0, r3
 80050ec:	e7a4      	b.n	8005038 <_printf_i+0x168>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4632      	mov	r2, r6
 80050f2:	4649      	mov	r1, r9
 80050f4:	4640      	mov	r0, r8
 80050f6:	47d0      	blx	sl
 80050f8:	3001      	adds	r0, #1
 80050fa:	d09b      	beq.n	8005034 <_printf_i+0x164>
 80050fc:	3501      	adds	r5, #1
 80050fe:	68e3      	ldr	r3, [r4, #12]
 8005100:	9903      	ldr	r1, [sp, #12]
 8005102:	1a5b      	subs	r3, r3, r1
 8005104:	42ab      	cmp	r3, r5
 8005106:	dcf2      	bgt.n	80050ee <_printf_i+0x21e>
 8005108:	e7eb      	b.n	80050e2 <_printf_i+0x212>
 800510a:	2500      	movs	r5, #0
 800510c:	f104 0619 	add.w	r6, r4, #25
 8005110:	e7f5      	b.n	80050fe <_printf_i+0x22e>
 8005112:	bf00      	nop
 8005114:	08005365 	.word	0x08005365
 8005118:	08005376 	.word	0x08005376

0800511c <_sbrk_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d06      	ldr	r5, [pc, #24]	; (8005138 <_sbrk_r+0x1c>)
 8005120:	2300      	movs	r3, #0
 8005122:	4604      	mov	r4, r0
 8005124:	4608      	mov	r0, r1
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	f7fc fe4e 	bl	8001dc8 <_sbrk>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d102      	bne.n	8005136 <_sbrk_r+0x1a>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	b103      	cbz	r3, 8005136 <_sbrk_r+0x1a>
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	20000820 	.word	0x20000820

0800513c <__sread>:
 800513c:	b510      	push	{r4, lr}
 800513e:	460c      	mov	r4, r1
 8005140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005144:	f000 f8a0 	bl	8005288 <_read_r>
 8005148:	2800      	cmp	r0, #0
 800514a:	bfab      	itete	ge
 800514c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800514e:	89a3      	ldrhlt	r3, [r4, #12]
 8005150:	181b      	addge	r3, r3, r0
 8005152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005156:	bfac      	ite	ge
 8005158:	6563      	strge	r3, [r4, #84]	; 0x54
 800515a:	81a3      	strhlt	r3, [r4, #12]
 800515c:	bd10      	pop	{r4, pc}

0800515e <__swrite>:
 800515e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005162:	461f      	mov	r7, r3
 8005164:	898b      	ldrh	r3, [r1, #12]
 8005166:	05db      	lsls	r3, r3, #23
 8005168:	4605      	mov	r5, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4616      	mov	r6, r2
 800516e:	d505      	bpl.n	800517c <__swrite+0x1e>
 8005170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005174:	2302      	movs	r3, #2
 8005176:	2200      	movs	r2, #0
 8005178:	f000 f868 	bl	800524c <_lseek_r>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	4632      	mov	r2, r6
 800518a:	463b      	mov	r3, r7
 800518c:	4628      	mov	r0, r5
 800518e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	f000 b817 	b.w	80051c4 <_write_r>

08005196 <__sseek>:
 8005196:	b510      	push	{r4, lr}
 8005198:	460c      	mov	r4, r1
 800519a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519e:	f000 f855 	bl	800524c <_lseek_r>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	bf15      	itete	ne
 80051a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80051aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051b2:	81a3      	strheq	r3, [r4, #12]
 80051b4:	bf18      	it	ne
 80051b6:	81a3      	strhne	r3, [r4, #12]
 80051b8:	bd10      	pop	{r4, pc}

080051ba <__sclose>:
 80051ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051be:	f000 b813 	b.w	80051e8 <_close_r>
	...

080051c4 <_write_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d07      	ldr	r5, [pc, #28]	; (80051e4 <_write_r+0x20>)
 80051c8:	4604      	mov	r4, r0
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	602a      	str	r2, [r5, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7fc fda8 	bl	8001d28 <_write>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_write_r+0x1e>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_write_r+0x1e>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	20000820 	.word	0x20000820

080051e8 <_close_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d06      	ldr	r5, [pc, #24]	; (8005204 <_close_r+0x1c>)
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	602b      	str	r3, [r5, #0]
 80051f4:	f7fc fdb4 	bl	8001d60 <_close>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_close_r+0x1a>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_close_r+0x1a>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20000820 	.word	0x20000820

08005208 <_fstat_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	; (8005228 <_fstat_r+0x20>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	4611      	mov	r1, r2
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	f7fc fdaf 	bl	8001d78 <_fstat>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d102      	bne.n	8005224 <_fstat_r+0x1c>
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	b103      	cbz	r3, 8005224 <_fstat_r+0x1c>
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	bd38      	pop	{r3, r4, r5, pc}
 8005226:	bf00      	nop
 8005228:	20000820 	.word	0x20000820

0800522c <_isatty_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d06      	ldr	r5, [pc, #24]	; (8005248 <_isatty_r+0x1c>)
 8005230:	2300      	movs	r3, #0
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	f7fc fdae 	bl	8001d98 <_isatty>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_isatty_r+0x1a>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_isatty_r+0x1a>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	20000820 	.word	0x20000820

0800524c <_lseek_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	; (800526c <_lseek_r+0x20>)
 8005250:	4604      	mov	r4, r0
 8005252:	4608      	mov	r0, r1
 8005254:	4611      	mov	r1, r2
 8005256:	2200      	movs	r2, #0
 8005258:	602a      	str	r2, [r5, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f7fc fda7 	bl	8001dae <_lseek>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_lseek_r+0x1e>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_lseek_r+0x1e>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	20000820 	.word	0x20000820

08005270 <__malloc_lock>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__malloc_lock+0x8>)
 8005272:	f7ff bb1d 	b.w	80048b0 <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	20000814 	.word	0x20000814

0800527c <__malloc_unlock>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__malloc_unlock+0x8>)
 800527e:	f7ff bb18 	b.w	80048b2 <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	20000814 	.word	0x20000814

08005288 <_read_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4d07      	ldr	r5, [pc, #28]	; (80052a8 <_read_r+0x20>)
 800528c:	4604      	mov	r4, r0
 800528e:	4608      	mov	r0, r1
 8005290:	4611      	mov	r1, r2
 8005292:	2200      	movs	r2, #0
 8005294:	602a      	str	r2, [r5, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	f7fc fd29 	bl	8001cee <_read>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_read_r+0x1e>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_read_r+0x1e>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	20000820 	.word	0x20000820

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
