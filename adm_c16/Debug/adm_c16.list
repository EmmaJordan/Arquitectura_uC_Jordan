
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005184  08005184  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800518c  0800518c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  20000824  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d91b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000fec6  00000000  00000000  0002d9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000204a  00000000  00000000  0003d881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cb0  00000000  00000000  0003f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dc4fb  00000000  00000000  00040580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000bc8  00000000  00000000  0011ca80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024d9d  00000000  00000000  0011d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001423e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d10  00000000  00000000  00142438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050a8 	.word	0x080050a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080050a8 	.word	0x080050a8

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@
.thumb_func
    asm_zeros:
        @ Registros usados
        @   r2: valor cero
        mov r2, 0           @ constante cero en r2
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <.asm_zeros_loop>:
    .asm_zeros_loop:
        str r2, [r0], 4    	@str carga en memoria el valor de un registro
 80001fc:	f840 2b04 	str.w	r2, [r0], #4
        					@carga en memoria (r0=*vector[0]) lo que tengo en r2 (0) y luego r0+=4 --> r0=*vector[1];
        					@ sizeof(uint32_t) == 4, *vector++ = r2. //
        subs r1, 1          @ r1-=1; longitud--; y actualiza flag de estado del procesador
 8000200:	3901      	subs	r1, #1
        bne .asm_zeros_loop @vuelve a repetir el ciclo, con salto condicional (NE: not equal, flag Z=0), es decir mientras r1 no sea 0
 8000202:	d1fb      	bne.n	80001fc <.asm_zeros_loop>
        bx lr				@retorna link register
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
@
.thumb_func

    asm_productoEscalar32:

    push {r5}
 8000206:	b420      	push	{r5}
	push {r6}
 8000208:	b440      	push	{r6}

0800020a <.loop32>:

    .loop32:
    	ldr	r5, [r0], 4 	@carga un registro r5 con un valor de memoria r0 y luego r0+=4;
 800020a:	f850 5b04 	ldr.w	r5, [r0], #4
    						@es decir, carga en r5 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul r6, r5, r3  	@multiplica r5 por r3 (escalar) y lo guarda en r6
 800020e:	fb05 f603 	mul.w	r6, r5, r3
		str r6, [r1], 4 	@carga en memoria r1 lo que tengo en r6 y luego r1+=4;
 8000212:	f841 6b04 	str.w	r6, [r1], #4
							@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs r2, 1      	@decrementa en 1 a r2 (longitud--)y actualiza flag de estado del procesador
 8000216:	3a01      	subs	r2, #1
        bne	.loop32			@vuelve a .loop32, ejecución condicional (Not Equal, es decir Z=0)
 8000218:	d1f7      	bne.n	800020a <.loop32>

        pop {r6}
 800021a:	bc40      	pop	{r6}
        pop {r5}
 800021c:	bc20      	pop	{r5}

        bx lr
 800021e:	4770      	bx	lr

08000220 <asm_productoEscalar16>:
@
.thumb_func

    asm_productoEscalar16: //Nota: da el mismo resultado ldr y str con parámetro 4, que ldrh t strh con parámetro 2

    push {r8}
 8000220:	f84d 8d04 	str.w	r8, [sp, #-4]!
	push {r9}
 8000224:	f84d 9d04 	str.w	r9, [sp, #-4]!

08000228 <.loop16>:

    .loop16:
    	ldrh	r8, [r0], 2 	@carga un registro r8 con un valor de memoria r0 y luego r0+=4;
 8000228:	f830 8b02 	ldrh.w	r8, [r0], #2
    							@es decir, carga en r8 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul 	r9, r8, r3  	@multiplica r8 por r3 (escalar) y lo guarda en r6
 800022c:	fb08 f903 	mul.w	r9, r8, r3
		strh 	r9, [r1], 2 	@carga en memoria r1 lo que tengo en r9 y luego r1+=4;
 8000230:	f821 9b02 	strh.w	r9, [r1], #2
								@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs 	r2, 1      		@decrementa en 1 a r2 (longitud--)
 8000234:	3a01      	subs	r2, #1
        bne		.loop16			@vuelve a .loop16, ejecución condicional (Not Equal, es decir Z=0)
 8000236:	d1f7      	bne.n	8000228 <.loop16>

        pop {r9}
 8000238:	f85d 9b04 	ldr.w	r9, [sp], #4
        pop {r8}
 800023c:	f85d 8b04 	ldr.w	r8, [sp], #4

        bx lr
 8000240:	4770      	bx	lr

08000242 <asm_productoEscalar12>:
@
.thumb_func

    asm_productoEscalar12:

    push {r4}
 8000242:	b410      	push	{r4}
	push {r5}
 8000244:	b420      	push	{r5}
	push {r6}
 8000246:	b440      	push	{r6}
	mov r6, #0x0FFF		//valor a saturar
 8000248:	f640 76ff 	movw	r6, #4095	; 0xfff

0800024c <.asm_productoEscalar12_loop12>:
    .asm_productoEscalar12_loop12:
		    	ldrh  	r4, [r0], 2 	@ carga un registro r4 con un valor de memoria r0 y luego r0+=2;
 800024c:	f830 4b02 	ldrh.w	r4, [r0], #2
		    							@ es decir, carga en r4 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
		    	mul 	r5, r4,  r3  	@ multiplica r4 por r3 (escalar) y lo guarda en r5
 8000250:	fb04 f503 	mul.w	r5, r4, r3
				cmp		r6, r5		    @ compara r5 con r6 (resta)
 8000254:	42ae      	cmp	r6, r5
				bhi		isNO			@ higher unsigned
 8000256:	d801      	bhi.n	800025c <isNO>

08000258 <isYES>:

		isYES: //Saturó
				mov 	r5, r6  		@ satura resultado a 12 bits
 8000258:	4635      	mov	r5, r6
				b isNO 					@ salto incondicional a done
 800025a:	e7ff      	b.n	800025c <isNO>

0800025c <isNO>:

		isNO:
				strh  	r5, [r1], 2		@ carga en memoria r1 lo que tengo en r5 y luego r1+=2; <----
 800025c:	f821 5b02 	strh.w	r5, [r1], #2
										@ es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
		    	subs 	r2, 1      		@ decrementa en 1 a r2 (longitud--)
 8000260:	3a01      	subs	r2, #1
		        bne		.asm_productoEscalar12_loop12			@ vuelve a .loop12, ejecución condicional (Not Equal, es decir Z=0)
 8000262:	d1f3      	bne.n	800024c <.asm_productoEscalar12_loop12>

	pop {r6}
 8000264:	bc40      	pop	{r6}
    pop {r5}
 8000266:	bc20      	pop	{r5}
    pop {r4}
 8000268:	bc10      	pop	{r4}

    bx lr
 800026a:	4770      	bx	lr

0800026c <asm_productoEscalar12_usat>:
@
.thumb_func

    asm_productoEscalar12_usat:

    push {r8}
 800026c:	f84d 8d04 	str.w	r8, [sp, #-4]!
	push {r9}
 8000270:	f84d 9d04 	str.w	r9, [sp, #-4]!

08000274 <.loop12_usat>:

    .loop12_usat:
    	ldrh  	r8, [r0], 2 	@carga un registro r8 con un valor de memoria r0 y luego r0+=2; <------
 8000274:	f830 8b02 	ldrh.w	r8, [r0], #2
    							@es decir, carga en r8 lo que hay en r0 (*vectorIn) e incrementa el puntero de vectorIn
    	mul 	r9, r8,  r3  	@multiplica r8 por r3 (escalar) y lo guarda en r9
 8000278:	fb08 f903 	mul.w	r9, r8, r3
		usat 	r9, 12,  r9    //AGREGADO SATURACIÓN a 12 bits
 800027c:	f389 090c 	usat	r9, #12, r9
		strh  	r9, [r1], 2 	@carga en memoria r1 lo que tengo en r9 y luego r1+=2; <----
 8000280:	f821 9b02 	strh.w	r9, [r1], #2
								@es decir, carga en r1 vectorIn[0]*escalar e incrementa el puntero de vectorOut
    	subs 	r2, 1      		@decrementa en 1 a r2 (longitud--)
 8000284:	3a01      	subs	r2, #1
        bne		.loop12_usat	@vuelve a .loop12, ejecución condicional (Not Equal, es decir Z=0)
 8000286:	d1f5      	bne.n	8000274 <.loop12_usat>

    pop {r9}
 8000288:	f85d 9b04 	ldr.w	r9, [sp], #4
    pop {r8}
 800028c:	f85d 8b04 	ldr.w	r8, [sp], #4

    bx lr
 8000290:	4770      	bx	lr

08000292 <asm_max>:
@
.thumb_func

	    asm_max:

    	push {r4}
 8000292:	b410      	push	{r4}
    	push {r5}
 8000294:	b420      	push	{r5}

    	ldr r2, [r0], 4    		@ guardo en r2=*r0 (primer elemento del arreglo) e incremento puntero
 8000296:	f850 2b04 	ldr.w	r2, [r0], #4
    	mov r3, 1				@ r3 = 1; --> índice Máximo inicial
 800029a:	f04f 0301 	mov.w	r3, #1
    	mov r4, 1				@ r4 = 1;
 800029e:	f04f 0401 	mov.w	r4, #1
		subs r1, 1				@ r1-= 1; longitud--;
 80002a2:	3901      	subs	r1, #1
        beq .endMax				@ salto condicional Equal (Z=1) --> if(longitud==0) goto endMax
 80002a4:	d009      	beq.n	80002ba <.endMax>

080002a6 <.loopMax>:

		.loopMax:
			add r4, 1			@ r4+=1; --> r4 = 2;
 80002a6:	f104 0401 	add.w	r4, r4, #1
			ldr r5, [r0], 4		@ r5 = *r0
 80002aa:	f850 5b04 	ldr.w	r5, [r0], #4
			cmp r2, r5			@ comparo elemento actual con anterior
 80002ae:	42aa      	cmp	r2, r5
			bgt .saltoMax		@ salto condicional Greater Than signed (Z=0, N=V) --> si encontré un nuevo máximo, goto salto
 80002b0:	dc01      	bgt.n	80002b6 <.saltoMax>
			mov r2, r5			@ actualizo elemento actual
 80002b2:	462a      	mov	r2, r5
			mov r3, r4			@ actualizo índice Máximo
 80002b4:	4623      	mov	r3, r4

080002b6 <.saltoMax>:

		.saltoMax:
	    	subs r1, 1			@ r1-= 1; longitud--;
 80002b6:	3901      	subs	r1, #1
	        bne	.loopMax		@ salto condicional Not Equal (Z=0) --> if(longitud!=1) goto loopMax
 80002b8:	d1f5      	bne.n	80002a6 <.loopMax>

080002ba <.endMax>:

	    .endMax:
	        sub r3, 1
 80002ba:	f1a3 0301 	sub.w	r3, r3, #1
	        mov r0, r3			@ guardo en valor de retorno el índice máximo
 80002be:	4618      	mov	r0, r3

	    pop {r5}
 80002c0:	bc20      	pop	{r5}
	    pop {r4}
 80002c2:	bc10      	pop	{r4}
		bx lr
 80002c4:	4770      	bx	lr

080002c6 <asm_invertir>:

    asm_invertir:
   		// N = número de bytes ocupados
    	// ejemplo longitud = 10 --> N = 2*10 = 20
		// 0 a longitud-1 -> 0 a 18 bytes
        push {r4}
 80002c6:	b410      	push	{r4}

        subs r1, 1			@longitud--; 	--> longitud = 9
 80002c8:	3901      	subs	r1, #1
        beq .end_invertir	@salto condicional Equal (Z=1) --> if(longitud==1) goto end_invertir
 80002ca:	d010      	beq.n	80002ee <.end_invertir>

    	mov r3, 2			@r3 = 2
 80002cc:	f04f 0302 	mov.w	r3, #2
    	mul r4, r1, r3		@r4 = (longitud-1)*2 = 18
 80002d0:	fb01 f403 	mul.w	r4, r1, r3
    	add r4, r0			@r4  = r4 + *vector[0] = 18 + *vector[0] = *vector[longitud-1]
 80002d4:	4404      	add	r4, r0

    	add r1, 1			@longitud++;   --> longitud = 10;
 80002d6:	f101 0101 	add.w	r1, r1, #1
    	udiv r1, r1, r3		@r1 = r1/r3    --> longitud = 5;
 80002da:	fbb1 f1f3 	udiv	r1, r1, r3

080002de <.loop_invertir>:
    	//r0 <-- puntero a primer elemento
    	//r4 <-- puntero a último elemento

	.loop_invertir:

    	ldrh r2, [r0]		@r2 = *vector[0]				//guarda en r2 el primer elemento
 80002de:	8802      	ldrh	r2, [r0, #0]
    	ldrh r3, [r4]		@r3 = *vector[longitud-1]		//guarda en r3 el último elemento
 80002e0:	8823      	ldrh	r3, [r4, #0]
		strh r3, [r0],  2	@r0 = N + *vector [0]; r0+=2;   //guarda en memoria r0 el último elemento, y r0++; (sobreescribe último en primero)
 80002e2:	f820 3b02 	strh.w	r3, [r0], #2
		strh r2, [r4], -2   @r4 = vector[0]; r0-=2;			//guarda en memoria r0 el primer elemento, y r4--;
 80002e6:	f824 2902 	strh.w	r2, [r4], #-2

    	subs r1, 1			@longitud--; 	--> longitud = 4
 80002ea:	3901      	subs	r1, #1
        bne	.loop_invertir	@salto condicional Not Equal (Z=0) --> if(longitud!=1) goto loop_invertir
 80002ec:	d1f7      	bne.n	80002de <.loop_invertir>

080002ee <.end_invertir>:

	.end_invertir:

        pop {r4}
 80002ee:	bc10      	pop	{r4}
        bx lr
 80002f0:	4770      	bx	lr

080002f2 <asm_filtroVentana10>:
@
.thumb_func

	asm_filtroVentana10:

    push {r4}
 80002f2:	b410      	push	{r4}
    push {r5}
 80002f4:	b420      	push	{r5}
    push {r6}			//indiceVentana
 80002f6:	b440      	push	{r6}
    push {r7}
 80002f8:	b480      	push	{r7}
    push {r8}
 80002fa:	f84d 8d04 	str.w	r8, [sp, #-4]!
	mov r3, 0			// indice
 80002fe:	f04f 0300 	mov.w	r3, #0

08000302 <.ventana_while>:

		.ventana_while:

			mov r4, 0			@ promedio lo vuelve a 0 en cada vuelta
 8000302:	f04f 0400 	mov.w	r4, #0
			mov r5, 0			@ i=0
 8000306:	f04f 0500 	mov.w	r5, #0

0800030a <.ventana_for>:

		.ventana_for:

			add r6, r3, r5		@ r6 = indice+i
 800030a:	eb03 0605 	add.w	r6, r3, r5
			cmp r6, r2			@ if(r6<longitud)
 800030e:	4296      	cmp	r6, r2
			blt .ventana_salto	@ salgo condicional, Less Than
 8000310:	db05      	blt.n	800031e <.ventana_salto>
								@ sino, ventana salió del arreglo
			udiv r7, r6, r2		@ r7 = (indice+i) / longitudVectorIn
 8000312:	fbb6 f7f2 	udiv	r7, r6, r2
			mul r7, r7, r2		@ r7 = r7*longitudVectorin
 8000316:	fb07 f702 	mul.w	r7, r7, r2
			sub r6, r6, r7		@ r6 = (indice+i) % longitudVectorIn
 800031a:	eba6 0607 	sub.w	r6, r6, r7

0800031e <.ventana_salto>:

		.ventana_salto:

			mov r8, 2
 800031e:	f04f 0802 	mov.w	r8, #2
			mul r6, r6, r8		@ (indice+i) = (indice+i)*2
 8000322:	fb06 f608 	mul.w	r6, r6, r8
			add r6, r0, r6		@ (indice+1)*2+vectorIn
 8000326:	4406      	add	r6, r0
			ldrh r8, [r6]		@ r8 <-- guarda valor apuntado a vectorIn
 8000328:	f8b6 8000 	ldrh.w	r8, [r6]
			add r4, r4, r8		@ suma valor apuntado y acumula
 800032c:	4444      	add	r4, r8
			add r5, 1			@ i++ (for)
 800032e:	f105 0501 	add.w	r5, r5, #1
			cmp r5, 10			@ i<10 (for)
 8000332:	2d0a      	cmp	r5, #10
			blt .ventana_for    @ vuelve a iniciar (for)
 8000334:	dbe9      	blt.n	800030a <.ventana_for>

			mov r8, 10			@r8 = longitudVentana = 10
 8000336:	f04f 080a 	mov.w	r8, #10
			udiv r8, r4, r8		@r8 = sumaAcumulada/10 = promedio
 800033a:	fbb4 f8f8 	udiv	r8, r4, r8
			strh r8, [r1], 2    @guarda en memoria r1 (vectorOut) el promedio e incrementa puntero
 800033e:	f821 8b02 	strh.w	r8, [r1], #2
			add r3, 1			@índice++
 8000342:	f103 0301 	add.w	r3, r3, #1
			cmp r3, r2			@if(indice<longitudVectorin)
 8000346:	4293      	cmp	r3, r2
			blt .ventana_while	@salto condicional Less Than
 8000348:	dbdb      	blt.n	8000302 <.ventana_while>

	pop {r8}
 800034a:	f85d 8b04 	ldr.w	r8, [sp], #4
    pop {r7}
 800034e:	bc80      	pop	{r7}
	pop {r6}
 8000350:	bc40      	pop	{r6}
    pop {r5}
 8000352:	bc20      	pop	{r5}
    pop {r4}
 8000354:	bc10      	pop	{r4}

	bx lr
 8000356:	4770      	bx	lr

08000358 <asm_downsampleM>:
@
.thumb_func

	asm_downsampleM:

	push {r4}				@ indiceN
 8000358:	b410      	push	{r4}
	push {r5}				@ indiceOut
 800035a:	b420      	push	{r5}

	mov r4, 1
 800035c:	f04f 0401 	mov.w	r4, #1

08000360 <.downSample_for>:

	.downSample_for:

		ldr r5, [r0], 4		@ r5 = *vectorIn; *vectorIn++;
 8000360:	f850 5b04 	ldr.w	r5, [r0], #4
		cmp r4, r3			@ if ( indiceN==N )
 8000364:	429c      	cmp	r4, r3
		beq .downSample_1	@ salto condicional Equal
 8000366:	d002      	beq.n	800036e <.downSample_1>
		str r5, [r1], 4		@ vectorOut = *vectorIn; *vectorOut++
 8000368:	f841 5b04 	str.w	r5, [r1], #4
		bal .downSample_2	@ salto condicional Any Value
 800036c:	e001      	b.n	8000372 <.downSample_2>

0800036e <.downSample_1>:

	.downSample_1:

		mov r4, 0			@ índiceN = 1
 800036e:	f04f 0400 	mov.w	r4, #0

08000372 <.downSample_2>:

	.downSample_2:

		add  r4, 1			@ índiceN++
 8000372:	f104 0401 	add.w	r4, r4, #1
		subs r2, 1			@ longitud --
 8000376:	3a01      	subs	r2, #1
		bne .downSample_for @ salto condicional Not Equal (for)
 8000378:	d1f2      	bne.n	8000360 <.downSample_for>

	pop {r6}
 800037a:	bc40      	pop	{r6}
	pop {r5}
 800037c:	bc20      	pop	{r5}
	pop {r4}
 800037e:	bc10      	pop	{r4}
	bx lr
 8000380:	4770      	bx	lr

08000382 <asm_pack32to16>:
@
.thumb_func

asm_pack32to16:

add r0, 2
 8000382:	f100 0002 	add.w	r0, r0, #2

08000386 <.pack32to16_while>:

.pack32to16_while:

	ldrh r3, [r0], 4		@r3 = *vectorIn (parte alta h), *vectorIn++; (4 bytes)
 8000386:	f830 3b04 	ldrh.w	r3, [r0], #4
	strh r3, [r1], 2		@vectorOut = *vectorIn; vectorOut++; (2 bytes)
 800038a:	f821 3b02 	strh.w	r3, [r1], #2
	subs r2, 1          	@ --longitud
 800038e:	3a01      	subs	r2, #1
    bne	.pack32to16_while
 8000390:	d1f9      	bne.n	8000386 <.pack32to16_while>
	bx lr
 8000392:	4770      	bx	lr
	...

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295
 8000450:	f04f 30ff 	movne.w	r0, #4294967295
 8000454:	f000 b974 	b.w	8000740 <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9d08      	ldr	r5, [sp, #32]
 8000476:	4604      	mov	r4, r0
 8000478:	468e      	mov	lr, r1
 800047a:	2b00      	cmp	r3, #0
 800047c:	d14d      	bne.n	800051a <__udivmoddi4+0xaa>
 800047e:	428a      	cmp	r2, r1
 8000480:	4694      	mov	ip, r2
 8000482:	d969      	bls.n	8000558 <__udivmoddi4+0xe8>
 8000484:	fab2 f282 	clz	r2, r2
 8000488:	b152      	cbz	r2, 80004a0 <__udivmoddi4+0x30>
 800048a:	fa01 f302 	lsl.w	r3, r1, r2
 800048e:	f1c2 0120 	rsb	r1, r2, #32
 8000492:	fa20 f101 	lsr.w	r1, r0, r1
 8000496:	fa0c fc02 	lsl.w	ip, ip, r2
 800049a:	ea41 0e03 	orr.w	lr, r1, r3
 800049e:	4094      	lsls	r4, r2
 80004a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004a4:	0c21      	lsrs	r1, r4, #16
 80004a6:	fbbe f6f8 	udiv	r6, lr, r8
 80004aa:	fa1f f78c 	uxth.w	r7, ip
 80004ae:	fb08 e316 	mls	r3, r8, r6, lr
 80004b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004b6:	fb06 f107 	mul.w	r1, r6, r7
 80004ba:	4299      	cmp	r1, r3
 80004bc:	d90a      	bls.n	80004d4 <__udivmoddi4+0x64>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004c6:	f080 811f 	bcs.w	8000708 <__udivmoddi4+0x298>
 80004ca:	4299      	cmp	r1, r3
 80004cc:	f240 811c 	bls.w	8000708 <__udivmoddi4+0x298>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	1a5b      	subs	r3, r3, r1
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004dc:	fb08 3310 	mls	r3, r8, r0, r3
 80004e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004e4:	fb00 f707 	mul.w	r7, r0, r7
 80004e8:	42a7      	cmp	r7, r4
 80004ea:	d90a      	bls.n	8000502 <__udivmoddi4+0x92>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f4:	f080 810a 	bcs.w	800070c <__udivmoddi4+0x29c>
 80004f8:	42a7      	cmp	r7, r4
 80004fa:	f240 8107 	bls.w	800070c <__udivmoddi4+0x29c>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000506:	1be4      	subs	r4, r4, r7
 8000508:	2600      	movs	r6, #0
 800050a:	b11d      	cbz	r5, 8000514 <__udivmoddi4+0xa4>
 800050c:	40d4      	lsrs	r4, r2
 800050e:	2300      	movs	r3, #0
 8000510:	e9c5 4300 	strd	r4, r3, [r5]
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	428b      	cmp	r3, r1
 800051c:	d909      	bls.n	8000532 <__udivmoddi4+0xc2>
 800051e:	2d00      	cmp	r5, #0
 8000520:	f000 80ef 	beq.w	8000702 <__udivmoddi4+0x292>
 8000524:	2600      	movs	r6, #0
 8000526:	e9c5 0100 	strd	r0, r1, [r5]
 800052a:	4630      	mov	r0, r6
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	fab3 f683 	clz	r6, r3
 8000536:	2e00      	cmp	r6, #0
 8000538:	d14a      	bne.n	80005d0 <__udivmoddi4+0x160>
 800053a:	428b      	cmp	r3, r1
 800053c:	d302      	bcc.n	8000544 <__udivmoddi4+0xd4>
 800053e:	4282      	cmp	r2, r0
 8000540:	f200 80f9 	bhi.w	8000736 <__udivmoddi4+0x2c6>
 8000544:	1a84      	subs	r4, r0, r2
 8000546:	eb61 0303 	sbc.w	r3, r1, r3
 800054a:	2001      	movs	r0, #1
 800054c:	469e      	mov	lr, r3
 800054e:	2d00      	cmp	r5, #0
 8000550:	d0e0      	beq.n	8000514 <__udivmoddi4+0xa4>
 8000552:	e9c5 4e00 	strd	r4, lr, [r5]
 8000556:	e7dd      	b.n	8000514 <__udivmoddi4+0xa4>
 8000558:	b902      	cbnz	r2, 800055c <__udivmoddi4+0xec>
 800055a:	deff      	udf	#255	; 0xff
 800055c:	fab2 f282 	clz	r2, r2
 8000560:	2a00      	cmp	r2, #0
 8000562:	f040 8092 	bne.w	800068a <__udivmoddi4+0x21a>
 8000566:	eba1 010c 	sub.w	r1, r1, ip
 800056a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056e:	fa1f fe8c 	uxth.w	lr, ip
 8000572:	2601      	movs	r6, #1
 8000574:	0c20      	lsrs	r0, r4, #16
 8000576:	fbb1 f3f7 	udiv	r3, r1, r7
 800057a:	fb07 1113 	mls	r1, r7, r3, r1
 800057e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000582:	fb0e f003 	mul.w	r0, lr, r3
 8000586:	4288      	cmp	r0, r1
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x12c>
 800058a:	eb1c 0101 	adds.w	r1, ip, r1
 800058e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x12a>
 8000594:	4288      	cmp	r0, r1
 8000596:	f200 80cb 	bhi.w	8000730 <__udivmoddi4+0x2c0>
 800059a:	4643      	mov	r3, r8
 800059c:	1a09      	subs	r1, r1, r0
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a4:	fb07 1110 	mls	r1, r7, r0, r1
 80005a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005ac:	fb0e fe00 	mul.w	lr, lr, r0
 80005b0:	45a6      	cmp	lr, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x156>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005bc:	d202      	bcs.n	80005c4 <__udivmoddi4+0x154>
 80005be:	45a6      	cmp	lr, r4
 80005c0:	f200 80bb 	bhi.w	800073a <__udivmoddi4+0x2ca>
 80005c4:	4608      	mov	r0, r1
 80005c6:	eba4 040e 	sub.w	r4, r4, lr
 80005ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005ce:	e79c      	b.n	800050a <__udivmoddi4+0x9a>
 80005d0:	f1c6 0720 	rsb	r7, r6, #32
 80005d4:	40b3      	lsls	r3, r6
 80005d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005da:	ea4c 0c03 	orr.w	ip, ip, r3
 80005de:	fa20 f407 	lsr.w	r4, r0, r7
 80005e2:	fa01 f306 	lsl.w	r3, r1, r6
 80005e6:	431c      	orrs	r4, r3
 80005e8:	40f9      	lsrs	r1, r7
 80005ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005ee:	fa00 f306 	lsl.w	r3, r0, r6
 80005f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80005f6:	0c20      	lsrs	r0, r4, #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000600:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000604:	fb08 f00e 	mul.w	r0, r8, lr
 8000608:	4288      	cmp	r0, r1
 800060a:	fa02 f206 	lsl.w	r2, r2, r6
 800060e:	d90b      	bls.n	8000628 <__udivmoddi4+0x1b8>
 8000610:	eb1c 0101 	adds.w	r1, ip, r1
 8000614:	f108 3aff 	add.w	sl, r8, #4294967295
 8000618:	f080 8088 	bcs.w	800072c <__udivmoddi4+0x2bc>
 800061c:	4288      	cmp	r0, r1
 800061e:	f240 8085 	bls.w	800072c <__udivmoddi4+0x2bc>
 8000622:	f1a8 0802 	sub.w	r8, r8, #2
 8000626:	4461      	add	r1, ip
 8000628:	1a09      	subs	r1, r1, r0
 800062a:	b2a4      	uxth	r4, r4
 800062c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000630:	fb09 1110 	mls	r1, r9, r0, r1
 8000634:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000638:	fb00 fe0e 	mul.w	lr, r0, lr
 800063c:	458e      	cmp	lr, r1
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x1e2>
 8000640:	eb1c 0101 	adds.w	r1, ip, r1
 8000644:	f100 34ff 	add.w	r4, r0, #4294967295
 8000648:	d26c      	bcs.n	8000724 <__udivmoddi4+0x2b4>
 800064a:	458e      	cmp	lr, r1
 800064c:	d96a      	bls.n	8000724 <__udivmoddi4+0x2b4>
 800064e:	3802      	subs	r0, #2
 8000650:	4461      	add	r1, ip
 8000652:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000656:	fba0 9402 	umull	r9, r4, r0, r2
 800065a:	eba1 010e 	sub.w	r1, r1, lr
 800065e:	42a1      	cmp	r1, r4
 8000660:	46c8      	mov	r8, r9
 8000662:	46a6      	mov	lr, r4
 8000664:	d356      	bcc.n	8000714 <__udivmoddi4+0x2a4>
 8000666:	d053      	beq.n	8000710 <__udivmoddi4+0x2a0>
 8000668:	b15d      	cbz	r5, 8000682 <__udivmoddi4+0x212>
 800066a:	ebb3 0208 	subs.w	r2, r3, r8
 800066e:	eb61 010e 	sbc.w	r1, r1, lr
 8000672:	fa01 f707 	lsl.w	r7, r1, r7
 8000676:	fa22 f306 	lsr.w	r3, r2, r6
 800067a:	40f1      	lsrs	r1, r6
 800067c:	431f      	orrs	r7, r3
 800067e:	e9c5 7100 	strd	r7, r1, [r5]
 8000682:	2600      	movs	r6, #0
 8000684:	4631      	mov	r1, r6
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	40d8      	lsrs	r0, r3
 8000690:	fa0c fc02 	lsl.w	ip, ip, r2
 8000694:	fa21 f303 	lsr.w	r3, r1, r3
 8000698:	4091      	lsls	r1, r2
 800069a:	4301      	orrs	r1, r0
 800069c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006a0:	fa1f fe8c 	uxth.w	lr, ip
 80006a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80006a8:	fb07 3610 	mls	r6, r7, r0, r3
 80006ac:	0c0b      	lsrs	r3, r1, #16
 80006ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006b2:	fb00 f60e 	mul.w	r6, r0, lr
 80006b6:	429e      	cmp	r6, r3
 80006b8:	fa04 f402 	lsl.w	r4, r4, r2
 80006bc:	d908      	bls.n	80006d0 <__udivmoddi4+0x260>
 80006be:	eb1c 0303 	adds.w	r3, ip, r3
 80006c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006c6:	d22f      	bcs.n	8000728 <__udivmoddi4+0x2b8>
 80006c8:	429e      	cmp	r6, r3
 80006ca:	d92d      	bls.n	8000728 <__udivmoddi4+0x2b8>
 80006cc:	3802      	subs	r0, #2
 80006ce:	4463      	add	r3, ip
 80006d0:	1b9b      	subs	r3, r3, r6
 80006d2:	b289      	uxth	r1, r1
 80006d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006d8:	fb07 3316 	mls	r3, r7, r6, r3
 80006dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e0:	fb06 f30e 	mul.w	r3, r6, lr
 80006e4:	428b      	cmp	r3, r1
 80006e6:	d908      	bls.n	80006fa <__udivmoddi4+0x28a>
 80006e8:	eb1c 0101 	adds.w	r1, ip, r1
 80006ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80006f0:	d216      	bcs.n	8000720 <__udivmoddi4+0x2b0>
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d914      	bls.n	8000720 <__udivmoddi4+0x2b0>
 80006f6:	3e02      	subs	r6, #2
 80006f8:	4461      	add	r1, ip
 80006fa:	1ac9      	subs	r1, r1, r3
 80006fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000700:	e738      	b.n	8000574 <__udivmoddi4+0x104>
 8000702:	462e      	mov	r6, r5
 8000704:	4628      	mov	r0, r5
 8000706:	e705      	b.n	8000514 <__udivmoddi4+0xa4>
 8000708:	4606      	mov	r6, r0
 800070a:	e6e3      	b.n	80004d4 <__udivmoddi4+0x64>
 800070c:	4618      	mov	r0, r3
 800070e:	e6f8      	b.n	8000502 <__udivmoddi4+0x92>
 8000710:	454b      	cmp	r3, r9
 8000712:	d2a9      	bcs.n	8000668 <__udivmoddi4+0x1f8>
 8000714:	ebb9 0802 	subs.w	r8, r9, r2
 8000718:	eb64 0e0c 	sbc.w	lr, r4, ip
 800071c:	3801      	subs	r0, #1
 800071e:	e7a3      	b.n	8000668 <__udivmoddi4+0x1f8>
 8000720:	4646      	mov	r6, r8
 8000722:	e7ea      	b.n	80006fa <__udivmoddi4+0x28a>
 8000724:	4620      	mov	r0, r4
 8000726:	e794      	b.n	8000652 <__udivmoddi4+0x1e2>
 8000728:	4640      	mov	r0, r8
 800072a:	e7d1      	b.n	80006d0 <__udivmoddi4+0x260>
 800072c:	46d0      	mov	r8, sl
 800072e:	e77b      	b.n	8000628 <__udivmoddi4+0x1b8>
 8000730:	3b02      	subs	r3, #2
 8000732:	4461      	add	r1, ip
 8000734:	e732      	b.n	800059c <__udivmoddi4+0x12c>
 8000736:	4630      	mov	r0, r6
 8000738:	e709      	b.n	800054e <__udivmoddi4+0xde>
 800073a:	4464      	add	r4, ip
 800073c:	3802      	subs	r0, #2
 800073e:	e742      	b.n	80005c6 <__udivmoddi4+0x156>

08000740 <__aeabi_idiv0>:
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <llenaArreglo32>:
 *      Author: Win10
 */
#include "c_func.h"

void llenaArreglo32(uint32_t *vectorOut, uint32_t longitud)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	while(longitud--)
 800074e:	e005      	b.n	800075c <llenaArreglo32+0x18>
	{
		vectorOut[longitud] = longitud;
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	601a      	str	r2, [r3, #0]
	while(longitud--)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	1e5a      	subs	r2, r3, #1
 8000760:	603a      	str	r2, [r7, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f4      	bne.n	8000750 <llenaArreglo32+0xc>
	}
}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <llenaArreglo16>:

void llenaArreglo16(uint16_t *vectorOut, uint32_t longitud)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	while(longitud--)
 800077e:	e006      	b.n	800078e <llenaArreglo16+0x1a>
	{
		vectorOut[longitud] = longitud;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	b292      	uxth	r2, r2
 800078c:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	603a      	str	r2, [r7, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f3      	bne.n	8000780 <llenaArreglo16+0xc>
	}
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <llenaArregloSignado1>:

void llenaArregloSignado1(int32_t *vectorOut, uint32_t longitud)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
	while(longitud--)
 80007b0:	e005      	b.n	80007be <llenaArregloSignado1+0x18>
	{
		vectorOut[longitud] = longitud;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	601a      	str	r2, [r3, #0]
	while(longitud--)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	1e5a      	subs	r2, r3, #1
 80007c2:	603a      	str	r2, [r7, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f4      	bne.n	80007b2 <llenaArregloSignado1+0xc>
	}
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <llenaArregloSignado2>:

void llenaArregloSignado2(int32_t *vectorOut, uint32_t longitud)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
	while(longitud--)
 80007e0:	e006      	b.n	80007f0 <llenaArregloSignado2+0x1a>
	{
		vectorOut[longitud] = -1;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	f04f 32ff 	mov.w	r2, #4294967295
 80007ee:	601a      	str	r2, [r3, #0]
	while(longitud--)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	603a      	str	r2, [r7, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1f3      	bne.n	80007e2 <llenaArregloSignado2+0xc>
	}
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <llenaArregloSignado16>:

void llenaArregloSignado16(int16_t *vectorOut, uint32_t longitud)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000812:	e006      	b.n	8000822 <llenaArregloSignado16+0x1a>
	{
		vectorOut[longitud] = -1;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000820:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	603a      	str	r2, [r7, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f3      	bne.n	8000814 <llenaArregloSignado16+0xc>
	}
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <llenaVectorX>:

void llenaVectorX(int16_t *vectorOut, uint32_t longitud)
{
 800083a:	b480      	push	{r7}
 800083c:	b085      	sub	sp, #20
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
	int16_t valor = 21;
 8000844:	2315      	movs	r3, #21
 8000846:	81fb      	strh	r3, [r7, #14]
	while(longitud--)
 8000848:	e009      	b.n	800085e <llenaVectorX+0x24>
	{
		vectorOut[longitud] = valor;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	89fa      	ldrh	r2, [r7, #14]
 8000854:	801a      	strh	r2, [r3, #0]
		valor -= 2;
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	3b02      	subs	r3, #2
 800085a:	b29b      	uxth	r3, r3
 800085c:	81fb      	strh	r3, [r7, #14]
	while(longitud--)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	603a      	str	r2, [r7, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f0      	bne.n	800084a <llenaVectorX+0x10>
	}
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <llenaVectorY>:

void llenaVectorY(int16_t *vectorOut, uint32_t longitud)
{
 8000876:	b480      	push	{r7}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	int16_t valor = 24;
 8000880:	2318      	movs	r3, #24
 8000882:	81fb      	strh	r3, [r7, #14]
	while(longitud--)
 8000884:	e009      	b.n	800089a <llenaVectorY+0x24>
	{
		vectorOut[longitud] = valor;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	89fa      	ldrh	r2, [r7, #14]
 8000890:	801a      	strh	r2, [r3, #0]
		valor -= 2;
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	3b02      	subs	r3, #2
 8000896:	b29b      	uxth	r3, r3
 8000898:	81fb      	strh	r3, [r7, #14]
	while(longitud--)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	603a      	str	r2, [r7, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f0      	bne.n	8000886 <llenaVectorY+0x10>
	}
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <llenaArregloSignado32>:


void llenaArregloSignado32(int32_t *vectorOut, uint32_t longitud)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	int32_t i=-10000;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <llenaArregloSignado32+0x40>)
 80008c0:	60fb      	str	r3, [r7, #12]
	while(longitud--)
 80008c2:	e00a      	b.n	80008da <llenaArregloSignado32+0x26>
	{
		vectorOut[longitud] = i;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4413      	add	r3, r2
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	601a      	str	r2, [r3, #0]
		i=i+30000;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80008d6:	3330      	adds	r3, #48	; 0x30
 80008d8:	60fb      	str	r3, [r7, #12]
	while(longitud--)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	603a      	str	r2, [r7, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1ef      	bne.n	80008c4 <llenaArregloSignado32+0x10>
	}
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	ffffd8f0 	.word	0xffffd8f0

080008f8 <llenaArregloSignado>:

void llenaArregloSignado(int32_t *vectorOut, uint32_t longitud)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	int32_t i=70;
 8000902:	2346      	movs	r3, #70	; 0x46
 8000904:	60fb      	str	r3, [r7, #12]
	while(longitud--)
 8000906:	e008      	b.n	800091a <llenaArregloSignado+0x22>
	{
		vectorOut[longitud] = i;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	601a      	str	r2, [r3, #0]
		i-=10;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3b0a      	subs	r3, #10
 8000918:	60fb      	str	r3, [r7, #12]
	while(longitud--)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	1e5a      	subs	r2, r3, #1
 800091e:	603a      	str	r2, [r7, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1f1      	bne.n	8000908 <llenaArregloSignado+0x10>
	}
	vectorOut[5] = 200;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3314      	adds	r3, #20
 8000928:	22c8      	movs	r2, #200	; 0xc8
 800092a:	601a      	str	r2, [r3, #0]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <zeros>:

//Recorro el arreglo de atrás hacia adelante
void zeros(uint32_t *vector, uint32_t longitud)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	while(longitud--)
 8000942:	e005      	b.n	8000950 <zeros+0x18>
	{
		vector[longitud] = 0;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	603a      	str	r2, [r7, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f4      	bne.n	8000944 <zeros+0xc>
	}
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
	while(longitud--)
 8000976:	e00c      	b.n	8000992 <productoEscalar32+0x2a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	68b9      	ldr	r1, [r7, #8]
 8000988:	440b      	add	r3, r1
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	fb01 f202 	mul.w	r2, r1, r2
 8000990:	601a      	str	r2, [r3, #0]
	while(longitud--)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	1e5a      	subs	r2, r3, #1
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1ed      	bne.n	8000978 <productoEscalar32+0x10>
	}
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b085      	sub	sp, #20
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 80009b8:	e00d      	b.n	80009d6 <productoEscalar16+0x2c>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	440b      	add	r3, r1
 80009cc:	8879      	ldrh	r1, [r7, #2]
 80009ce:	fb11 f202 	smulbb	r2, r1, r2
 80009d2:	b292      	uxth	r2, r2
 80009d4:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1e5a      	subs	r2, r3, #1
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1ec      	bne.n	80009ba <productoEscalar16+0x10>
	}
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	807b      	strh	r3, [r7, #2]
	while(longitud--)
 80009fc:	e01c      	b.n	8000a38 <productoEscalar12+0x4a>
	{
		vectorOut[longitud] = vectorIn[longitud] * escalar;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4413      	add	r3, r2
 8000a06:	881a      	ldrh	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	440b      	add	r3, r1
 8000a10:	8879      	ldrh	r1, [r7, #2]
 8000a12:	fb11 f202 	smulbb	r2, r1, r2
 8000a16:	b292      	uxth	r2, r2
 8000a18:	801a      	strh	r2, [r3, #0]
		if(vectorOut[longitud] > (uint16_t) 0x0FFF)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a28:	d306      	bcc.n	8000a38 <productoEscalar12+0x4a>
		{
			vectorOut[longitud] = (uint16_t) 0x0FFF;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	4413      	add	r3, r2
 8000a32:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a36:	801a      	strh	r2, [r3, #0]
	while(longitud--)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1dd      	bne.n	80009fe <productoEscalar12+0x10>
		}
	}
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <max>:

int32_t max (int32_t * vectorIn, uint32_t longitud)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
    int32_t valorMaximo  = vectorIn[longitud-1]; //Empiezo en el último valor
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a60:	3b01      	subs	r3, #1
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	60fb      	str	r3, [r7, #12]
    int32_t indiceMaximo = longitud-1;			 //Empiezo en el último índice
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]

    while(longitud--)
 8000a72:	e00f      	b.n	8000a94 <max+0x44>
    {
        if(vectorIn[longitud] >= valorMaximo)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dc07      	bgt.n	8000a94 <max+0x44>
        {
        	valorMaximo  = vectorIn[longitud];
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	60fb      	str	r3, [r7, #12]
        	indiceMaximo = longitud;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	60bb      	str	r3, [r7, #8]
    while(longitud--)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	1e5a      	subs	r2, r3, #1
 8000a98:	603a      	str	r2, [r7, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1ea      	bne.n	8000a74 <max+0x24>
        }
    }
    return indiceMaximo;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <invertir>:

void invertir (uint16_t * vector, uint32_t longitud)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	uint16_t aux;
	uint32_t i1 = 0;					//i1 comienza en el primer elemento y luego se incrementa
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
	uint32_t i2 = longitud - 1; 		//i2 comienza en el último elelmento y luego se decrementa
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
	uint32_t inversiones = longitud/2;	//cantidad de inversiones (la mitad del elemento del arreglo, tanto si es par o impar)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
	while(inversiones--)
 8000ac6:	e01b      	b.n	8000b00 <invertir+0x54>
	{
		aux = vector[i2];
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	817b      	strh	r3, [r7, #10]
		vector[i2] = vector[i1];
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	441a      	add	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	440b      	add	r3, r1
 8000ae4:	8812      	ldrh	r2, [r2, #0]
 8000ae6:	801a      	strh	r2, [r3, #0]
		vector[i1] = aux;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	897a      	ldrh	r2, [r7, #10]
 8000af2:	801a      	strh	r2, [r3, #0]
		i1++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
		i2--;
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
	while(inversiones--)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	60fa      	str	r2, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1de      	bne.n	8000ac8 <invertir+0x1c>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <filtroVentana10>:

void filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitudVectorIn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
	uint8_t longitudVentana = 10;
 8000b24:	230a      	movs	r3, #10
 8000b26:	76bb      	strb	r3, [r7, #26]
	uint32_t indice = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t indiceVentana = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
	uint32_t suma = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
	uint32_t promedio = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
	while(indice < longitudVectorIn) // desde 0 hasta 7
 8000b38:	e045      	b.n	8000bc6 <filtroVentana10+0xae>
	{

		for(uint8_t i = 0; i<longitudVentana; i++) // desde 0 hasta 3
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	76fb      	strb	r3, [r7, #27]
 8000b3e:	e021      	b.n	8000b84 <filtroVentana10+0x6c>
		{
			if( (indice+i) < longitudVectorIn)
 8000b40:	7efa      	ldrb	r2, [r7, #27]
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	4413      	add	r3, r2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d904      	bls.n	8000b56 <filtroVentana10+0x3e>
			{
				indiceVentana = (indice+i);
 8000b4c:	7efb      	ldrb	r3, [r7, #27]
 8000b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b50:	4413      	add	r3, r2
 8000b52:	623b      	str	r3, [r7, #32]
 8000b54:	e00a      	b.n	8000b6c <filtroVentana10+0x54>
			}
			else
			{
				indiceVentana = (indice+i) % longitudVectorIn;
 8000b56:	7efa      	ldrb	r2, [r7, #27]
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	4413      	add	r3, r2
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	fb01 f202 	mul.w	r2, r1, r2
 8000b68:	1a9b      	subs	r3, r3, r2
 8000b6a:	623b      	str	r3, [r7, #32]
			}
			suma += vectorIn[indiceVentana];
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i<longitudVentana; i++) // desde 0 hasta 3
 8000b7e:	7efb      	ldrb	r3, [r7, #27]
 8000b80:	3301      	adds	r3, #1
 8000b82:	76fb      	strb	r3, [r7, #27]
 8000b84:	7efa      	ldrb	r2, [r7, #27]
 8000b86:	7ebb      	ldrb	r3, [r7, #26]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d3d9      	bcc.n	8000b40 <filtroVentana10+0x28>
		}

		promedio = (float) suma/longitudVentana;
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	ee07 3a90 	vmov	s15, r3
 8000b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b96:	7ebb      	ldrb	r3, [r7, #26]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba8:	ee17 3a90 	vmov	r3, s15
 8000bac:	617b      	str	r3, [r7, #20]
		vectorOut[indice] = promedio;
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	b292      	uxth	r2, r2
 8000bba:	801a      	strh	r2, [r3, #0]
		indice++;
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
		suma = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
	while(indice < longitudVectorIn) // desde 0 hasta 7
 8000bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3b5      	bcc.n	8000b3a <filtroVentana10+0x22>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	372c      	adds	r7, #44	; 0x2c
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <downsampleM>:

void downsampleM(int32_t * vectorIn, int32_t * vectorOut, uint32_t longitud, uint32_t N)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	603b      	str	r3, [r7, #0]
	uint32_t indiceN = 0;	//recorre vector ignorando cada N elementos
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
	uint32_t indiceOut=0;	//índice vector de salida, será menor a medida que se quitan elementos
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]

	for(uint32_t indiceIn=0; indiceIn<longitud; indiceIn++) //recorre vector de entrada
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e01a      	b.n	8000c2e <downsampleM+0x52>
	{

		if( indiceN >= (N-1) )	//descarta el N-ésimo elemento, vuelve a contar desde 0
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	69fa      	ldr	r2, [r7, #28]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d302      	bcc.n	8000c08 <downsampleM+0x2c>
		{
			indiceN = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	e00f      	b.n	8000c28 <downsampleM+0x4c>
		}
		else		   			//llega hasta N-1
		{
			vectorOut[indiceOut] = vectorIn[indiceIn];
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	441a      	add	r2, r3
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	440b      	add	r3, r1
 8000c18:	6812      	ldr	r2, [r2, #0]
 8000c1a:	601a      	str	r2, [r3, #0]
			indiceOut++;
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
			indiceN ++;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3301      	adds	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
	for(uint32_t indiceIn=0; indiceIn<longitud; indiceIn++) //recorre vector de entrada
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3e0      	bcc.n	8000bf8 <downsampleM+0x1c>
		}
	}
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	3724      	adds	r7, #36	; 0x24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <pack32to16>:

void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
    while(longitud--)
 8000c50:	e00b      	b.n	8000c6a <pack32to16+0x26>
    {
        vectorOut[longitud] = vectorIn[longitud] >> 16;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4413      	add	r3, r2
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1419      	asrs	r1, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	b20a      	sxth	r2, r1
 8000c68:	801a      	strh	r2, [r3, #0]
    while(longitud--)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1ee      	bne.n	8000c52 <pack32to16+0xe>
    }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <corr>:

void corr (int16_t *vectorX, int16_t *vectorY, int16_t *vectorCorr, uint32_t longitud)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b087      	sub	sp, #28
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	603b      	str	r3, [r7, #0]
	uint32_t longitudVector = longitud;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	613b      	str	r3, [r7, #16]
	while(longitud--)
 8000c94:	e035      	b.n	8000d02 <corr+0x80>
	{
		vectorCorr[longitud] = 0;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	801a      	strh	r2, [r3, #0]
		for(int32_t i = 0; i < longitudVector; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e028      	b.n	8000cfa <corr+0x78>
		{
			if( i>=longitud )
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d821      	bhi.n	8000cf4 <corr+0x72>
			{
				vectorCorr[longitud] += (vectorX[i]*vectorY[i-longitud]);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	68f9      	ldr	r1, [r7, #12]
 8000cc4:	440b      	add	r3, r1
 8000cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	1ac3      	subs	r3, r0, r3
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	68b8      	ldr	r0, [r7, #8]
 8000cd6:	4403      	add	r3, r0
 8000cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	fb11 f303 	smulbb	r3, r1, r3
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	b20a      	sxth	r2, r1
 8000cf2:	801a      	strh	r2, [r3, #0]
		for(int32_t i = 0; i < longitudVector; i++)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d8d2      	bhi.n	8000ca8 <corr+0x26>
	while(longitud--)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	1e5a      	subs	r2, r3, #1
 8000d06:	603a      	str	r2, [r7, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1c4      	bne.n	8000c96 <corr+0x14>
			}
		}
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	371c      	adds	r7, #28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b088      	sub	sp, #32
 8000d1e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000d20:	f3ef 8314 	mrs	r3, CONTROL
 8000d24:	607b      	str	r3, [r7, #4]
  return(result);
 8000d26:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000d28:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	f383 8814 	msr	CONTROL, r3
}
 8000d3c:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000d3e:	f3ef 8314 	mrs	r3, CONTROL
 8000d42:	60fb      	str	r3, [r7, #12]
  return(result);
 8000d44:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000d46:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f023 0301 	bic.w	r3, r3, #1
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	f383 8814 	msr	CONTROL, r3
}
 8000d5a:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000d5c:	f3ef 8314 	mrs	r3, CONTROL
 8000d60:	617b      	str	r3, [r7, #20]
  return(result);
 8000d62:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000d64:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000d66:	f7ff fa43 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000d6a:	f3ef 8314 	mrs	r3, CONTROL
 8000d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d70:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000d72:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d80:	b0bc      	sub	sp, #240	; 0xf0
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 ff92 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 fb20 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f000 fc2e 	bl	80015ec <MX_GPIO_Init>
  MX_ETH_Init();
 8000d90:	f000 fb86 	bl	80014a0 <MX_ETH_Init>


  MX_USART3_UART_Init();
 8000d94:	f000 fbd2 	bl	800153c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d98:	f000 fbfa 	bl	8001590 <MX_USB_OTG_FS_PCD_Init>
  printf("HOLA\r\n");
 8000d9c:	48f4      	ldr	r0, [pc, #976]	; (8001170 <main+0x3f4>)
 8000d9e:	f003 fa05 	bl	80041ac <puts>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000da2:	f7ff ffba 	bl	8000d1a <PrivilegiosSVC>

  /* USER CODE END 2 */
  uint32_t miLongitud = 10;
 8000da6:	230a      	movs	r3, #10
 8000da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t miEscalar1  = 3;
 8000dac:	2303      	movs	r3, #3
 8000dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t miEscalar2  = 10;
 8000db2:	230a      	movs	r3, #10
 8000db4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint32_t miEscalar3  = 100;
 8000db8:	2364      	movs	r3, #100	; 0x64
 8000dba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t miArreglo32[miLongitud];
 8000dbe:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000dca:	2300      	movs	r3, #0
 8000dcc:	460c      	mov	r4, r1
 8000dce:	461d      	mov	r5, r3
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	016b      	lsls	r3, r5, #5
 8000dda:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000dde:	0162      	lsls	r2, r4, #5
 8000de0:	2300      	movs	r3, #0
 8000de2:	4688      	mov	r8, r1
 8000de4:	4699      	mov	r9, r3
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000df2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000df6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000dfa:	008b      	lsls	r3, r1, #2
 8000dfc:	3307      	adds	r3, #7
 8000dfe:	08db      	lsrs	r3, r3, #3
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	ebad 0d03 	sub.w	sp, sp, r3
 8000e06:	466b      	mov	r3, sp
 8000e08:	3303      	adds	r3, #3
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint16_t miArreglo16[miLongitud];
 8000e12:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000e16:	460b      	mov	r3, r1
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e1e:	2300      	movs	r3, #0
 8000e20:	468a      	mov	sl, r1
 8000e22:	469b      	mov	fp, r3
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000e30:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000e34:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8000e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000e4e:	4628      	mov	r0, r5
 8000e50:	0103      	lsls	r3, r0, #4
 8000e52:	4620      	mov	r0, r4
 8000e54:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000e58:	4620      	mov	r0, r4
 8000e5a:	0102      	lsls	r2, r0, #4
 8000e5c:	004b      	lsls	r3, r1, #1
 8000e5e:	3307      	adds	r3, #7
 8000e60:	08db      	lsrs	r3, r3, #3
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	ebad 0d03 	sub.w	sp, sp, r3
 8000e68:	466b      	mov	r3, sp
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint16_t miArreglo16_out[miLongitud];
 8000e74:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000e80:	2300      	movs	r3, #0
 8000e82:	67b9      	str	r1, [r7, #120]	; 0x78
 8000e84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000e92:	4628      	mov	r0, r5
 8000e94:	0103      	lsls	r3, r0, #4
 8000e96:	4620      	mov	r0, r4
 8000e98:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	0102      	lsls	r2, r0, #4
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	6739      	str	r1, [r7, #112]	; 0x70
 8000ea4:	677b      	str	r3, [r7, #116]	; 0x74
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	0103      	lsls	r3, r0, #4
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	0102      	lsls	r2, r0, #4
 8000ec0:	004b      	lsls	r3, r1, #1
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	ebad 0d03 	sub.w	sp, sp, r3
 8000ecc:	466b      	mov	r3, sp
 8000ece:	3301      	adds	r3, #1
 8000ed0:	085b      	lsrs	r3, r3, #1
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  int32_t  miArregloSignado[miLongitud];
 8000ed8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000edc:	460b      	mov	r3, r1
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	66b9      	str	r1, [r7, #104]	; 0x68
 8000ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	0143      	lsls	r3, r0, #5
 8000efa:	4620      	mov	r0, r4
 8000efc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f00:	4620      	mov	r0, r4
 8000f02:	0142      	lsls	r2, r0, #5
 8000f04:	2300      	movs	r3, #0
 8000f06:	6639      	str	r1, [r7, #96]	; 0x60
 8000f08:	667b      	str	r3, [r7, #100]	; 0x64
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000f16:	4628      	mov	r0, r5
 8000f18:	0143      	lsls	r3, r0, #5
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f20:	4620      	mov	r0, r4
 8000f22:	0142      	lsls	r2, r0, #5
 8000f24:	008b      	lsls	r3, r1, #2
 8000f26:	3307      	adds	r3, #7
 8000f28:	08db      	lsrs	r3, r3, #3
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f30:	466b      	mov	r3, sp
 8000f32:	3303      	adds	r3, #3
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  int32_t  miArregloSignado_out[miLongitud];
 8000f3c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000f40:	460b      	mov	r3, r1
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f48:	2300      	movs	r3, #0
 8000f4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8000f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	0143      	lsls	r3, r0, #5
 8000f5e:	4620      	mov	r0, r4
 8000f60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f64:	4620      	mov	r0, r4
 8000f66:	0142      	lsls	r2, r0, #5
 8000f68:	2300      	movs	r3, #0
 8000f6a:	6539      	str	r1, [r7, #80]	; 0x50
 8000f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	0143      	lsls	r3, r0, #5
 8000f7e:	4620      	mov	r0, r4
 8000f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f84:	4620      	mov	r0, r4
 8000f86:	0142      	lsls	r2, r0, #5
 8000f88:	008b      	lsls	r3, r1, #2
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	ebad 0d03 	sub.w	sp, sp, r3
 8000f94:	466b      	mov	r3, sp
 8000f96:	3303      	adds	r3, #3
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  llenaArreglo32(miArreglo32,miLongitud);
 8000fa0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000fa4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000fa8:	f7ff fbcc 	bl	8000744 <llenaArreglo32>
  llenaArreglo16(miArreglo16,miLongitud);
 8000fac:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000fb0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000fb4:	f7ff fbde 	bl	8000774 <llenaArreglo16>
  llenaArregloSignado(miArregloSignado,miLongitud);
 8000fb8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000fbc:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000fc0:	f7ff fc9a 	bl	80008f8 <llenaArregloSignado>

  //zeros
  zeros(miArreglo32,miLongitud);
 8000fc4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000fc8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000fcc:	f7ff fcb4 	bl	8000938 <zeros>
  asm_zeros(miArreglo32,miLongitud);
 8000fd0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000fd4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000fd8:	f7ff f90e 	bl	80001f8 <asm_zeros>

  //32 bits
  productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 8000fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000fe0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000fe4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000fe8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000fec:	f7ff fcbc 	bl	8000968 <productoEscalar32>
  asm_productoEscalar32(miArreglo32,miArreglo32,miLongitud,miEscalar1);
 8000ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ff4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000ff8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000ffc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001000:	f7ff f901 	bl	8000206 <asm_productoEscalar32>

  //16bits
  productoEscalar16(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 8001004:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001008:	b29b      	uxth	r3, r3
 800100a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800100e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001012:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001016:	f7ff fcc8 	bl	80009aa <productoEscalar16>
  asm_productoEscalar16(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 800101a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800101e:	b29b      	uxth	r3, r3
 8001020:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001024:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001028:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800102c:	f7ff f8f8 	bl	8000220 <asm_productoEscalar16>

  //12 bits
  llenaArreglo16(miArreglo16,miLongitud);
 8001030:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001034:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001038:	f7ff fb9c 	bl	8000774 <llenaArreglo16>
  productoEscalar12(miArreglo16,miArreglo16,miLongitud,miEscalar2);
 800103c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001040:	b29b      	uxth	r3, r3
 8001042:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001046:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800104a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800104e:	f7ff fcce 	bl	80009ee <productoEscalar12>
  asm_productoEscalar12(miArreglo16,miArreglo16,miLongitud,miEscalar3);
 8001052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001056:	b29b      	uxth	r3, r3
 8001058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800105c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001060:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001064:	f7ff f8ed 	bl	8000242 <asm_productoEscalar12>

  //maximo
  int32_t numMax = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  numMax = max(miArregloSignado,miLongitud);
 800106e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001072:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8001076:	f7ff fceb 	bl	8000a50 <max>
 800107a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  numMax = asm_max(miArregloSignado,miLongitud);
 800107e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001082:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8001086:	f7ff f904 	bl	8000292 <asm_max>
 800108a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  numMax++;
 800108e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001092:	3301      	adds	r3, #1
 8001094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  //invertir
  llenaArreglo16(miArreglo16,miLongitud);
 8001098:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800109c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80010a0:	f7ff fb68 	bl	8000774 <llenaArreglo16>
  invertir(miArreglo16,miLongitud);
 80010a4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80010a8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80010ac:	f7ff fcfe 	bl	8000aac <invertir>
  asm_invertir(miArreglo16,miLongitud);
 80010b0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80010b4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80010b8:	f7ff f905 	bl	80002c6 <asm_invertir>

  //filtroVentana
  llenaArreglo16(miArreglo16,miLongitud);
 80010bc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80010c0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80010c4:	f7ff fb56 	bl	8000774 <llenaArreglo16>
  filtroVentana10(miArreglo16,miArreglo16_out,miLongitud);
 80010c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80010cc:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80010d0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80010d4:	f7ff fd20 	bl	8000b18 <filtroVentana10>
  llenaArreglo16(miArreglo16,miLongitud);
 80010d8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80010dc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80010e0:	f7ff fb48 	bl	8000774 <llenaArreglo16>
  asm_filtroVentana10(miArreglo16,miArreglo16_out,miLongitud);
 80010e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80010e8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80010ec:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80010f0:	f7ff f8ff 	bl	80002f2 <asm_filtroVentana10>


  //decima
  llenaArregloSignado1(miArregloSignado,miLongitud);
 80010f4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80010f8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80010fc:	f7ff fb53 	bl	80007a6 <llenaArregloSignado1>
  llenaArregloSignado2(miArregloSignado_out,miLongitud);
 8001100:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001104:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001108:	f7ff fb65 	bl	80007d6 <llenaArregloSignado2>
  downsampleM(miArregloSignado,miArregloSignado_out,miLongitud,3);
 800110c:	2303      	movs	r3, #3
 800110e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001112:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001116:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800111a:	f7ff fd5f 	bl	8000bdc <downsampleM>
  llenaArregloSignado2(miArregloSignado_out,miLongitud);
 800111e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001122:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001126:	f7ff fb56 	bl	80007d6 <llenaArregloSignado2>
  asm_downsampleM(miArregloSignado,miArregloSignado_out,miLongitud,3);
 800112a:	2303      	movs	r3, #3
 800112c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001130:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001134:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8001138:	f7ff f90e 	bl	8000358 <asm_downsampleM>

  //empaqueta
  int32_t  miArregloSignado32[miLongitud];
 800113c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001140:	460b      	mov	r3, r1
 8001142:	3b01      	subs	r3, #1
 8001144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001148:	2300      	movs	r3, #0
 800114a:	64b9      	str	r1, [r7, #72]	; 0x48
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800115a:	4628      	mov	r0, r5
 800115c:	0143      	lsls	r3, r0, #5
 800115e:	4620      	mov	r0, r4
 8001160:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001164:	4620      	mov	r0, r4
 8001166:	0142      	lsls	r2, r0, #5
 8001168:	2300      	movs	r3, #0
 800116a:	6439      	str	r1, [r7, #64]	; 0x40
 800116c:	e002      	b.n	8001174 <main+0x3f8>
 800116e:	bf00      	nop
 8001170:	080050c0 	.word	0x080050c0
 8001174:	647b      	str	r3, [r7, #68]	; 0x44
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001182:	4628      	mov	r0, r5
 8001184:	0143      	lsls	r3, r0, #5
 8001186:	4620      	mov	r0, r4
 8001188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800118c:	4620      	mov	r0, r4
 800118e:	0142      	lsls	r2, r0, #5
 8001190:	008b      	lsls	r3, r1, #2
 8001192:	3307      	adds	r3, #7
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	ebad 0d03 	sub.w	sp, sp, r3
 800119c:	466b      	mov	r3, sp
 800119e:	3303      	adds	r3, #3
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int16_t  miArregloSignado16[miLongitud];
 80011a8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80011ac:	460b      	mov	r3, r1
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80011b4:	2300      	movs	r3, #0
 80011b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80011c6:	4628      	mov	r0, r5
 80011c8:	0103      	lsls	r3, r0, #4
 80011ca:	4620      	mov	r0, r4
 80011cc:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80011d0:	4620      	mov	r0, r4
 80011d2:	0102      	lsls	r2, r0, #4
 80011d4:	2300      	movs	r3, #0
 80011d6:	6339      	str	r1, [r7, #48]	; 0x30
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80011e6:	4628      	mov	r0, r5
 80011e8:	0103      	lsls	r3, r0, #4
 80011ea:	4620      	mov	r0, r4
 80011ec:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80011f0:	4620      	mov	r0, r4
 80011f2:	0102      	lsls	r2, r0, #4
 80011f4:	004b      	lsls	r3, r1, #1
 80011f6:	3307      	adds	r3, #7
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001200:	466b      	mov	r3, sp
 8001202:	3301      	adds	r3, #1
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  llenaArregloSignado32(miArregloSignado32,miLongitud);
 800120c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001210:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001214:	f7ff fb4e 	bl	80008b4 <llenaArregloSignado32>
  llenaArregloSignado16(miArregloSignado16,miLongitud);
 8001218:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800121c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001220:	f7ff faf2 	bl	8000808 <llenaArregloSignado16>
  pack32to16(miArregloSignado32,miArregloSignado16,miLongitud);
 8001224:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001228:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800122c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001230:	f7ff fd08 	bl	8000c44 <pack32to16>
  asm_pack32to16(miArregloSignado32,miArregloSignado16,miLongitud);
 8001234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001238:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800123c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001240:	f7ff f89f 	bl	8000382 <asm_pack32to16>

  //correlación
  int16_t  vectorX[miLongitud];
 8001244:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001248:	460b      	mov	r3, r1
 800124a:	3b01      	subs	r3, #1
 800124c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001250:	2300      	movs	r3, #0
 8001252:	62b9      	str	r1, [r7, #40]	; 0x28
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001262:	4628      	mov	r0, r5
 8001264:	0103      	lsls	r3, r0, #4
 8001266:	4620      	mov	r0, r4
 8001268:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800126c:	4620      	mov	r0, r4
 800126e:	0102      	lsls	r2, r0, #4
 8001270:	2300      	movs	r3, #0
 8001272:	6239      	str	r1, [r7, #32]
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001282:	4628      	mov	r0, r5
 8001284:	0103      	lsls	r3, r0, #4
 8001286:	4620      	mov	r0, r4
 8001288:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800128c:	4620      	mov	r0, r4
 800128e:	0102      	lsls	r2, r0, #4
 8001290:	004b      	lsls	r3, r1, #1
 8001292:	3307      	adds	r3, #7
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	ebad 0d03 	sub.w	sp, sp, r3
 800129c:	466b      	mov	r3, sp
 800129e:	3301      	adds	r3, #1
 80012a0:	085b      	lsrs	r3, r3, #1
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int16_t  vectorY[miLongitud];
 80012a8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80012ac:	460b      	mov	r3, r1
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012b4:	2300      	movs	r3, #0
 80012b6:	61b9      	str	r1, [r7, #24]
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80012c6:	4628      	mov	r0, r5
 80012c8:	0103      	lsls	r3, r0, #4
 80012ca:	4620      	mov	r0, r4
 80012cc:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80012d0:	4620      	mov	r0, r4
 80012d2:	0102      	lsls	r2, r0, #4
 80012d4:	2300      	movs	r3, #0
 80012d6:	6139      	str	r1, [r7, #16]
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80012e6:	4628      	mov	r0, r5
 80012e8:	0103      	lsls	r3, r0, #4
 80012ea:	4620      	mov	r0, r4
 80012ec:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80012f0:	4620      	mov	r0, r4
 80012f2:	0102      	lsls	r2, r0, #4
 80012f4:	004b      	lsls	r3, r1, #1
 80012f6:	3307      	adds	r3, #7
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001300:	466b      	mov	r3, sp
 8001302:	3301      	adds	r3, #1
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int16_t  vectorCorr[miLongitud];
 800130c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001310:	460b      	mov	r3, r1
 8001312:	3b01      	subs	r3, #1
 8001314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001318:	2300      	movs	r3, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800132a:	4628      	mov	r0, r5
 800132c:	0103      	lsls	r3, r0, #4
 800132e:	4620      	mov	r0, r4
 8001330:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001334:	4620      	mov	r0, r4
 8001336:	0102      	lsls	r2, r0, #4
 8001338:	2300      	movs	r3, #0
 800133a:	6039      	str	r1, [r7, #0]
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800134a:	4628      	mov	r0, r5
 800134c:	0103      	lsls	r3, r0, #4
 800134e:	4620      	mov	r0, r4
 8001350:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001354:	4620      	mov	r0, r4
 8001356:	0102      	lsls	r2, r0, #4
 8001358:	004b      	lsls	r3, r1, #1
 800135a:	3307      	adds	r3, #7
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	ebad 0d03 	sub.w	sp, sp, r3
 8001364:	466b      	mov	r3, sp
 8001366:	3301      	adds	r3, #1
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  llenaVectorX(vectorX,miLongitud);
 8001370:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001374:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001378:	f7ff fa5f 	bl	800083a <llenaVectorX>
  llenaVectorY(vectorY,miLongitud);
 800137c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001380:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001384:	f7ff fa77 	bl	8000876 <llenaVectorY>
  llenaArregloSignado16(vectorCorr,miLongitud);
 8001388:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800138c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001390:	f7ff fa3a 	bl	8000808 <llenaArregloSignado16>

  corr(vectorX,vectorY,vectorCorr,miLongitud);
 8001394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001398:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800139c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80013a0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80013a4:	f7ff fc6d 	bl	8000c82 <corr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char miChar = 'a';
 80013a8:	2361      	movs	r3, #97	; 0x61
 80013aa:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  while (1)
  {
    /* USER CODE END WHILE */
	  miChar++;
 80013ae:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80013b2:	3301      	adds	r3, #1
 80013b4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	  printf("HOLA %c\r\n",miChar);
 80013b8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80013bc:	4619      	mov	r1, r3
 80013be:	4802      	ldr	r0, [pc, #8]	; (80013c8 <main+0x64c>)
 80013c0:	f002 fe6e 	bl	80040a0 <iprintf>
	  miChar++;
 80013c4:	e7f3      	b.n	80013ae <main+0x632>
 80013c6:	bf00      	nop
 80013c8:	080050c8 	.word	0x080050c8

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	; 0x50
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2230      	movs	r2, #48	; 0x30
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fe58 	bl	8004090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <SystemClock_Config+0xcc>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a27      	ldr	r2, [pc, #156]	; (8001498 <SystemClock_Config+0xcc>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <SystemClock_Config+0xcc>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <SystemClock_Config+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <SystemClock_Config+0xd0>)
 8001416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <SystemClock_Config+0xd0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001428:	2301      	movs	r3, #1
 800142a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800142c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001436:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800143c:	2308      	movs	r3, #8
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001440:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001446:	2302      	movs	r3, #2
 8001448:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800144a:	2307      	movs	r3, #7
 800144c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4618      	mov	r0, r3
 8001454:	f001 fb96 	bl	8002b84 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800145e:	f000 f973 	bl	8001748 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
      clocks dividers */
   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001462:	230f      	movs	r3, #15
 8001464:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800146e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001472:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	61fb      	str	r3, [r7, #28]
   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2105      	movs	r1, #5
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fdf7 	bl	8003074 <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xc4>
   {
     /* Initialization Error */
     Error_Handler();
 800148c:	f000 f95c 	bl	8001748 <Error_Handler>
   }
}
 8001490:	bf00      	nop
 8001492:	3750      	adds	r7, #80	; 0x50
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_ETH_Init+0x84>)
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <MX_ETH_Init+0x88>)
 80014a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_ETH_Init+0x8c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <MX_ETH_Init+0x8c>)
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_ETH_Init+0x8c>)
 80014b8:	22e1      	movs	r2, #225	; 0xe1
 80014ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_ETH_Init+0x8c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_ETH_Init+0x8c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_ETH_Init+0x8c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_ETH_Init+0x84>)
 80014d0:	4a16      	ldr	r2, [pc, #88]	; (800152c <MX_ETH_Init+0x8c>)
 80014d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_ETH_Init+0x84>)
 80014d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_ETH_Init+0x84>)
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <MX_ETH_Init+0x90>)
 80014e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_ETH_Init+0x84>)
 80014e4:	4a13      	ldr	r2, [pc, #76]	; (8001534 <MX_ETH_Init+0x94>)
 80014e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_ETH_Init+0x84>)
 80014ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_ETH_Init+0x84>)
 80014f2:	f000 fd51 	bl	8001f98 <HAL_ETH_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80014fc:	f000 f924 	bl	8001748 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001500:	2238      	movs	r2, #56	; 0x38
 8001502:	2100      	movs	r1, #0
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_ETH_Init+0x98>)
 8001506:	f002 fdc3 	bl	8004090 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_ETH_Init+0x98>)
 800150c:	2221      	movs	r2, #33	; 0x21
 800150e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_ETH_Init+0x98>)
 8001512:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001516:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_ETH_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000204 	.word	0x20000204
 8001528:	40028000 	.word	0x40028000
 800152c:	20000804 	.word	0x20000804
 8001530:	20000164 	.word	0x20000164
 8001534:	200000c4 	.word	0x200000c4
 8001538:	2000008c 	.word	0x2000008c

0800153c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_USART3_UART_Init+0x50>)
 8001544:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001548:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800154c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 800155c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001560:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001564:	220c      	movs	r2, #12
 8001566:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001576:	f001 ff9d 	bl	80034b4 <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART3_UART_Init+0x48>
  {
	//printf("UART ERROR\r\n");
    Error_Handler();
 8001580:	f000 f8e2 	bl	8001748 <Error_Handler>
  //printf("UART OK\r\n");
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200002b4 	.word	0x200002b4
 800158c:	40004800 	.word	0x40004800

08001590 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001596:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800159a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159e:	2204      	movs	r2, #4
 80015a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b0:	2202      	movs	r2, #2
 80015b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d4:	f001 f9b9 	bl	800294a <HAL_PCD_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015de:	f000 f8b3 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200002f8 	.word	0x200002f8

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a4b      	ldr	r2, [pc, #300]	; (8001738 <MX_GPIO_Init+0x14c>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a44      	ldr	r2, [pc, #272]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <MX_GPIO_Init+0x14c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b37      	ldr	r3, [pc, #220]	; (8001738 <MX_GPIO_Init+0x14c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a36      	ldr	r2, [pc, #216]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a2f      	ldr	r2, [pc, #188]	; (8001738 <MX_GPIO_Init+0x14c>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a28      	ldr	r2, [pc, #160]	; (8001738 <MX_GPIO_Init+0x14c>)
 8001698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <MX_GPIO_Init+0x14c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80016b0:	4822      	ldr	r0, [pc, #136]	; (800173c <MX_GPIO_Init+0x150>)
 80016b2:	f001 f931 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2140      	movs	r1, #64	; 0x40
 80016ba:	4821      	ldr	r0, [pc, #132]	; (8001740 <MX_GPIO_Init+0x154>)
 80016bc:	f001 f92c 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	481b      	ldr	r0, [pc, #108]	; (8001744 <MX_GPIO_Init+0x158>)
 80016d8:	f000 ff72 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	4811      	ldr	r0, [pc, #68]	; (800173c <MX_GPIO_Init+0x150>)
 80016f6:	f000 ff63 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016fa:	2340      	movs	r3, #64	; 0x40
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <MX_GPIO_Init+0x154>)
 8001712:	f000 ff55 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_GPIO_Init+0x154>)
 800172a:	f000 ff49 	bl	80025c0 <HAL_GPIO_Init>

}
 800172e:	bf00      	nop
 8001730:	3730      	adds	r7, #48	; 0x30
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400
 8001740:	40021800 	.word	0x40021800
 8001744:	40020800 	.word	0x40020800

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x8>
	...

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_MspInit+0x4c>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a55      	ldr	r2, [pc, #340]	; (8001918 <HAL_ETH_MspInit+0x174>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f040 80a4 	bne.w	8001910 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_ETH_MspInit+0x178>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	4b45      	ldr	r3, [pc, #276]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a44      	ldr	r2, [pc, #272]	; (800191c <HAL_ETH_MspInit+0x178>)
 800180a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4a3d      	ldr	r2, [pc, #244]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6313      	str	r3, [r2, #48]	; 0x30
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_ETH_MspInit+0x178>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_ETH_MspInit+0x178>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a36      	ldr	r2, [pc, #216]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_ETH_MspInit+0x178>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_ETH_MspInit+0x178>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a2f      	ldr	r2, [pc, #188]	; (800191c <HAL_ETH_MspInit+0x178>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_ETH_MspInit+0x178>)
 800187a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_ETH_MspInit+0x178>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800188c:	2332      	movs	r3, #50	; 0x32
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800189c:	230b      	movs	r3, #11
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	4619      	mov	r1, r3
 80018a6:	481e      	ldr	r0, [pc, #120]	; (8001920 <HAL_ETH_MspInit+0x17c>)
 80018a8:	f000 fe8a 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018ac:	2386      	movs	r3, #134	; 0x86
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018bc:	230b      	movs	r3, #11
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4817      	ldr	r0, [pc, #92]	; (8001924 <HAL_ETH_MspInit+0x180>)
 80018c8:	f000 fe7a 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018de:	230b      	movs	r3, #11
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <HAL_ETH_MspInit+0x184>)
 80018ea:	f000 fe69 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001900:	230b      	movs	r3, #11
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <HAL_ETH_MspInit+0x188>)
 800190c:	f000 fe58 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3738      	adds	r7, #56	; 0x38
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40028000 	.word	0x40028000
 800191c:	40023800 	.word	0x40023800
 8001920:	40020800 	.word	0x40020800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40021800 	.word	0x40021800

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <HAL_UART_MspInit+0x84>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12c      	bne.n	80019ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_UART_MspInit+0x88>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_UART_MspInit+0x88>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_UART_MspInit+0x88>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_UART_MspInit+0x88>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_UART_MspInit+0x88>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_UART_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800198a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800199c:	2307      	movs	r3, #7
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_UART_MspInit+0x8c>)
 80019a8:	f000 fe0a 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40004800 	.word	0x40004800
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020c00 	.word	0x40020c00

080019c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e0:	d13f      	bne.n	8001a62 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_PCD_MspInit+0xac>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_PCD_MspInit+0xac>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_PCD_MspInit+0xac>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019fe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a10:	230a      	movs	r3, #10
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <HAL_PCD_MspInit+0xb0>)
 8001a1c:	f000 fdd0 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	480e      	ldr	r0, [pc, #56]	; (8001a70 <HAL_PCD_MspInit+0xb0>)
 8001a36:	f000 fdc3 	bl	80025c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_PCD_MspInit+0xac>)
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_PCD_MspInit+0xac>)
 8001a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a44:	6353      	str	r3, [r2, #52]	; 0x34
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_PCD_MspInit+0xac>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_PCD_MspInit+0xac>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_PCD_MspInit+0xac>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001a98:	f3ef 8314 	mrs	r3, CONTROL
 8001a9c:	607b      	str	r3, [r7, #4]
  return(result);
 8001a9e:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001aa0:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f383 8814 	msr	CONTROL, r3
}
 8001ab4:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f000 f92f 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e00a      	b.n	8001b12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001afc:	f3af 8000 	nop.w
 8001b00:	4601      	mov	r1, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	dbf0      	blt.n	8001afc <_read+0x12>
	}

return len;
 8001b1a:	687b      	ldr	r3, [r7, #4]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e009      	b.n	8001b4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	60ba      	str	r2, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	dbf1      	blt.n	8001b36 <_write+0x12>
	}
	return len;
 8001b52:	687b      	ldr	r3, [r7, #4]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_close>:

int _close(int file)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b84:	605a      	str	r2, [r3, #4]
	return 0;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_isatty>:

int _isatty(int file)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <_sbrk+0x5c>)
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <_sbrk+0x60>)
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_sbrk+0x64>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <_sbrk+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf4:	f002 fa22 	bl	800403c <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <_sbrk+0x64>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20030000 	.word	0x20030000
 8001c24:	00000400 	.word	0x00000400
 8001c28:	2000080c 	.word	0x2000080c
 8001c2c:	20000828 	.word	0x20000828

08001c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <SystemInit+0x20>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <SystemInit+0x20>)
 8001c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001c54:	bf00      	nop
  nop
 8001c56:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5e:	490e      	ldr	r1, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c74:	4c0b      	ldr	r4, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c82:	f7ff ffd5 	bl	8001c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c86:	f002 f9df 	bl	8004048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8a:	f7ff f877 	bl	8000d7c <main>
  bx  lr    
 8001c8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c9c:	08005194 	.word	0x08005194
  ldr r2, =_sbss
 8001ca0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ca4:	20000824 	.word	0x20000824

08001ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC_IRQHandler>
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_Init+0x34>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_Init+0x34>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6013      	str	r3, [r2, #0]
/*#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif // DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_Init+0x34>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_Init+0x34>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 f931 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f808 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff fd3e 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x54>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x58>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f93b 	bl	8001f7e <HAL_SYSTICK_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00e      	b.n	8001d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d80a      	bhi.n	8001d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f000 f911 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <HAL_InitTick+0x5c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000004 	.word	0x20000004

08001d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000810 	.word	0x20000810

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000810 	.word	0x20000810

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000008 	.word	0x20000008

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff47 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff5c 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffb0 	bl	8001eec <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06c      	b.n	8002084 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2223      	movs	r2, #35	; 0x23
 8001fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fbf1 	bl	80017a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_ETH_Init+0xf4>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a30      	ldr	r2, [pc, #192]	; (800208c <HAL_ETH_Init+0xf4>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_ETH_Init+0xf4>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fde:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_ETH_Init+0xf8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4a2b      	ldr	r2, [pc, #172]	; (8002090 <HAL_ETH_Init+0xf8>)
 8001fe4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fe8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_ETH_Init+0xf8>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4927      	ldr	r1, [pc, #156]	; (8002090 <HAL_ETH_Init+0xf8>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_ETH_Init+0xf8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002012:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002014:	f7ff feaa 	bl	8001d6c <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800201a:	e011      	b.n	8002040 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800201c:	f7ff fea6 	bl	8001d6c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800202a:	d909      	bls.n	8002040 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2204      	movs	r2, #4
 8002030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	22e0      	movs	r2, #224	; 0xe0
 8002038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e021      	b.n	8002084 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1e4      	bne.n	800201c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f944 	bl	80022e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f9eb 	bl	8002434 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fa41 	bl	80024e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	461a      	mov	r2, r3
 800206a:	2100      	movs	r1, #0
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f9a9 	bl	80023c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2210      	movs	r2, #16
 800207e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	40013800 	.word	0x40013800

08002094 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <ETH_SetMACConfig+0x134>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	7c1b      	ldrb	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <ETH_SetMACConfig+0x28>
 80020b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020ba:	e000      	b.n	80020be <ETH_SetMACConfig+0x2a>
 80020bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7c5b      	ldrb	r3, [r3, #17]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <ETH_SetMACConfig+0x38>
 80020c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ca:	e000      	b.n	80020ce <ETH_SetMACConfig+0x3a>
 80020cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	7fdb      	ldrb	r3, [r3, #31]
 80020da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	7f92      	ldrb	r2, [r2, #30]
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d102      	bne.n	80020f2 <ETH_SetMACConfig+0x5e>
 80020ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f0:	e000      	b.n	80020f4 <ETH_SetMACConfig+0x60>
 80020f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80020f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	7f1b      	ldrb	r3, [r3, #28]
 80020fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002102:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	791b      	ldrb	r3, [r3, #4]
 8002108:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800210a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002112:	2a00      	cmp	r2, #0
 8002114:	d102      	bne.n	800211c <ETH_SetMACConfig+0x88>
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	e000      	b.n	800211e <ETH_SetMACConfig+0x8a>
 800211c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800211e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	7bdb      	ldrb	r3, [r3, #15]
 8002124:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002126:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800212c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002134:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002136:	4313      	orrs	r3, r2
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff fe18 	bl	8001d84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	f64f 7341 	movw	r3, #65345	; 0xff41
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002172:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217a:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8002180:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8002188:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002190:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002198:	4313      	orrs	r3, r2
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7ff fde7 	bl	8001d84 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	ff20810f 	.word	0xff20810f

080021cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <ETH_SetDMAConfig+0x110>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	7b1b      	ldrb	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <ETH_SetDMAConfig+0x2c>
 80021f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021f6:	e000      	b.n	80021fa <ETH_SetDMAConfig+0x2e>
 80021f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	7b5b      	ldrb	r3, [r3, #13]
 80021fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002200:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	7f52      	ldrb	r2, [r2, #29]
 8002206:	2a00      	cmp	r2, #0
 8002208:	d102      	bne.n	8002210 <ETH_SetDMAConfig+0x44>
 800220a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800220e:	e000      	b.n	8002212 <ETH_SetDMAConfig+0x46>
 8002210:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002212:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	7b9b      	ldrb	r3, [r3, #14]
 8002218:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800221a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002220:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	7f1b      	ldrb	r3, [r3, #28]
 8002226:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002228:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7f9b      	ldrb	r3, [r3, #30]
 800222e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002230:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002236:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002240:	4313      	orrs	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002250:	461a      	mov	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002262:	2001      	movs	r0, #1
 8002264:	f7ff fd8e 	bl	8001d84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	791b      	ldrb	r3, [r3, #4]
 800227a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002280:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002286:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800228c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002294:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002296:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800229e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f7ff fd5f 	bl	8001d84 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	f8de3f23 	.word	0xf8de3f23

080022e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0a6      	sub	sp, #152	; 0x98
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800230a:	2301      	movs	r3, #1
 800230c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800231c:	2300      	movs	r3, #0
 800231e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002326:	2300      	movs	r3, #0
 8002328:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002342:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800234c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002354:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002358:	4619      	mov	r1, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fe9a 	bl	8002094 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002360:	2301      	movs	r3, #1
 8002362:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002364:	2301      	movs	r3, #1
 8002366:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800236e:	2301      	movs	r3, #1
 8002370:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002382:	2300      	movs	r3, #0
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800238c:	2301      	movs	r3, #1
 800238e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002394:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800239a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800239c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff08 	bl	80021cc <ETH_SetDMAConfig>
}
 80023bc:	bf00      	nop
 80023be:	3798      	adds	r7, #152	; 0x98
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3305      	adds	r3, #5
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	3204      	adds	r2, #4
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <ETH_MACAddressConfig+0x68>)
 80023e6:	4413      	add	r3, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3303      	adds	r3, #3
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	061a      	lsls	r2, r3, #24
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3302      	adds	r3, #2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3301      	adds	r3, #1
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	4313      	orrs	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <ETH_MACAddressConfig+0x6c>)
 8002416:	4413      	add	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6013      	str	r3, [r2, #0]
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40028040 	.word	0x40028040
 8002430:	40028044 	.word	0x40028044

08002434 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e03e      	b.n	80024c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	3206      	adds	r2, #6
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d80c      	bhi.n	80024a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68d9      	ldr	r1, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	e004      	b.n	80024ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d9bd      	bls.n	8002442 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d8:	611a      	str	r2, [r3, #16]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e046      	b.n	8002582 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002530:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002538:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	3212      	adds	r2, #18
 800254e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d80c      	bhi.n	8002572 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6919      	ldr	r1, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	e004      	b.n	800257c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d9b5      	bls.n	80024f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b2:	60da      	str	r2, [r3, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e177      	b.n	80028cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f040 8166 	bne.w	80028c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d005      	beq.n	8002612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	2b02      	cmp	r3, #2
 8002610:	d130      	bne.n	8002674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 0201 	and.w	r2, r3, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b03      	cmp	r3, #3
 800267e:	d017      	beq.n	80026b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d123      	bne.n	8002704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	08da      	lsrs	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3208      	adds	r2, #8
 80026c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0203 	and.w	r2, r3, #3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80c0 	beq.w	80028c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b66      	ldr	r3, [pc, #408]	; (80028e4 <HAL_GPIO_Init+0x324>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a65      	ldr	r2, [pc, #404]	; (80028e4 <HAL_GPIO_Init+0x324>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <HAL_GPIO_Init+0x324>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002762:	4a61      	ldr	r2, [pc, #388]	; (80028e8 <HAL_GPIO_Init+0x328>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a58      	ldr	r2, [pc, #352]	; (80028ec <HAL_GPIO_Init+0x32c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d037      	beq.n	80027fe <HAL_GPIO_Init+0x23e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a57      	ldr	r2, [pc, #348]	; (80028f0 <HAL_GPIO_Init+0x330>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d031      	beq.n	80027fa <HAL_GPIO_Init+0x23a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a56      	ldr	r2, [pc, #344]	; (80028f4 <HAL_GPIO_Init+0x334>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02b      	beq.n	80027f6 <HAL_GPIO_Init+0x236>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a55      	ldr	r2, [pc, #340]	; (80028f8 <HAL_GPIO_Init+0x338>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d025      	beq.n	80027f2 <HAL_GPIO_Init+0x232>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a54      	ldr	r2, [pc, #336]	; (80028fc <HAL_GPIO_Init+0x33c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01f      	beq.n	80027ee <HAL_GPIO_Init+0x22e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a53      	ldr	r2, [pc, #332]	; (8002900 <HAL_GPIO_Init+0x340>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d019      	beq.n	80027ea <HAL_GPIO_Init+0x22a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_GPIO_Init+0x344>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0x226>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a51      	ldr	r2, [pc, #324]	; (8002908 <HAL_GPIO_Init+0x348>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00d      	beq.n	80027e2 <HAL_GPIO_Init+0x222>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a50      	ldr	r2, [pc, #320]	; (800290c <HAL_GPIO_Init+0x34c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <HAL_GPIO_Init+0x21e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4f      	ldr	r2, [pc, #316]	; (8002910 <HAL_GPIO_Init+0x350>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_GPIO_Init+0x21a>
 80027d6:	2309      	movs	r3, #9
 80027d8:	e012      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027da:	230a      	movs	r3, #10
 80027dc:	e010      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027de:	2308      	movs	r3, #8
 80027e0:	e00e      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e00c      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027e6:	2306      	movs	r3, #6
 80027e8:	e00a      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027ea:	2305      	movs	r3, #5
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <HAL_GPIO_Init+0x328>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <HAL_GPIO_Init+0x354>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a34      	ldr	r2, [pc, #208]	; (8002914 <HAL_GPIO_Init+0x354>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_GPIO_Init+0x354>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a29      	ldr	r2, [pc, #164]	; (8002914 <HAL_GPIO_Init+0x354>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b28      	ldr	r3, [pc, #160]	; (8002914 <HAL_GPIO_Init+0x354>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_GPIO_Init+0x354>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_GPIO_Init+0x354>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a14      	ldr	r2, [pc, #80]	; (8002914 <HAL_GPIO_Init+0x354>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f ae84 	bls.w	80025dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40021400 	.word	0x40021400
 8002904:	40021800 	.word	0x40021800
 8002908:	40021c00 	.word	0x40021c00
 800290c:	40022000 	.word	0x40022000
 8002910:	40022400 	.word	0x40022400
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800294a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294c:	b08f      	sub	sp, #60	; 0x3c
 800294e:	af0a      	add	r7, sp, #40	; 0x28
 8002950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e10f      	b.n	8002b7c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff f822 	bl	80019c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f8ad 	bl	8003afa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	687e      	ldr	r6, [r7, #4]
 80029a8:	466d      	mov	r5, sp
 80029aa:	f106 0410 	add.w	r4, r6, #16
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80029be:	1d33      	adds	r3, r6, #4
 80029c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f001 f838 	bl	8003a38 <USB_CoreInit>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0d0      	b.n	8002b7c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 f89b 	bl	8003b1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e04a      	b.n	8002a82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	333d      	adds	r3, #61	; 0x3d
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	333c      	adds	r3, #60	; 0x3c
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	b298      	uxth	r0, r3
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3344      	adds	r3, #68	; 0x44
 8002a28:	4602      	mov	r2, r0
 8002a2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3340      	adds	r3, #64	; 0x40
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3348      	adds	r3, #72	; 0x48
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334c      	adds	r3, #76	; 0x4c
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3354      	adds	r3, #84	; 0x54
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3af      	bcc.n	80029ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e044      	b.n	8002b1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d3b5      	bcc.n	8002a92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	687e      	ldr	r6, [r7, #4]
 8002b2e:	466d      	mov	r5, sp
 8002b30:	f106 0410 	add.w	r4, r6, #16
 8002b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b44:	1d33      	adds	r3, r6, #4
 8002b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b48:	6838      	ldr	r0, [r7, #0]
 8002b4a:	f001 f833 	bl	8003bb4 <USB_DevInit>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e00d      	b.n	8002b7c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 f9fe 	bl	8003f76 <USB_DevDisconnect>

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e267      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d075      	beq.n	8002c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d00c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bae:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d112      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bba:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	4b7e      	ldr	r3, [pc, #504]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05b      	beq.n	8002c8c <HAL_RCC_OscConfig+0x108>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d157      	bne.n	8002c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e242      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x74>
 8002bea:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a75      	ldr	r2, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e01d      	b.n	8002c34 <HAL_RCC_OscConfig+0xb0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b70      	ldr	r3, [pc, #448]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6f      	ldr	r2, [pc, #444]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b6d      	ldr	r3, [pc, #436]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6c      	ldr	r2, [pc, #432]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0xb0>
 8002c1c:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a68      	ldr	r2, [pc, #416]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f896 	bl	8001d6c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7ff f892 	bl	8001d6c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e207      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0xc0>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff f882 	bl	8001d6c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7ff f87e 	bl	8001d6c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1f3      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0xe8>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d063      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d11c      	bne.n	8002cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d116      	bne.n	8002cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x152>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e1c7      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4937      	ldr	r1, [pc, #220]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	e03a      	b.n	8002d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf4:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <HAL_RCC_OscConfig+0x244>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7ff f837 	bl	8001d6c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d02:	f7ff f833 	bl	8001d6c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1a8      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4925      	ldr	r1, [pc, #148]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
 8002d34:	e015      	b.n	8002d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCC_OscConfig+0x244>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7ff f816 	bl	8001d6c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d44:	f7ff f812 	bl	8001d6c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e187      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d036      	beq.n	8002ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_RCC_OscConfig+0x248>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fff6 	bl	8001d6c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d84:	f7fe fff2 	bl	8001d6c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e167      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x200>
 8002da2:	e01b      	b.n	8002ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_OscConfig+0x248>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe ffdf 	bl	8001d6c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	e00e      	b.n	8002dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fe ffdb 	bl	8001d6c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d907      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e150      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	42470000 	.word	0x42470000
 8002dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ea      	bne.n	8002db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8097 	beq.w	8002f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dee:	4b81      	ldr	r3, [pc, #516]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	4b7d      	ldr	r3, [pc, #500]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a7c      	ldr	r2, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e16:	2301      	movs	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b77      	ldr	r3, [pc, #476]	; (8002ff8 <HAL_RCC_OscConfig+0x474>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4b74      	ldr	r3, [pc, #464]	; (8002ff8 <HAL_RCC_OscConfig+0x474>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a73      	ldr	r2, [pc, #460]	; (8002ff8 <HAL_RCC_OscConfig+0x474>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e32:	f7fe ff9b 	bl	8001d6c <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7fe ff97 	bl	8001d6c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e10c      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x474>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x2ea>
 8002e60:	4b64      	ldr	r3, [pc, #400]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a63      	ldr	r2, [pc, #396]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e01c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x324>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x30c>
 8002e76:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a5e      	ldr	r2, [pc, #376]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	4b5c      	ldr	r3, [pc, #368]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a5b      	ldr	r2, [pc, #364]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x324>
 8002e90:	4b58      	ldr	r3, [pc, #352]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a57      	ldr	r2, [pc, #348]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a54      	ldr	r2, [pc, #336]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	f023 0304 	bic.w	r3, r3, #4
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe ff5c 	bl	8001d6c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe ff58 	bl	8001d6c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0cb      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ee      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x334>
 8002eda:	e014      	b.n	8002f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002edc:	f7fe ff46 	bl	8001d6c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe ff42 	bl	8001d6c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0b5      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efa:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1ee      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0c:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	4a38      	ldr	r2, [pc, #224]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80a1 	beq.w	8003064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d05c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d141      	bne.n	8002fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCC_OscConfig+0x478>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe ff16 	bl	8001d6c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe ff12 	bl	8001d6c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e087      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	019b      	lsls	r3, r3, #6
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	491b      	ldr	r1, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x478>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe feeb 	bl	8001d6c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe fee7 	bl	8001d6c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e05c      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x416>
 8002fb8:	e054      	b.n	8003064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_RCC_OscConfig+0x478>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fed4 	bl	8001d6c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fed0 	bl	8001d6c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e045      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x444>
 8002fe6:	e03d      	b.n	8003064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e038      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x4ec>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d028      	beq.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d121      	bne.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d11a      	bne.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003038:	4293      	cmp	r3, r2
 800303a:	d111      	bne.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d107      	bne.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800

08003074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0cc      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b68      	ldr	r3, [pc, #416]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d90c      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b65      	ldr	r3, [pc, #404]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0b8      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b50      	ldr	r3, [pc, #320]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	494d      	ldr	r1, [pc, #308]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d044      	beq.n	8003194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d119      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e07f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d003      	beq.n	8003132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312e:	2b03      	cmp	r3, #3
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e06f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e067      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4934      	ldr	r1, [pc, #208]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003164:	f7fe fe02 	bl	8001d6c <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fe fdfe 	bl	8001d6c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e04f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d20c      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e032      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4916      	ldr	r1, [pc, #88]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fa:	f000 f821 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031fe:	4602      	mov	r2, r0
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	490a      	ldr	r1, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	5ccb      	ldrb	r3, [r1, r3]
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fd62 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023c00 	.word	0x40023c00
 8003230:	40023800 	.word	0x40023800
 8003234:	080050d4 	.word	0x080050d4
 8003238:	20000000 	.word	0x20000000
 800323c:	20000004 	.word	0x20000004

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003244:	b094      	sub	sp, #80	; 0x50
 8003246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
 800324c:	2300      	movs	r3, #0
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003250:	2300      	movs	r3, #0
 8003252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003258:	4b79      	ldr	r3, [pc, #484]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d00d      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x40>
 8003264:	2b08      	cmp	r3, #8
 8003266:	f200 80e1 	bhi.w	800342c <HAL_RCC_GetSysClockFreq+0x1ec>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x34>
 800326e:	2b04      	cmp	r3, #4
 8003270:	d003      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x3a>
 8003272:	e0db      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b73      	ldr	r3, [pc, #460]	; (8003444 <HAL_RCC_GetSysClockFreq+0x204>)
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003278:	e0db      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_GetSysClockFreq+0x208>)
 800327c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800327e:	e0d8      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003280:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800328a:	4b6d      	ldr	r3, [pc, #436]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d063      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003296:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	099b      	lsrs	r3, r3, #6
 800329c:	2200      	movs	r2, #0
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a8:	633b      	str	r3, [r7, #48]	; 0x30
 80032aa:	2300      	movs	r3, #0
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
 80032ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032b2:	4622      	mov	r2, r4
 80032b4:	462b      	mov	r3, r5
 80032b6:	f04f 0000 	mov.w	r0, #0
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	0159      	lsls	r1, r3, #5
 80032c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c4:	0150      	lsls	r0, r2, #5
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4621      	mov	r1, r4
 80032cc:	1a51      	subs	r1, r2, r1
 80032ce:	6139      	str	r1, [r7, #16]
 80032d0:	4629      	mov	r1, r5
 80032d2:	eb63 0301 	sbc.w	r3, r3, r1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e4:	4659      	mov	r1, fp
 80032e6:	018b      	lsls	r3, r1, #6
 80032e8:	4651      	mov	r1, sl
 80032ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ee:	4651      	mov	r1, sl
 80032f0:	018a      	lsls	r2, r1, #6
 80032f2:	4651      	mov	r1, sl
 80032f4:	ebb2 0801 	subs.w	r8, r2, r1
 80032f8:	4659      	mov	r1, fp
 80032fa:	eb63 0901 	sbc.w	r9, r3, r1
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800330a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003312:	4690      	mov	r8, r2
 8003314:	4699      	mov	r9, r3
 8003316:	4623      	mov	r3, r4
 8003318:	eb18 0303 	adds.w	r3, r8, r3
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	462b      	mov	r3, r5
 8003320:	eb49 0303 	adc.w	r3, r9, r3
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003332:	4629      	mov	r1, r5
 8003334:	024b      	lsls	r3, r1, #9
 8003336:	4621      	mov	r1, r4
 8003338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800333c:	4621      	mov	r1, r4
 800333e:	024a      	lsls	r2, r1, #9
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003346:	2200      	movs	r2, #0
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
 800334a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800334c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003350:	f7fd f876 	bl	8000440 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4613      	mov	r3, r2
 800335a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800335c:	e058      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	099b      	lsrs	r3, r3, #6
 8003364:	2200      	movs	r2, #0
 8003366:	4618      	mov	r0, r3
 8003368:	4611      	mov	r1, r2
 800336a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	f04f 0000 	mov.w	r0, #0
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	0159      	lsls	r1, r3, #5
 8003386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800338a:	0150      	lsls	r0, r2, #5
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4641      	mov	r1, r8
 8003392:	ebb2 0a01 	subs.w	sl, r2, r1
 8003396:	4649      	mov	r1, r9
 8003398:	eb63 0b01 	sbc.w	fp, r3, r1
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033b0:	ebb2 040a 	subs.w	r4, r2, sl
 80033b4:	eb63 050b 	sbc.w	r5, r3, fp
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	00eb      	lsls	r3, r5, #3
 80033c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c6:	00e2      	lsls	r2, r4, #3
 80033c8:	4614      	mov	r4, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	4643      	mov	r3, r8
 80033ce:	18e3      	adds	r3, r4, r3
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	464b      	mov	r3, r9
 80033d4:	eb45 0303 	adc.w	r3, r5, r3
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033e6:	4629      	mov	r1, r5
 80033e8:	028b      	lsls	r3, r1, #10
 80033ea:	4621      	mov	r1, r4
 80033ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033f0:	4621      	mov	r1, r4
 80033f2:	028a      	lsls	r2, r1, #10
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fa:	2200      	movs	r2, #0
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	61fa      	str	r2, [r7, #28]
 8003400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003404:	f7fd f81c 	bl	8000440 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4613      	mov	r3, r2
 800340e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	3301      	adds	r3, #1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetSysClockFreq+0x204>)
 800342e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003434:	4618      	mov	r0, r3
 8003436:	3750      	adds	r7, #80	; 0x50
 8003438:	46bd      	mov	sp, r7
 800343a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	00f42400 	.word	0x00f42400
 8003448:	007a1200 	.word	0x007a1200

0800344c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_GetHCLKFreq+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000000 	.word	0x20000000

08003464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003468:	f7ff fff0 	bl	800344c <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0a9b      	lsrs	r3, r3, #10
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	080050e4 	.word	0x080050e4

0800348c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003490:	f7ff ffdc 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	0b5b      	lsrs	r3, r3, #13
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	4903      	ldr	r1, [pc, #12]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	080050e4 	.word	0x080050e4

080034b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e03f      	b.n	8003546 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe fa28 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	; 0x24
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f829 	bl	8003550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800350c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800351c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800352c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003554:	b0c0      	sub	sp, #256	; 0x100
 8003556:	af00      	add	r7, sp, #0
 8003558:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	68d9      	ldr	r1, [r3, #12]
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	ea40 0301 	orr.w	r3, r0, r1
 8003578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	431a      	orrs	r2, r3
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035a8:	f021 010c 	bic.w	r1, r1, #12
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035b6:	430b      	orrs	r3, r1
 80035b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ca:	6999      	ldr	r1, [r3, #24]
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	ea40 0301 	orr.w	r3, r0, r1
 80035d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b8f      	ldr	r3, [pc, #572]	; (800381c <UART_SetConfig+0x2cc>)
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d005      	beq.n	80035f0 <UART_SetConfig+0xa0>
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <UART_SetConfig+0x2d0>)
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d104      	bne.n	80035fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035f0:	f7ff ff4c 	bl	800348c <HAL_RCC_GetPCLK2Freq>
 80035f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035f8:	e003      	b.n	8003602 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035fa:	f7ff ff33 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 80035fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360c:	f040 810c 	bne.w	8003828 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800361a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800361e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
 8003626:	1891      	adds	r1, r2, r2
 8003628:	65b9      	str	r1, [r7, #88]	; 0x58
 800362a:	415b      	adcs	r3, r3
 800362c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800362e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003632:	4621      	mov	r1, r4
 8003634:	eb12 0801 	adds.w	r8, r2, r1
 8003638:	4629      	mov	r1, r5
 800363a:	eb43 0901 	adc.w	r9, r3, r1
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800364a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003652:	4690      	mov	r8, r2
 8003654:	4699      	mov	r9, r3
 8003656:	4623      	mov	r3, r4
 8003658:	eb18 0303 	adds.w	r3, r8, r3
 800365c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003660:	462b      	mov	r3, r5
 8003662:	eb49 0303 	adc.w	r3, r9, r3
 8003666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800366a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003676:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800367a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800367e:	460b      	mov	r3, r1
 8003680:	18db      	adds	r3, r3, r3
 8003682:	653b      	str	r3, [r7, #80]	; 0x50
 8003684:	4613      	mov	r3, r2
 8003686:	eb42 0303 	adc.w	r3, r2, r3
 800368a:	657b      	str	r3, [r7, #84]	; 0x54
 800368c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003690:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003694:	f7fc fed4 	bl	8000440 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4b61      	ldr	r3, [pc, #388]	; (8003824 <UART_SetConfig+0x2d4>)
 800369e:	fba3 2302 	umull	r2, r3, r3, r2
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	011c      	lsls	r4, r3, #4
 80036a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	1891      	adds	r1, r2, r2
 80036be:	64b9      	str	r1, [r7, #72]	; 0x48
 80036c0:	415b      	adcs	r3, r3
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036c8:	4641      	mov	r1, r8
 80036ca:	eb12 0a01 	adds.w	sl, r2, r1
 80036ce:	4649      	mov	r1, r9
 80036d0:	eb43 0b01 	adc.w	fp, r3, r1
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036e8:	4692      	mov	sl, r2
 80036ea:	469b      	mov	fp, r3
 80036ec:	4643      	mov	r3, r8
 80036ee:	eb1a 0303 	adds.w	r3, sl, r3
 80036f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036f6:	464b      	mov	r3, r9
 80036f8:	eb4b 0303 	adc.w	r3, fp, r3
 80036fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800370c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003714:	460b      	mov	r3, r1
 8003716:	18db      	adds	r3, r3, r3
 8003718:	643b      	str	r3, [r7, #64]	; 0x40
 800371a:	4613      	mov	r3, r2
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
 8003722:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800372a:	f7fc fe89 	bl	8000440 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4611      	mov	r1, r2
 8003734:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <UART_SetConfig+0x2d4>)
 8003736:	fba3 2301 	umull	r2, r3, r3, r1
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2264      	movs	r2, #100	; 0x64
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	1acb      	subs	r3, r1, r3
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800374a:	4b36      	ldr	r3, [pc, #216]	; (8003824 <UART_SetConfig+0x2d4>)
 800374c:	fba3 2302 	umull	r2, r3, r3, r2
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003758:	441c      	add	r4, r3
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003764:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003768:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	1891      	adds	r1, r2, r2
 8003772:	63b9      	str	r1, [r7, #56]	; 0x38
 8003774:	415b      	adcs	r3, r3
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800377c:	4641      	mov	r1, r8
 800377e:	1851      	adds	r1, r2, r1
 8003780:	6339      	str	r1, [r7, #48]	; 0x30
 8003782:	4649      	mov	r1, r9
 8003784:	414b      	adcs	r3, r1
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003794:	4659      	mov	r1, fp
 8003796:	00cb      	lsls	r3, r1, #3
 8003798:	4651      	mov	r1, sl
 800379a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379e:	4651      	mov	r1, sl
 80037a0:	00ca      	lsls	r2, r1, #3
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	4642      	mov	r2, r8
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037b0:	464b      	mov	r3, r9
 80037b2:	460a      	mov	r2, r1
 80037b4:	eb42 0303 	adc.w	r3, r2, r3
 80037b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037d0:	460b      	mov	r3, r1
 80037d2:	18db      	adds	r3, r3, r3
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d6:	4613      	mov	r3, r2
 80037d8:	eb42 0303 	adc.w	r3, r2, r3
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037e6:	f7fc fe2b 	bl	8000440 <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <UART_SetConfig+0x2d4>)
 80037f0:	fba3 1302 	umull	r1, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	2164      	movs	r1, #100	; 0x64
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	3332      	adds	r3, #50	; 0x32
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <UART_SetConfig+0x2d4>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	f003 0207 	and.w	r2, r3, #7
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4422      	add	r2, r4
 8003816:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003818:	e105      	b.n	8003a26 <UART_SetConfig+0x4d6>
 800381a:	bf00      	nop
 800381c:	40011000 	.word	0x40011000
 8003820:	40011400 	.word	0x40011400
 8003824:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003832:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003836:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800383a:	4642      	mov	r2, r8
 800383c:	464b      	mov	r3, r9
 800383e:	1891      	adds	r1, r2, r2
 8003840:	6239      	str	r1, [r7, #32]
 8003842:	415b      	adcs	r3, r3
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
 8003846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800384a:	4641      	mov	r1, r8
 800384c:	1854      	adds	r4, r2, r1
 800384e:	4649      	mov	r1, r9
 8003850:	eb43 0501 	adc.w	r5, r3, r1
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	00eb      	lsls	r3, r5, #3
 800385e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003862:	00e2      	lsls	r2, r4, #3
 8003864:	4614      	mov	r4, r2
 8003866:	461d      	mov	r5, r3
 8003868:	4643      	mov	r3, r8
 800386a:	18e3      	adds	r3, r4, r3
 800386c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003870:	464b      	mov	r3, r9
 8003872:	eb45 0303 	adc.w	r3, r5, r3
 8003876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003896:	4629      	mov	r1, r5
 8003898:	008b      	lsls	r3, r1, #2
 800389a:	4621      	mov	r1, r4
 800389c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a0:	4621      	mov	r1, r4
 80038a2:	008a      	lsls	r2, r1, #2
 80038a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038a8:	f7fc fdca 	bl	8000440 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4b60      	ldr	r3, [pc, #384]	; (8003a34 <UART_SetConfig+0x4e4>)
 80038b2:	fba3 2302 	umull	r2, r3, r3, r2
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	011c      	lsls	r4, r3, #4
 80038ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038cc:	4642      	mov	r2, r8
 80038ce:	464b      	mov	r3, r9
 80038d0:	1891      	adds	r1, r2, r2
 80038d2:	61b9      	str	r1, [r7, #24]
 80038d4:	415b      	adcs	r3, r3
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038dc:	4641      	mov	r1, r8
 80038de:	1851      	adds	r1, r2, r1
 80038e0:	6139      	str	r1, [r7, #16]
 80038e2:	4649      	mov	r1, r9
 80038e4:	414b      	adcs	r3, r1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f4:	4659      	mov	r1, fp
 80038f6:	00cb      	lsls	r3, r1, #3
 80038f8:	4651      	mov	r1, sl
 80038fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fe:	4651      	mov	r1, sl
 8003900:	00ca      	lsls	r2, r1, #3
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	4603      	mov	r3, r0
 8003908:	4642      	mov	r2, r8
 800390a:	189b      	adds	r3, r3, r2
 800390c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003910:	464b      	mov	r3, r9
 8003912:	460a      	mov	r2, r1
 8003914:	eb42 0303 	adc.w	r3, r2, r3
 8003918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	67bb      	str	r3, [r7, #120]	; 0x78
 8003926:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003934:	4649      	mov	r1, r9
 8003936:	008b      	lsls	r3, r1, #2
 8003938:	4641      	mov	r1, r8
 800393a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800393e:	4641      	mov	r1, r8
 8003940:	008a      	lsls	r2, r1, #2
 8003942:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003946:	f7fc fd7b 	bl	8000440 <__aeabi_uldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <UART_SetConfig+0x4e4>)
 8003950:	fba3 1302 	umull	r1, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	2164      	movs	r1, #100	; 0x64
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	3332      	adds	r3, #50	; 0x32
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <UART_SetConfig+0x4e4>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396e:	441c      	add	r4, r3
 8003970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003974:	2200      	movs	r2, #0
 8003976:	673b      	str	r3, [r7, #112]	; 0x70
 8003978:	677a      	str	r2, [r7, #116]	; 0x74
 800397a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800397e:	4642      	mov	r2, r8
 8003980:	464b      	mov	r3, r9
 8003982:	1891      	adds	r1, r2, r2
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	415b      	adcs	r3, r3
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800398e:	4641      	mov	r1, r8
 8003990:	1851      	adds	r1, r2, r1
 8003992:	6039      	str	r1, [r7, #0]
 8003994:	4649      	mov	r1, r9
 8003996:	414b      	adcs	r3, r1
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039a6:	4659      	mov	r1, fp
 80039a8:	00cb      	lsls	r3, r1, #3
 80039aa:	4651      	mov	r1, sl
 80039ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b0:	4651      	mov	r1, sl
 80039b2:	00ca      	lsls	r2, r1, #3
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	4603      	mov	r3, r0
 80039ba:	4642      	mov	r2, r8
 80039bc:	189b      	adds	r3, r3, r2
 80039be:	66bb      	str	r3, [r7, #104]	; 0x68
 80039c0:	464b      	mov	r3, r9
 80039c2:	460a      	mov	r2, r1
 80039c4:	eb42 0303 	adc.w	r3, r2, r3
 80039c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	663b      	str	r3, [r7, #96]	; 0x60
 80039d4:	667a      	str	r2, [r7, #100]	; 0x64
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039e2:	4649      	mov	r1, r9
 80039e4:	008b      	lsls	r3, r1, #2
 80039e6:	4641      	mov	r1, r8
 80039e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ec:	4641      	mov	r1, r8
 80039ee:	008a      	lsls	r2, r1, #2
 80039f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039f4:	f7fc fd24 	bl	8000440 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <UART_SetConfig+0x4e4>)
 80039fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2164      	movs	r1, #100	; 0x64
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	3332      	adds	r3, #50	; 0x32
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <UART_SetConfig+0x4e4>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4422      	add	r2, r4
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	bf00      	nop
 8003a28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a32:	bf00      	nop
 8003a34:	51eb851f 	.word	0x51eb851f

08003a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a38:	b084      	sub	sp, #16
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	f107 001c 	add.w	r0, r7, #28
 8003a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d122      	bne.n	8003a96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d105      	bne.n	8003a8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 faa2 	bl	8003fd4 <USB_CoreReset>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]
 8003a94:	e01a      	b.n	8003acc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa96 	bl	8003fd4 <USB_CoreReset>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
 8003abe:	e005      	b.n	8003acc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10b      	bne.n	8003aea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f043 0206 	orr.w	r2, r3, #6
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f043 0220 	orr.w	r2, r3, #32
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003af6:	b004      	add	sp, #16
 8003af8:	4770      	bx	lr

08003afa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d115      	bne.n	8003b6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f7fe f91a 	bl	8001d84 <HAL_Delay>
      ms++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3301      	adds	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa2e 	bl	8003fb8 <USB_GetMode>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d01e      	beq.n	8003ba0 <USB_SetCurrentMode+0x84>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b31      	cmp	r3, #49	; 0x31
 8003b66:	d9f0      	bls.n	8003b4a <USB_SetCurrentMode+0x2e>
 8003b68:	e01a      	b.n	8003ba0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d115      	bne.n	8003b9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7fe f901 	bl	8001d84 <HAL_Delay>
      ms++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3301      	adds	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fa15 	bl	8003fb8 <USB_GetMode>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <USB_SetCurrentMode+0x84>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b31      	cmp	r3, #49	; 0x31
 8003b98:	d9f0      	bls.n	8003b7c <USB_SetCurrentMode+0x60>
 8003b9a:	e001      	b.n	8003ba0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e005      	b.n	8003bac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b32      	cmp	r3, #50	; 0x32
 8003ba4:	d101      	bne.n	8003baa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e009      	b.n	8003be8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3340      	adds	r3, #64	; 0x40
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	2200      	movs	r2, #0
 8003be0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3301      	adds	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b0e      	cmp	r3, #14
 8003bec:	d9f2      	bls.n	8003bd4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11c      	bne.n	8003c2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c02:	f043 0302 	orr.w	r3, r3, #2
 8003c06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8003c2c:	e00b      	b.n	8003c46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c58:	4619      	mov	r1, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c60:	461a      	mov	r2, r3
 8003c62:	680b      	ldr	r3, [r1, #0]
 8003c64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10c      	bne.n	8003c86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c72:	2100      	movs	r1, #0
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f965 	bl	8003f44 <USB_SetDevSpeed>
 8003c7a:	e008      	b.n	8003c8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f960 	bl	8003f44 <USB_SetDevSpeed>
 8003c84:	e003      	b.n	8003c8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c86:	2103      	movs	r1, #3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f95b 	bl	8003f44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c8e:	2110      	movs	r1, #16
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8f3 	bl	8003e7c <USB_FlushTxFifo>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f91f 	bl	8003ee4 <USB_FlushRxFifo>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e043      	b.n	8003d62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cf0:	d118      	bne.n	8003d24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d04:	461a      	mov	r2, r3
 8003d06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	e013      	b.n	8003d36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e008      	b.n	8003d36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	461a      	mov	r2, r3
 8003d32:	2300      	movs	r3, #0
 8003d34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d42:	461a      	mov	r2, r3
 8003d44:	2300      	movs	r3, #0
 8003d46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d54:	461a      	mov	r2, r3
 8003d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3b7      	bcc.n	8003cda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	e043      	b.n	8003df8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d86:	d118      	bne.n	8003dba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e013      	b.n	8003dcc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e008      	b.n	8003dcc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	461a      	mov	r2, r3
 8003dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003df0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	3301      	adds	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d3b7      	bcc.n	8003d70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f043 0210 	orr.w	r2, r3, #16
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <USB_DevInit+0x2c4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f043 0208 	orr.w	r2, r3, #8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d107      	bne.n	8003e68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e74:	b004      	add	sp, #16
 8003e76:	4770      	bx	lr
 8003e78:	803c3800 	.word	0x803c3800

08003e7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <USB_FlushTxFifo+0x64>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e01b      	b.n	8003ed4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	daf2      	bge.n	8003e8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	019b      	lsls	r3, r3, #6
 8003eac:	f043 0220 	orr.w	r2, r3, #32
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <USB_FlushTxFifo+0x64>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e006      	b.n	8003ed4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d0f0      	beq.n	8003eb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	00030d40 	.word	0x00030d40

08003ee4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a11      	ldr	r2, [pc, #68]	; (8003f40 <USB_FlushRxFifo+0x5c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e018      	b.n	8003f34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	daf2      	bge.n	8003ef0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2210      	movs	r2, #16
 8003f12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3301      	adds	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <USB_FlushRxFifo+0x5c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e006      	b.n	8003f34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d0f0      	beq.n	8003f14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	00030d40 	.word	0x00030d40

08003f44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f90:	f023 0303 	bic.w	r3, r3, #3
 8003f94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a13      	ldr	r2, [pc, #76]	; (8004038 <USB_CoreReset+0x64>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e01b      	b.n	800402a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	daf2      	bge.n	8003fe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3301      	adds	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a09      	ldr	r2, [pc, #36]	; (8004038 <USB_CoreReset+0x64>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e006      	b.n	800402a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d0f0      	beq.n	800400a <USB_CoreReset+0x36>

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	00030d40 	.word	0x00030d40

0800403c <__errno>:
 800403c:	4b01      	ldr	r3, [pc, #4]	; (8004044 <__errno+0x8>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c

08004048 <__libc_init_array>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	4d0d      	ldr	r5, [pc, #52]	; (8004080 <__libc_init_array+0x38>)
 800404c:	4c0d      	ldr	r4, [pc, #52]	; (8004084 <__libc_init_array+0x3c>)
 800404e:	1b64      	subs	r4, r4, r5
 8004050:	10a4      	asrs	r4, r4, #2
 8004052:	2600      	movs	r6, #0
 8004054:	42a6      	cmp	r6, r4
 8004056:	d109      	bne.n	800406c <__libc_init_array+0x24>
 8004058:	4d0b      	ldr	r5, [pc, #44]	; (8004088 <__libc_init_array+0x40>)
 800405a:	4c0c      	ldr	r4, [pc, #48]	; (800408c <__libc_init_array+0x44>)
 800405c:	f001 f824 	bl	80050a8 <_init>
 8004060:	1b64      	subs	r4, r4, r5
 8004062:	10a4      	asrs	r4, r4, #2
 8004064:	2600      	movs	r6, #0
 8004066:	42a6      	cmp	r6, r4
 8004068:	d105      	bne.n	8004076 <__libc_init_array+0x2e>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004070:	4798      	blx	r3
 8004072:	3601      	adds	r6, #1
 8004074:	e7ee      	b.n	8004054 <__libc_init_array+0xc>
 8004076:	f855 3b04 	ldr.w	r3, [r5], #4
 800407a:	4798      	blx	r3
 800407c:	3601      	adds	r6, #1
 800407e:	e7f2      	b.n	8004066 <__libc_init_array+0x1e>
 8004080:	0800518c 	.word	0x0800518c
 8004084:	0800518c 	.word	0x0800518c
 8004088:	0800518c 	.word	0x0800518c
 800408c:	08005190 	.word	0x08005190

08004090 <memset>:
 8004090:	4402      	add	r2, r0
 8004092:	4603      	mov	r3, r0
 8004094:	4293      	cmp	r3, r2
 8004096:	d100      	bne.n	800409a <memset+0xa>
 8004098:	4770      	bx	lr
 800409a:	f803 1b01 	strb.w	r1, [r3], #1
 800409e:	e7f9      	b.n	8004094 <memset+0x4>

080040a0 <iprintf>:
 80040a0:	b40f      	push	{r0, r1, r2, r3}
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <iprintf+0x2c>)
 80040a4:	b513      	push	{r0, r1, r4, lr}
 80040a6:	681c      	ldr	r4, [r3, #0]
 80040a8:	b124      	cbz	r4, 80040b4 <iprintf+0x14>
 80040aa:	69a3      	ldr	r3, [r4, #24]
 80040ac:	b913      	cbnz	r3, 80040b4 <iprintf+0x14>
 80040ae:	4620      	mov	r0, r4
 80040b0:	f000 fa5e 	bl	8004570 <__sinit>
 80040b4:	ab05      	add	r3, sp, #20
 80040b6:	9a04      	ldr	r2, [sp, #16]
 80040b8:	68a1      	ldr	r1, [r4, #8]
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	4620      	mov	r0, r4
 80040be:	f000 fc67 	bl	8004990 <_vfiprintf_r>
 80040c2:	b002      	add	sp, #8
 80040c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c8:	b004      	add	sp, #16
 80040ca:	4770      	bx	lr
 80040cc:	2000000c 	.word	0x2000000c

080040d0 <_puts_r>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	460e      	mov	r6, r1
 80040d4:	4605      	mov	r5, r0
 80040d6:	b118      	cbz	r0, 80040e0 <_puts_r+0x10>
 80040d8:	6983      	ldr	r3, [r0, #24]
 80040da:	b90b      	cbnz	r3, 80040e0 <_puts_r+0x10>
 80040dc:	f000 fa48 	bl	8004570 <__sinit>
 80040e0:	69ab      	ldr	r3, [r5, #24]
 80040e2:	68ac      	ldr	r4, [r5, #8]
 80040e4:	b913      	cbnz	r3, 80040ec <_puts_r+0x1c>
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 fa42 	bl	8004570 <__sinit>
 80040ec:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <_puts_r+0xd0>)
 80040ee:	429c      	cmp	r4, r3
 80040f0:	d120      	bne.n	8004134 <_puts_r+0x64>
 80040f2:	686c      	ldr	r4, [r5, #4]
 80040f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040f6:	07db      	lsls	r3, r3, #31
 80040f8:	d405      	bmi.n	8004106 <_puts_r+0x36>
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	0598      	lsls	r0, r3, #22
 80040fe:	d402      	bmi.n	8004106 <_puts_r+0x36>
 8004100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004102:	f000 fad3 	bl	80046ac <__retarget_lock_acquire_recursive>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	0719      	lsls	r1, r3, #28
 800410a:	d51d      	bpl.n	8004148 <_puts_r+0x78>
 800410c:	6923      	ldr	r3, [r4, #16]
 800410e:	b1db      	cbz	r3, 8004148 <_puts_r+0x78>
 8004110:	3e01      	subs	r6, #1
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004118:	3b01      	subs	r3, #1
 800411a:	60a3      	str	r3, [r4, #8]
 800411c:	bb39      	cbnz	r1, 800416e <_puts_r+0x9e>
 800411e:	2b00      	cmp	r3, #0
 8004120:	da38      	bge.n	8004194 <_puts_r+0xc4>
 8004122:	4622      	mov	r2, r4
 8004124:	210a      	movs	r1, #10
 8004126:	4628      	mov	r0, r5
 8004128:	f000 f848 	bl	80041bc <__swbuf_r>
 800412c:	3001      	adds	r0, #1
 800412e:	d011      	beq.n	8004154 <_puts_r+0x84>
 8004130:	250a      	movs	r5, #10
 8004132:	e011      	b.n	8004158 <_puts_r+0x88>
 8004134:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <_puts_r+0xd4>)
 8004136:	429c      	cmp	r4, r3
 8004138:	d101      	bne.n	800413e <_puts_r+0x6e>
 800413a:	68ac      	ldr	r4, [r5, #8]
 800413c:	e7da      	b.n	80040f4 <_puts_r+0x24>
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <_puts_r+0xd8>)
 8004140:	429c      	cmp	r4, r3
 8004142:	bf08      	it	eq
 8004144:	68ec      	ldreq	r4, [r5, #12]
 8004146:	e7d5      	b.n	80040f4 <_puts_r+0x24>
 8004148:	4621      	mov	r1, r4
 800414a:	4628      	mov	r0, r5
 800414c:	f000 f888 	bl	8004260 <__swsetup_r>
 8004150:	2800      	cmp	r0, #0
 8004152:	d0dd      	beq.n	8004110 <_puts_r+0x40>
 8004154:	f04f 35ff 	mov.w	r5, #4294967295
 8004158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800415a:	07da      	lsls	r2, r3, #31
 800415c:	d405      	bmi.n	800416a <_puts_r+0x9a>
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	059b      	lsls	r3, r3, #22
 8004162:	d402      	bmi.n	800416a <_puts_r+0x9a>
 8004164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004166:	f000 faa2 	bl	80046ae <__retarget_lock_release_recursive>
 800416a:	4628      	mov	r0, r5
 800416c:	bd70      	pop	{r4, r5, r6, pc}
 800416e:	2b00      	cmp	r3, #0
 8004170:	da04      	bge.n	800417c <_puts_r+0xac>
 8004172:	69a2      	ldr	r2, [r4, #24]
 8004174:	429a      	cmp	r2, r3
 8004176:	dc06      	bgt.n	8004186 <_puts_r+0xb6>
 8004178:	290a      	cmp	r1, #10
 800417a:	d004      	beq.n	8004186 <_puts_r+0xb6>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	6022      	str	r2, [r4, #0]
 8004182:	7019      	strb	r1, [r3, #0]
 8004184:	e7c5      	b.n	8004112 <_puts_r+0x42>
 8004186:	4622      	mov	r2, r4
 8004188:	4628      	mov	r0, r5
 800418a:	f000 f817 	bl	80041bc <__swbuf_r>
 800418e:	3001      	adds	r0, #1
 8004190:	d1bf      	bne.n	8004112 <_puts_r+0x42>
 8004192:	e7df      	b.n	8004154 <_puts_r+0x84>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	250a      	movs	r5, #10
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	6022      	str	r2, [r4, #0]
 800419c:	701d      	strb	r5, [r3, #0]
 800419e:	e7db      	b.n	8004158 <_puts_r+0x88>
 80041a0:	08005110 	.word	0x08005110
 80041a4:	08005130 	.word	0x08005130
 80041a8:	080050f0 	.word	0x080050f0

080041ac <puts>:
 80041ac:	4b02      	ldr	r3, [pc, #8]	; (80041b8 <puts+0xc>)
 80041ae:	4601      	mov	r1, r0
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f7ff bf8d 	b.w	80040d0 <_puts_r>
 80041b6:	bf00      	nop
 80041b8:	2000000c 	.word	0x2000000c

080041bc <__swbuf_r>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	460e      	mov	r6, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	4605      	mov	r5, r0
 80041c4:	b118      	cbz	r0, 80041ce <__swbuf_r+0x12>
 80041c6:	6983      	ldr	r3, [r0, #24]
 80041c8:	b90b      	cbnz	r3, 80041ce <__swbuf_r+0x12>
 80041ca:	f000 f9d1 	bl	8004570 <__sinit>
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <__swbuf_r+0x98>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	d12b      	bne.n	800422c <__swbuf_r+0x70>
 80041d4:	686c      	ldr	r4, [r5, #4]
 80041d6:	69a3      	ldr	r3, [r4, #24]
 80041d8:	60a3      	str	r3, [r4, #8]
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	071a      	lsls	r2, r3, #28
 80041de:	d52f      	bpl.n	8004240 <__swbuf_r+0x84>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	b36b      	cbz	r3, 8004240 <__swbuf_r+0x84>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	1ac0      	subs	r0, r0, r3
 80041ea:	6963      	ldr	r3, [r4, #20]
 80041ec:	b2f6      	uxtb	r6, r6
 80041ee:	4283      	cmp	r3, r0
 80041f0:	4637      	mov	r7, r6
 80041f2:	dc04      	bgt.n	80041fe <__swbuf_r+0x42>
 80041f4:	4621      	mov	r1, r4
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 f926 	bl	8004448 <_fflush_r>
 80041fc:	bb30      	cbnz	r0, 800424c <__swbuf_r+0x90>
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	3b01      	subs	r3, #1
 8004202:	60a3      	str	r3, [r4, #8]
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	6022      	str	r2, [r4, #0]
 800420a:	701e      	strb	r6, [r3, #0]
 800420c:	6963      	ldr	r3, [r4, #20]
 800420e:	3001      	adds	r0, #1
 8004210:	4283      	cmp	r3, r0
 8004212:	d004      	beq.n	800421e <__swbuf_r+0x62>
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	07db      	lsls	r3, r3, #31
 8004218:	d506      	bpl.n	8004228 <__swbuf_r+0x6c>
 800421a:	2e0a      	cmp	r6, #10
 800421c:	d104      	bne.n	8004228 <__swbuf_r+0x6c>
 800421e:	4621      	mov	r1, r4
 8004220:	4628      	mov	r0, r5
 8004222:	f000 f911 	bl	8004448 <_fflush_r>
 8004226:	b988      	cbnz	r0, 800424c <__swbuf_r+0x90>
 8004228:	4638      	mov	r0, r7
 800422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <__swbuf_r+0x9c>)
 800422e:	429c      	cmp	r4, r3
 8004230:	d101      	bne.n	8004236 <__swbuf_r+0x7a>
 8004232:	68ac      	ldr	r4, [r5, #8]
 8004234:	e7cf      	b.n	80041d6 <__swbuf_r+0x1a>
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <__swbuf_r+0xa0>)
 8004238:	429c      	cmp	r4, r3
 800423a:	bf08      	it	eq
 800423c:	68ec      	ldreq	r4, [r5, #12]
 800423e:	e7ca      	b.n	80041d6 <__swbuf_r+0x1a>
 8004240:	4621      	mov	r1, r4
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f80c 	bl	8004260 <__swsetup_r>
 8004248:	2800      	cmp	r0, #0
 800424a:	d0cb      	beq.n	80041e4 <__swbuf_r+0x28>
 800424c:	f04f 37ff 	mov.w	r7, #4294967295
 8004250:	e7ea      	b.n	8004228 <__swbuf_r+0x6c>
 8004252:	bf00      	nop
 8004254:	08005110 	.word	0x08005110
 8004258:	08005130 	.word	0x08005130
 800425c:	080050f0 	.word	0x080050f0

08004260 <__swsetup_r>:
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <__swsetup_r+0xcc>)
 8004262:	b570      	push	{r4, r5, r6, lr}
 8004264:	681d      	ldr	r5, [r3, #0]
 8004266:	4606      	mov	r6, r0
 8004268:	460c      	mov	r4, r1
 800426a:	b125      	cbz	r5, 8004276 <__swsetup_r+0x16>
 800426c:	69ab      	ldr	r3, [r5, #24]
 800426e:	b913      	cbnz	r3, 8004276 <__swsetup_r+0x16>
 8004270:	4628      	mov	r0, r5
 8004272:	f000 f97d 	bl	8004570 <__sinit>
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <__swsetup_r+0xd0>)
 8004278:	429c      	cmp	r4, r3
 800427a:	d10f      	bne.n	800429c <__swsetup_r+0x3c>
 800427c:	686c      	ldr	r4, [r5, #4]
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004284:	0719      	lsls	r1, r3, #28
 8004286:	d42c      	bmi.n	80042e2 <__swsetup_r+0x82>
 8004288:	06dd      	lsls	r5, r3, #27
 800428a:	d411      	bmi.n	80042b0 <__swsetup_r+0x50>
 800428c:	2309      	movs	r3, #9
 800428e:	6033      	str	r3, [r6, #0]
 8004290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	e03e      	b.n	800431a <__swsetup_r+0xba>
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <__swsetup_r+0xd4>)
 800429e:	429c      	cmp	r4, r3
 80042a0:	d101      	bne.n	80042a6 <__swsetup_r+0x46>
 80042a2:	68ac      	ldr	r4, [r5, #8]
 80042a4:	e7eb      	b.n	800427e <__swsetup_r+0x1e>
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <__swsetup_r+0xd8>)
 80042a8:	429c      	cmp	r4, r3
 80042aa:	bf08      	it	eq
 80042ac:	68ec      	ldreq	r4, [r5, #12]
 80042ae:	e7e6      	b.n	800427e <__swsetup_r+0x1e>
 80042b0:	0758      	lsls	r0, r3, #29
 80042b2:	d512      	bpl.n	80042da <__swsetup_r+0x7a>
 80042b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042b6:	b141      	cbz	r1, 80042ca <__swsetup_r+0x6a>
 80042b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042bc:	4299      	cmp	r1, r3
 80042be:	d002      	beq.n	80042c6 <__swsetup_r+0x66>
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 fa5b 	bl	800477c <_free_r>
 80042c6:	2300      	movs	r3, #0
 80042c8:	6363      	str	r3, [r4, #52]	; 0x34
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	2300      	movs	r3, #0
 80042d4:	6063      	str	r3, [r4, #4]
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f043 0308 	orr.w	r3, r3, #8
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	b94b      	cbnz	r3, 80042fa <__swsetup_r+0x9a>
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d003      	beq.n	80042fa <__swsetup_r+0x9a>
 80042f2:	4621      	mov	r1, r4
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 fa01 	bl	80046fc <__smakebuf_r>
 80042fa:	89a0      	ldrh	r0, [r4, #12]
 80042fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004300:	f010 0301 	ands.w	r3, r0, #1
 8004304:	d00a      	beq.n	800431c <__swsetup_r+0xbc>
 8004306:	2300      	movs	r3, #0
 8004308:	60a3      	str	r3, [r4, #8]
 800430a:	6963      	ldr	r3, [r4, #20]
 800430c:	425b      	negs	r3, r3
 800430e:	61a3      	str	r3, [r4, #24]
 8004310:	6923      	ldr	r3, [r4, #16]
 8004312:	b943      	cbnz	r3, 8004326 <__swsetup_r+0xc6>
 8004314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004318:	d1ba      	bne.n	8004290 <__swsetup_r+0x30>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	0781      	lsls	r1, r0, #30
 800431e:	bf58      	it	pl
 8004320:	6963      	ldrpl	r3, [r4, #20]
 8004322:	60a3      	str	r3, [r4, #8]
 8004324:	e7f4      	b.n	8004310 <__swsetup_r+0xb0>
 8004326:	2000      	movs	r0, #0
 8004328:	e7f7      	b.n	800431a <__swsetup_r+0xba>
 800432a:	bf00      	nop
 800432c:	2000000c 	.word	0x2000000c
 8004330:	08005110 	.word	0x08005110
 8004334:	08005130 	.word	0x08005130
 8004338:	080050f0 	.word	0x080050f0

0800433c <__sflush_r>:
 800433c:	898a      	ldrh	r2, [r1, #12]
 800433e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	0710      	lsls	r0, r2, #28
 8004346:	460c      	mov	r4, r1
 8004348:	d458      	bmi.n	80043fc <__sflush_r+0xc0>
 800434a:	684b      	ldr	r3, [r1, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	dc05      	bgt.n	800435c <__sflush_r+0x20>
 8004350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	dc02      	bgt.n	800435c <__sflush_r+0x20>
 8004356:	2000      	movs	r0, #0
 8004358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800435c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800435e:	2e00      	cmp	r6, #0
 8004360:	d0f9      	beq.n	8004356 <__sflush_r+0x1a>
 8004362:	2300      	movs	r3, #0
 8004364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004368:	682f      	ldr	r7, [r5, #0]
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	d032      	beq.n	80043d4 <__sflush_r+0x98>
 800436e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	075a      	lsls	r2, r3, #29
 8004374:	d505      	bpl.n	8004382 <__sflush_r+0x46>
 8004376:	6863      	ldr	r3, [r4, #4]
 8004378:	1ac0      	subs	r0, r0, r3
 800437a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800437c:	b10b      	cbz	r3, 8004382 <__sflush_r+0x46>
 800437e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004380:	1ac0      	subs	r0, r0, r3
 8004382:	2300      	movs	r3, #0
 8004384:	4602      	mov	r2, r0
 8004386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004388:	6a21      	ldr	r1, [r4, #32]
 800438a:	4628      	mov	r0, r5
 800438c:	47b0      	blx	r6
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	d106      	bne.n	80043a2 <__sflush_r+0x66>
 8004394:	6829      	ldr	r1, [r5, #0]
 8004396:	291d      	cmp	r1, #29
 8004398:	d82c      	bhi.n	80043f4 <__sflush_r+0xb8>
 800439a:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <__sflush_r+0x108>)
 800439c:	40ca      	lsrs	r2, r1
 800439e:	07d6      	lsls	r6, r2, #31
 80043a0:	d528      	bpl.n	80043f4 <__sflush_r+0xb8>
 80043a2:	2200      	movs	r2, #0
 80043a4:	6062      	str	r2, [r4, #4]
 80043a6:	04d9      	lsls	r1, r3, #19
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	6022      	str	r2, [r4, #0]
 80043ac:	d504      	bpl.n	80043b8 <__sflush_r+0x7c>
 80043ae:	1c42      	adds	r2, r0, #1
 80043b0:	d101      	bne.n	80043b6 <__sflush_r+0x7a>
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	b903      	cbnz	r3, 80043b8 <__sflush_r+0x7c>
 80043b6:	6560      	str	r0, [r4, #84]	; 0x54
 80043b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ba:	602f      	str	r7, [r5, #0]
 80043bc:	2900      	cmp	r1, #0
 80043be:	d0ca      	beq.n	8004356 <__sflush_r+0x1a>
 80043c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c4:	4299      	cmp	r1, r3
 80043c6:	d002      	beq.n	80043ce <__sflush_r+0x92>
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 f9d7 	bl	800477c <_free_r>
 80043ce:	2000      	movs	r0, #0
 80043d0:	6360      	str	r0, [r4, #52]	; 0x34
 80043d2:	e7c1      	b.n	8004358 <__sflush_r+0x1c>
 80043d4:	6a21      	ldr	r1, [r4, #32]
 80043d6:	2301      	movs	r3, #1
 80043d8:	4628      	mov	r0, r5
 80043da:	47b0      	blx	r6
 80043dc:	1c41      	adds	r1, r0, #1
 80043de:	d1c7      	bne.n	8004370 <__sflush_r+0x34>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0c4      	beq.n	8004370 <__sflush_r+0x34>
 80043e6:	2b1d      	cmp	r3, #29
 80043e8:	d001      	beq.n	80043ee <__sflush_r+0xb2>
 80043ea:	2b16      	cmp	r3, #22
 80043ec:	d101      	bne.n	80043f2 <__sflush_r+0xb6>
 80043ee:	602f      	str	r7, [r5, #0]
 80043f0:	e7b1      	b.n	8004356 <__sflush_r+0x1a>
 80043f2:	89a3      	ldrh	r3, [r4, #12]
 80043f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	e7ad      	b.n	8004358 <__sflush_r+0x1c>
 80043fc:	690f      	ldr	r7, [r1, #16]
 80043fe:	2f00      	cmp	r7, #0
 8004400:	d0a9      	beq.n	8004356 <__sflush_r+0x1a>
 8004402:	0793      	lsls	r3, r2, #30
 8004404:	680e      	ldr	r6, [r1, #0]
 8004406:	bf08      	it	eq
 8004408:	694b      	ldreq	r3, [r1, #20]
 800440a:	600f      	str	r7, [r1, #0]
 800440c:	bf18      	it	ne
 800440e:	2300      	movne	r3, #0
 8004410:	eba6 0807 	sub.w	r8, r6, r7
 8004414:	608b      	str	r3, [r1, #8]
 8004416:	f1b8 0f00 	cmp.w	r8, #0
 800441a:	dd9c      	ble.n	8004356 <__sflush_r+0x1a>
 800441c:	6a21      	ldr	r1, [r4, #32]
 800441e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004420:	4643      	mov	r3, r8
 8004422:	463a      	mov	r2, r7
 8004424:	4628      	mov	r0, r5
 8004426:	47b0      	blx	r6
 8004428:	2800      	cmp	r0, #0
 800442a:	dc06      	bgt.n	800443a <__sflush_r+0xfe>
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004432:	81a3      	strh	r3, [r4, #12]
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	e78e      	b.n	8004358 <__sflush_r+0x1c>
 800443a:	4407      	add	r7, r0
 800443c:	eba8 0800 	sub.w	r8, r8, r0
 8004440:	e7e9      	b.n	8004416 <__sflush_r+0xda>
 8004442:	bf00      	nop
 8004444:	20400001 	.word	0x20400001

08004448 <_fflush_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	690b      	ldr	r3, [r1, #16]
 800444c:	4605      	mov	r5, r0
 800444e:	460c      	mov	r4, r1
 8004450:	b913      	cbnz	r3, 8004458 <_fflush_r+0x10>
 8004452:	2500      	movs	r5, #0
 8004454:	4628      	mov	r0, r5
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	b118      	cbz	r0, 8004462 <_fflush_r+0x1a>
 800445a:	6983      	ldr	r3, [r0, #24]
 800445c:	b90b      	cbnz	r3, 8004462 <_fflush_r+0x1a>
 800445e:	f000 f887 	bl	8004570 <__sinit>
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <_fflush_r+0x6c>)
 8004464:	429c      	cmp	r4, r3
 8004466:	d11b      	bne.n	80044a0 <_fflush_r+0x58>
 8004468:	686c      	ldr	r4, [r5, #4]
 800446a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0ef      	beq.n	8004452 <_fflush_r+0xa>
 8004472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004474:	07d0      	lsls	r0, r2, #31
 8004476:	d404      	bmi.n	8004482 <_fflush_r+0x3a>
 8004478:	0599      	lsls	r1, r3, #22
 800447a:	d402      	bmi.n	8004482 <_fflush_r+0x3a>
 800447c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447e:	f000 f915 	bl	80046ac <__retarget_lock_acquire_recursive>
 8004482:	4628      	mov	r0, r5
 8004484:	4621      	mov	r1, r4
 8004486:	f7ff ff59 	bl	800433c <__sflush_r>
 800448a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800448c:	07da      	lsls	r2, r3, #31
 800448e:	4605      	mov	r5, r0
 8004490:	d4e0      	bmi.n	8004454 <_fflush_r+0xc>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	059b      	lsls	r3, r3, #22
 8004496:	d4dd      	bmi.n	8004454 <_fflush_r+0xc>
 8004498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800449a:	f000 f908 	bl	80046ae <__retarget_lock_release_recursive>
 800449e:	e7d9      	b.n	8004454 <_fflush_r+0xc>
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <_fflush_r+0x70>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d101      	bne.n	80044aa <_fflush_r+0x62>
 80044a6:	68ac      	ldr	r4, [r5, #8]
 80044a8:	e7df      	b.n	800446a <_fflush_r+0x22>
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <_fflush_r+0x74>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	bf08      	it	eq
 80044b0:	68ec      	ldreq	r4, [r5, #12]
 80044b2:	e7da      	b.n	800446a <_fflush_r+0x22>
 80044b4:	08005110 	.word	0x08005110
 80044b8:	08005130 	.word	0x08005130
 80044bc:	080050f0 	.word	0x080050f0

080044c0 <std>:
 80044c0:	2300      	movs	r3, #0
 80044c2:	b510      	push	{r4, lr}
 80044c4:	4604      	mov	r4, r0
 80044c6:	e9c0 3300 	strd	r3, r3, [r0]
 80044ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ce:	6083      	str	r3, [r0, #8]
 80044d0:	8181      	strh	r1, [r0, #12]
 80044d2:	6643      	str	r3, [r0, #100]	; 0x64
 80044d4:	81c2      	strh	r2, [r0, #14]
 80044d6:	6183      	str	r3, [r0, #24]
 80044d8:	4619      	mov	r1, r3
 80044da:	2208      	movs	r2, #8
 80044dc:	305c      	adds	r0, #92	; 0x5c
 80044de:	f7ff fdd7 	bl	8004090 <memset>
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <std+0x38>)
 80044e4:	6263      	str	r3, [r4, #36]	; 0x24
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <std+0x3c>)
 80044e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <std+0x40>)
 80044ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <std+0x44>)
 80044f0:	6224      	str	r4, [r4, #32]
 80044f2:	6323      	str	r3, [r4, #48]	; 0x30
 80044f4:	bd10      	pop	{r4, pc}
 80044f6:	bf00      	nop
 80044f8:	08004f39 	.word	0x08004f39
 80044fc:	08004f5b 	.word	0x08004f5b
 8004500:	08004f93 	.word	0x08004f93
 8004504:	08004fb7 	.word	0x08004fb7

08004508 <_cleanup_r>:
 8004508:	4901      	ldr	r1, [pc, #4]	; (8004510 <_cleanup_r+0x8>)
 800450a:	f000 b8af 	b.w	800466c <_fwalk_reent>
 800450e:	bf00      	nop
 8004510:	08004449 	.word	0x08004449

08004514 <__sfmoreglue>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	2268      	movs	r2, #104	; 0x68
 8004518:	1e4d      	subs	r5, r1, #1
 800451a:	4355      	muls	r5, r2
 800451c:	460e      	mov	r6, r1
 800451e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004522:	f000 f997 	bl	8004854 <_malloc_r>
 8004526:	4604      	mov	r4, r0
 8004528:	b140      	cbz	r0, 800453c <__sfmoreglue+0x28>
 800452a:	2100      	movs	r1, #0
 800452c:	e9c0 1600 	strd	r1, r6, [r0]
 8004530:	300c      	adds	r0, #12
 8004532:	60a0      	str	r0, [r4, #8]
 8004534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004538:	f7ff fdaa 	bl	8004090 <memset>
 800453c:	4620      	mov	r0, r4
 800453e:	bd70      	pop	{r4, r5, r6, pc}

08004540 <__sfp_lock_acquire>:
 8004540:	4801      	ldr	r0, [pc, #4]	; (8004548 <__sfp_lock_acquire+0x8>)
 8004542:	f000 b8b3 	b.w	80046ac <__retarget_lock_acquire_recursive>
 8004546:	bf00      	nop
 8004548:	20000815 	.word	0x20000815

0800454c <__sfp_lock_release>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__sfp_lock_release+0x8>)
 800454e:	f000 b8ae 	b.w	80046ae <__retarget_lock_release_recursive>
 8004552:	bf00      	nop
 8004554:	20000815 	.word	0x20000815

08004558 <__sinit_lock_acquire>:
 8004558:	4801      	ldr	r0, [pc, #4]	; (8004560 <__sinit_lock_acquire+0x8>)
 800455a:	f000 b8a7 	b.w	80046ac <__retarget_lock_acquire_recursive>
 800455e:	bf00      	nop
 8004560:	20000816 	.word	0x20000816

08004564 <__sinit_lock_release>:
 8004564:	4801      	ldr	r0, [pc, #4]	; (800456c <__sinit_lock_release+0x8>)
 8004566:	f000 b8a2 	b.w	80046ae <__retarget_lock_release_recursive>
 800456a:	bf00      	nop
 800456c:	20000816 	.word	0x20000816

08004570 <__sinit>:
 8004570:	b510      	push	{r4, lr}
 8004572:	4604      	mov	r4, r0
 8004574:	f7ff fff0 	bl	8004558 <__sinit_lock_acquire>
 8004578:	69a3      	ldr	r3, [r4, #24]
 800457a:	b11b      	cbz	r3, 8004584 <__sinit+0x14>
 800457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004580:	f7ff bff0 	b.w	8004564 <__sinit_lock_release>
 8004584:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004588:	6523      	str	r3, [r4, #80]	; 0x50
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <__sinit+0x68>)
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <__sinit+0x6c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	62a2      	str	r2, [r4, #40]	; 0x28
 8004592:	42a3      	cmp	r3, r4
 8004594:	bf04      	itt	eq
 8004596:	2301      	moveq	r3, #1
 8004598:	61a3      	streq	r3, [r4, #24]
 800459a:	4620      	mov	r0, r4
 800459c:	f000 f820 	bl	80045e0 <__sfp>
 80045a0:	6060      	str	r0, [r4, #4]
 80045a2:	4620      	mov	r0, r4
 80045a4:	f000 f81c 	bl	80045e0 <__sfp>
 80045a8:	60a0      	str	r0, [r4, #8]
 80045aa:	4620      	mov	r0, r4
 80045ac:	f000 f818 	bl	80045e0 <__sfp>
 80045b0:	2200      	movs	r2, #0
 80045b2:	60e0      	str	r0, [r4, #12]
 80045b4:	2104      	movs	r1, #4
 80045b6:	6860      	ldr	r0, [r4, #4]
 80045b8:	f7ff ff82 	bl	80044c0 <std>
 80045bc:	68a0      	ldr	r0, [r4, #8]
 80045be:	2201      	movs	r2, #1
 80045c0:	2109      	movs	r1, #9
 80045c2:	f7ff ff7d 	bl	80044c0 <std>
 80045c6:	68e0      	ldr	r0, [r4, #12]
 80045c8:	2202      	movs	r2, #2
 80045ca:	2112      	movs	r1, #18
 80045cc:	f7ff ff78 	bl	80044c0 <std>
 80045d0:	2301      	movs	r3, #1
 80045d2:	61a3      	str	r3, [r4, #24]
 80045d4:	e7d2      	b.n	800457c <__sinit+0xc>
 80045d6:	bf00      	nop
 80045d8:	080050ec 	.word	0x080050ec
 80045dc:	08004509 	.word	0x08004509

080045e0 <__sfp>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	4607      	mov	r7, r0
 80045e4:	f7ff ffac 	bl	8004540 <__sfp_lock_acquire>
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <__sfp+0x84>)
 80045ea:	681e      	ldr	r6, [r3, #0]
 80045ec:	69b3      	ldr	r3, [r6, #24]
 80045ee:	b913      	cbnz	r3, 80045f6 <__sfp+0x16>
 80045f0:	4630      	mov	r0, r6
 80045f2:	f7ff ffbd 	bl	8004570 <__sinit>
 80045f6:	3648      	adds	r6, #72	; 0x48
 80045f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	d503      	bpl.n	8004608 <__sfp+0x28>
 8004600:	6833      	ldr	r3, [r6, #0]
 8004602:	b30b      	cbz	r3, 8004648 <__sfp+0x68>
 8004604:	6836      	ldr	r6, [r6, #0]
 8004606:	e7f7      	b.n	80045f8 <__sfp+0x18>
 8004608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800460c:	b9d5      	cbnz	r5, 8004644 <__sfp+0x64>
 800460e:	4b16      	ldr	r3, [pc, #88]	; (8004668 <__sfp+0x88>)
 8004610:	60e3      	str	r3, [r4, #12]
 8004612:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004616:	6665      	str	r5, [r4, #100]	; 0x64
 8004618:	f000 f847 	bl	80046aa <__retarget_lock_init_recursive>
 800461c:	f7ff ff96 	bl	800454c <__sfp_lock_release>
 8004620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004628:	6025      	str	r5, [r4, #0]
 800462a:	61a5      	str	r5, [r4, #24]
 800462c:	2208      	movs	r2, #8
 800462e:	4629      	mov	r1, r5
 8004630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004634:	f7ff fd2c 	bl	8004090 <memset>
 8004638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800463c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004640:	4620      	mov	r0, r4
 8004642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004644:	3468      	adds	r4, #104	; 0x68
 8004646:	e7d9      	b.n	80045fc <__sfp+0x1c>
 8004648:	2104      	movs	r1, #4
 800464a:	4638      	mov	r0, r7
 800464c:	f7ff ff62 	bl	8004514 <__sfmoreglue>
 8004650:	4604      	mov	r4, r0
 8004652:	6030      	str	r0, [r6, #0]
 8004654:	2800      	cmp	r0, #0
 8004656:	d1d5      	bne.n	8004604 <__sfp+0x24>
 8004658:	f7ff ff78 	bl	800454c <__sfp_lock_release>
 800465c:	230c      	movs	r3, #12
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	e7ee      	b.n	8004640 <__sfp+0x60>
 8004662:	bf00      	nop
 8004664:	080050ec 	.word	0x080050ec
 8004668:	ffff0001 	.word	0xffff0001

0800466c <_fwalk_reent>:
 800466c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004670:	4606      	mov	r6, r0
 8004672:	4688      	mov	r8, r1
 8004674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004678:	2700      	movs	r7, #0
 800467a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800467e:	f1b9 0901 	subs.w	r9, r9, #1
 8004682:	d505      	bpl.n	8004690 <_fwalk_reent+0x24>
 8004684:	6824      	ldr	r4, [r4, #0]
 8004686:	2c00      	cmp	r4, #0
 8004688:	d1f7      	bne.n	800467a <_fwalk_reent+0xe>
 800468a:	4638      	mov	r0, r7
 800468c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004690:	89ab      	ldrh	r3, [r5, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d907      	bls.n	80046a6 <_fwalk_reent+0x3a>
 8004696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800469a:	3301      	adds	r3, #1
 800469c:	d003      	beq.n	80046a6 <_fwalk_reent+0x3a>
 800469e:	4629      	mov	r1, r5
 80046a0:	4630      	mov	r0, r6
 80046a2:	47c0      	blx	r8
 80046a4:	4307      	orrs	r7, r0
 80046a6:	3568      	adds	r5, #104	; 0x68
 80046a8:	e7e9      	b.n	800467e <_fwalk_reent+0x12>

080046aa <__retarget_lock_init_recursive>:
 80046aa:	4770      	bx	lr

080046ac <__retarget_lock_acquire_recursive>:
 80046ac:	4770      	bx	lr

080046ae <__retarget_lock_release_recursive>:
 80046ae:	4770      	bx	lr

080046b0 <__swhatbuf_r>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	460e      	mov	r6, r1
 80046b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b8:	2900      	cmp	r1, #0
 80046ba:	b096      	sub	sp, #88	; 0x58
 80046bc:	4614      	mov	r4, r2
 80046be:	461d      	mov	r5, r3
 80046c0:	da08      	bge.n	80046d4 <__swhatbuf_r+0x24>
 80046c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	602a      	str	r2, [r5, #0]
 80046ca:	061a      	lsls	r2, r3, #24
 80046cc:	d410      	bmi.n	80046f0 <__swhatbuf_r+0x40>
 80046ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d2:	e00e      	b.n	80046f2 <__swhatbuf_r+0x42>
 80046d4:	466a      	mov	r2, sp
 80046d6:	f000 fc95 	bl	8005004 <_fstat_r>
 80046da:	2800      	cmp	r0, #0
 80046dc:	dbf1      	blt.n	80046c2 <__swhatbuf_r+0x12>
 80046de:	9a01      	ldr	r2, [sp, #4]
 80046e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046e8:	425a      	negs	r2, r3
 80046ea:	415a      	adcs	r2, r3
 80046ec:	602a      	str	r2, [r5, #0]
 80046ee:	e7ee      	b.n	80046ce <__swhatbuf_r+0x1e>
 80046f0:	2340      	movs	r3, #64	; 0x40
 80046f2:	2000      	movs	r0, #0
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	b016      	add	sp, #88	; 0x58
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080046fc <__smakebuf_r>:
 80046fc:	898b      	ldrh	r3, [r1, #12]
 80046fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004700:	079d      	lsls	r5, r3, #30
 8004702:	4606      	mov	r6, r0
 8004704:	460c      	mov	r4, r1
 8004706:	d507      	bpl.n	8004718 <__smakebuf_r+0x1c>
 8004708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	2301      	movs	r3, #1
 8004712:	6163      	str	r3, [r4, #20]
 8004714:	b002      	add	sp, #8
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	ab01      	add	r3, sp, #4
 800471a:	466a      	mov	r2, sp
 800471c:	f7ff ffc8 	bl	80046b0 <__swhatbuf_r>
 8004720:	9900      	ldr	r1, [sp, #0]
 8004722:	4605      	mov	r5, r0
 8004724:	4630      	mov	r0, r6
 8004726:	f000 f895 	bl	8004854 <_malloc_r>
 800472a:	b948      	cbnz	r0, 8004740 <__smakebuf_r+0x44>
 800472c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004730:	059a      	lsls	r2, r3, #22
 8004732:	d4ef      	bmi.n	8004714 <__smakebuf_r+0x18>
 8004734:	f023 0303 	bic.w	r3, r3, #3
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	81a3      	strh	r3, [r4, #12]
 800473e:	e7e3      	b.n	8004708 <__smakebuf_r+0xc>
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <__smakebuf_r+0x7c>)
 8004742:	62b3      	str	r3, [r6, #40]	; 0x28
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	6020      	str	r0, [r4, #0]
 8004748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	9b00      	ldr	r3, [sp, #0]
 8004750:	6163      	str	r3, [r4, #20]
 8004752:	9b01      	ldr	r3, [sp, #4]
 8004754:	6120      	str	r0, [r4, #16]
 8004756:	b15b      	cbz	r3, 8004770 <__smakebuf_r+0x74>
 8004758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800475c:	4630      	mov	r0, r6
 800475e:	f000 fc63 	bl	8005028 <_isatty_r>
 8004762:	b128      	cbz	r0, 8004770 <__smakebuf_r+0x74>
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	89a0      	ldrh	r0, [r4, #12]
 8004772:	4305      	orrs	r5, r0
 8004774:	81a5      	strh	r5, [r4, #12]
 8004776:	e7cd      	b.n	8004714 <__smakebuf_r+0x18>
 8004778:	08004509 	.word	0x08004509

0800477c <_free_r>:
 800477c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800477e:	2900      	cmp	r1, #0
 8004780:	d044      	beq.n	800480c <_free_r+0x90>
 8004782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004786:	9001      	str	r0, [sp, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f1a1 0404 	sub.w	r4, r1, #4
 800478e:	bfb8      	it	lt
 8004790:	18e4      	addlt	r4, r4, r3
 8004792:	f000 fc6b 	bl	800506c <__malloc_lock>
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <_free_r+0x94>)
 8004798:	9801      	ldr	r0, [sp, #4]
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	b933      	cbnz	r3, 80047ac <_free_r+0x30>
 800479e:	6063      	str	r3, [r4, #4]
 80047a0:	6014      	str	r4, [r2, #0]
 80047a2:	b003      	add	sp, #12
 80047a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047a8:	f000 bc66 	b.w	8005078 <__malloc_unlock>
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d908      	bls.n	80047c2 <_free_r+0x46>
 80047b0:	6825      	ldr	r5, [r4, #0]
 80047b2:	1961      	adds	r1, r4, r5
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf01      	itttt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	1949      	addeq	r1, r1, r5
 80047be:	6021      	streq	r1, [r4, #0]
 80047c0:	e7ed      	b.n	800479e <_free_r+0x22>
 80047c2:	461a      	mov	r2, r3
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	b10b      	cbz	r3, 80047cc <_free_r+0x50>
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	d9fa      	bls.n	80047c2 <_free_r+0x46>
 80047cc:	6811      	ldr	r1, [r2, #0]
 80047ce:	1855      	adds	r5, r2, r1
 80047d0:	42a5      	cmp	r5, r4
 80047d2:	d10b      	bne.n	80047ec <_free_r+0x70>
 80047d4:	6824      	ldr	r4, [r4, #0]
 80047d6:	4421      	add	r1, r4
 80047d8:	1854      	adds	r4, r2, r1
 80047da:	42a3      	cmp	r3, r4
 80047dc:	6011      	str	r1, [r2, #0]
 80047de:	d1e0      	bne.n	80047a2 <_free_r+0x26>
 80047e0:	681c      	ldr	r4, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	6053      	str	r3, [r2, #4]
 80047e6:	4421      	add	r1, r4
 80047e8:	6011      	str	r1, [r2, #0]
 80047ea:	e7da      	b.n	80047a2 <_free_r+0x26>
 80047ec:	d902      	bls.n	80047f4 <_free_r+0x78>
 80047ee:	230c      	movs	r3, #12
 80047f0:	6003      	str	r3, [r0, #0]
 80047f2:	e7d6      	b.n	80047a2 <_free_r+0x26>
 80047f4:	6825      	ldr	r5, [r4, #0]
 80047f6:	1961      	adds	r1, r4, r5
 80047f8:	428b      	cmp	r3, r1
 80047fa:	bf04      	itt	eq
 80047fc:	6819      	ldreq	r1, [r3, #0]
 80047fe:	685b      	ldreq	r3, [r3, #4]
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	bf04      	itt	eq
 8004804:	1949      	addeq	r1, r1, r5
 8004806:	6021      	streq	r1, [r4, #0]
 8004808:	6054      	str	r4, [r2, #4]
 800480a:	e7ca      	b.n	80047a2 <_free_r+0x26>
 800480c:	b003      	add	sp, #12
 800480e:	bd30      	pop	{r4, r5, pc}
 8004810:	20000818 	.word	0x20000818

08004814 <sbrk_aligned>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4e0e      	ldr	r6, [pc, #56]	; (8004850 <sbrk_aligned+0x3c>)
 8004818:	460c      	mov	r4, r1
 800481a:	6831      	ldr	r1, [r6, #0]
 800481c:	4605      	mov	r5, r0
 800481e:	b911      	cbnz	r1, 8004826 <sbrk_aligned+0x12>
 8004820:	f000 fb7a 	bl	8004f18 <_sbrk_r>
 8004824:	6030      	str	r0, [r6, #0]
 8004826:	4621      	mov	r1, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 fb75 	bl	8004f18 <_sbrk_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d00a      	beq.n	8004848 <sbrk_aligned+0x34>
 8004832:	1cc4      	adds	r4, r0, #3
 8004834:	f024 0403 	bic.w	r4, r4, #3
 8004838:	42a0      	cmp	r0, r4
 800483a:	d007      	beq.n	800484c <sbrk_aligned+0x38>
 800483c:	1a21      	subs	r1, r4, r0
 800483e:	4628      	mov	r0, r5
 8004840:	f000 fb6a 	bl	8004f18 <_sbrk_r>
 8004844:	3001      	adds	r0, #1
 8004846:	d101      	bne.n	800484c <sbrk_aligned+0x38>
 8004848:	f04f 34ff 	mov.w	r4, #4294967295
 800484c:	4620      	mov	r0, r4
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	2000081c 	.word	0x2000081c

08004854 <_malloc_r>:
 8004854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004858:	1ccd      	adds	r5, r1, #3
 800485a:	f025 0503 	bic.w	r5, r5, #3
 800485e:	3508      	adds	r5, #8
 8004860:	2d0c      	cmp	r5, #12
 8004862:	bf38      	it	cc
 8004864:	250c      	movcc	r5, #12
 8004866:	2d00      	cmp	r5, #0
 8004868:	4607      	mov	r7, r0
 800486a:	db01      	blt.n	8004870 <_malloc_r+0x1c>
 800486c:	42a9      	cmp	r1, r5
 800486e:	d905      	bls.n	800487c <_malloc_r+0x28>
 8004870:	230c      	movs	r3, #12
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	2600      	movs	r6, #0
 8004876:	4630      	mov	r0, r6
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	4e2e      	ldr	r6, [pc, #184]	; (8004938 <_malloc_r+0xe4>)
 800487e:	f000 fbf5 	bl	800506c <__malloc_lock>
 8004882:	6833      	ldr	r3, [r6, #0]
 8004884:	461c      	mov	r4, r3
 8004886:	bb34      	cbnz	r4, 80048d6 <_malloc_r+0x82>
 8004888:	4629      	mov	r1, r5
 800488a:	4638      	mov	r0, r7
 800488c:	f7ff ffc2 	bl	8004814 <sbrk_aligned>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	4604      	mov	r4, r0
 8004894:	d14d      	bne.n	8004932 <_malloc_r+0xde>
 8004896:	6834      	ldr	r4, [r6, #0]
 8004898:	4626      	mov	r6, r4
 800489a:	2e00      	cmp	r6, #0
 800489c:	d140      	bne.n	8004920 <_malloc_r+0xcc>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	4631      	mov	r1, r6
 80048a2:	4638      	mov	r0, r7
 80048a4:	eb04 0803 	add.w	r8, r4, r3
 80048a8:	f000 fb36 	bl	8004f18 <_sbrk_r>
 80048ac:	4580      	cmp	r8, r0
 80048ae:	d13a      	bne.n	8004926 <_malloc_r+0xd2>
 80048b0:	6821      	ldr	r1, [r4, #0]
 80048b2:	3503      	adds	r5, #3
 80048b4:	1a6d      	subs	r5, r5, r1
 80048b6:	f025 0503 	bic.w	r5, r5, #3
 80048ba:	3508      	adds	r5, #8
 80048bc:	2d0c      	cmp	r5, #12
 80048be:	bf38      	it	cc
 80048c0:	250c      	movcc	r5, #12
 80048c2:	4629      	mov	r1, r5
 80048c4:	4638      	mov	r0, r7
 80048c6:	f7ff ffa5 	bl	8004814 <sbrk_aligned>
 80048ca:	3001      	adds	r0, #1
 80048cc:	d02b      	beq.n	8004926 <_malloc_r+0xd2>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	442b      	add	r3, r5
 80048d2:	6023      	str	r3, [r4, #0]
 80048d4:	e00e      	b.n	80048f4 <_malloc_r+0xa0>
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	1b52      	subs	r2, r2, r5
 80048da:	d41e      	bmi.n	800491a <_malloc_r+0xc6>
 80048dc:	2a0b      	cmp	r2, #11
 80048de:	d916      	bls.n	800490e <_malloc_r+0xba>
 80048e0:	1961      	adds	r1, r4, r5
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	6025      	str	r5, [r4, #0]
 80048e6:	bf18      	it	ne
 80048e8:	6059      	strne	r1, [r3, #4]
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	bf08      	it	eq
 80048ee:	6031      	streq	r1, [r6, #0]
 80048f0:	5162      	str	r2, [r4, r5]
 80048f2:	604b      	str	r3, [r1, #4]
 80048f4:	4638      	mov	r0, r7
 80048f6:	f104 060b 	add.w	r6, r4, #11
 80048fa:	f000 fbbd 	bl	8005078 <__malloc_unlock>
 80048fe:	f026 0607 	bic.w	r6, r6, #7
 8004902:	1d23      	adds	r3, r4, #4
 8004904:	1af2      	subs	r2, r6, r3
 8004906:	d0b6      	beq.n	8004876 <_malloc_r+0x22>
 8004908:	1b9b      	subs	r3, r3, r6
 800490a:	50a3      	str	r3, [r4, r2]
 800490c:	e7b3      	b.n	8004876 <_malloc_r+0x22>
 800490e:	6862      	ldr	r2, [r4, #4]
 8004910:	42a3      	cmp	r3, r4
 8004912:	bf0c      	ite	eq
 8004914:	6032      	streq	r2, [r6, #0]
 8004916:	605a      	strne	r2, [r3, #4]
 8004918:	e7ec      	b.n	80048f4 <_malloc_r+0xa0>
 800491a:	4623      	mov	r3, r4
 800491c:	6864      	ldr	r4, [r4, #4]
 800491e:	e7b2      	b.n	8004886 <_malloc_r+0x32>
 8004920:	4634      	mov	r4, r6
 8004922:	6876      	ldr	r6, [r6, #4]
 8004924:	e7b9      	b.n	800489a <_malloc_r+0x46>
 8004926:	230c      	movs	r3, #12
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	4638      	mov	r0, r7
 800492c:	f000 fba4 	bl	8005078 <__malloc_unlock>
 8004930:	e7a1      	b.n	8004876 <_malloc_r+0x22>
 8004932:	6025      	str	r5, [r4, #0]
 8004934:	e7de      	b.n	80048f4 <_malloc_r+0xa0>
 8004936:	bf00      	nop
 8004938:	20000818 	.word	0x20000818

0800493c <__sfputc_r>:
 800493c:	6893      	ldr	r3, [r2, #8]
 800493e:	3b01      	subs	r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	b410      	push	{r4}
 8004944:	6093      	str	r3, [r2, #8]
 8004946:	da08      	bge.n	800495a <__sfputc_r+0x1e>
 8004948:	6994      	ldr	r4, [r2, #24]
 800494a:	42a3      	cmp	r3, r4
 800494c:	db01      	blt.n	8004952 <__sfputc_r+0x16>
 800494e:	290a      	cmp	r1, #10
 8004950:	d103      	bne.n	800495a <__sfputc_r+0x1e>
 8004952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004956:	f7ff bc31 	b.w	80041bc <__swbuf_r>
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	1c58      	adds	r0, r3, #1
 800495e:	6010      	str	r0, [r2, #0]
 8004960:	7019      	strb	r1, [r3, #0]
 8004962:	4608      	mov	r0, r1
 8004964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004968:	4770      	bx	lr

0800496a <__sfputs_r>:
 800496a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496c:	4606      	mov	r6, r0
 800496e:	460f      	mov	r7, r1
 8004970:	4614      	mov	r4, r2
 8004972:	18d5      	adds	r5, r2, r3
 8004974:	42ac      	cmp	r4, r5
 8004976:	d101      	bne.n	800497c <__sfputs_r+0x12>
 8004978:	2000      	movs	r0, #0
 800497a:	e007      	b.n	800498c <__sfputs_r+0x22>
 800497c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004980:	463a      	mov	r2, r7
 8004982:	4630      	mov	r0, r6
 8004984:	f7ff ffda 	bl	800493c <__sfputc_r>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d1f3      	bne.n	8004974 <__sfputs_r+0xa>
 800498c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004990 <_vfiprintf_r>:
 8004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	460d      	mov	r5, r1
 8004996:	b09d      	sub	sp, #116	; 0x74
 8004998:	4614      	mov	r4, r2
 800499a:	4698      	mov	r8, r3
 800499c:	4606      	mov	r6, r0
 800499e:	b118      	cbz	r0, 80049a8 <_vfiprintf_r+0x18>
 80049a0:	6983      	ldr	r3, [r0, #24]
 80049a2:	b90b      	cbnz	r3, 80049a8 <_vfiprintf_r+0x18>
 80049a4:	f7ff fde4 	bl	8004570 <__sinit>
 80049a8:	4b89      	ldr	r3, [pc, #548]	; (8004bd0 <_vfiprintf_r+0x240>)
 80049aa:	429d      	cmp	r5, r3
 80049ac:	d11b      	bne.n	80049e6 <_vfiprintf_r+0x56>
 80049ae:	6875      	ldr	r5, [r6, #4]
 80049b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049b2:	07d9      	lsls	r1, r3, #31
 80049b4:	d405      	bmi.n	80049c2 <_vfiprintf_r+0x32>
 80049b6:	89ab      	ldrh	r3, [r5, #12]
 80049b8:	059a      	lsls	r2, r3, #22
 80049ba:	d402      	bmi.n	80049c2 <_vfiprintf_r+0x32>
 80049bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049be:	f7ff fe75 	bl	80046ac <__retarget_lock_acquire_recursive>
 80049c2:	89ab      	ldrh	r3, [r5, #12]
 80049c4:	071b      	lsls	r3, r3, #28
 80049c6:	d501      	bpl.n	80049cc <_vfiprintf_r+0x3c>
 80049c8:	692b      	ldr	r3, [r5, #16]
 80049ca:	b9eb      	cbnz	r3, 8004a08 <_vfiprintf_r+0x78>
 80049cc:	4629      	mov	r1, r5
 80049ce:	4630      	mov	r0, r6
 80049d0:	f7ff fc46 	bl	8004260 <__swsetup_r>
 80049d4:	b1c0      	cbz	r0, 8004a08 <_vfiprintf_r+0x78>
 80049d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049d8:	07dc      	lsls	r4, r3, #31
 80049da:	d50e      	bpl.n	80049fa <_vfiprintf_r+0x6a>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	b01d      	add	sp, #116	; 0x74
 80049e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e6:	4b7b      	ldr	r3, [pc, #492]	; (8004bd4 <_vfiprintf_r+0x244>)
 80049e8:	429d      	cmp	r5, r3
 80049ea:	d101      	bne.n	80049f0 <_vfiprintf_r+0x60>
 80049ec:	68b5      	ldr	r5, [r6, #8]
 80049ee:	e7df      	b.n	80049b0 <_vfiprintf_r+0x20>
 80049f0:	4b79      	ldr	r3, [pc, #484]	; (8004bd8 <_vfiprintf_r+0x248>)
 80049f2:	429d      	cmp	r5, r3
 80049f4:	bf08      	it	eq
 80049f6:	68f5      	ldreq	r5, [r6, #12]
 80049f8:	e7da      	b.n	80049b0 <_vfiprintf_r+0x20>
 80049fa:	89ab      	ldrh	r3, [r5, #12]
 80049fc:	0598      	lsls	r0, r3, #22
 80049fe:	d4ed      	bmi.n	80049dc <_vfiprintf_r+0x4c>
 8004a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a02:	f7ff fe54 	bl	80046ae <__retarget_lock_release_recursive>
 8004a06:	e7e9      	b.n	80049dc <_vfiprintf_r+0x4c>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a16:	2330      	movs	r3, #48	; 0x30
 8004a18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004bdc <_vfiprintf_r+0x24c>
 8004a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a20:	f04f 0901 	mov.w	r9, #1
 8004a24:	4623      	mov	r3, r4
 8004a26:	469a      	mov	sl, r3
 8004a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a2c:	b10a      	cbz	r2, 8004a32 <_vfiprintf_r+0xa2>
 8004a2e:	2a25      	cmp	r2, #37	; 0x25
 8004a30:	d1f9      	bne.n	8004a26 <_vfiprintf_r+0x96>
 8004a32:	ebba 0b04 	subs.w	fp, sl, r4
 8004a36:	d00b      	beq.n	8004a50 <_vfiprintf_r+0xc0>
 8004a38:	465b      	mov	r3, fp
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	4630      	mov	r0, r6
 8004a40:	f7ff ff93 	bl	800496a <__sfputs_r>
 8004a44:	3001      	adds	r0, #1
 8004a46:	f000 80aa 	beq.w	8004b9e <_vfiprintf_r+0x20e>
 8004a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a4c:	445a      	add	r2, fp
 8004a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a50:	f89a 3000 	ldrb.w	r3, [sl]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80a2 	beq.w	8004b9e <_vfiprintf_r+0x20e>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a64:	f10a 0a01 	add.w	sl, sl, #1
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	9307      	str	r3, [sp, #28]
 8004a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a70:	931a      	str	r3, [sp, #104]	; 0x68
 8004a72:	4654      	mov	r4, sl
 8004a74:	2205      	movs	r2, #5
 8004a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a7a:	4858      	ldr	r0, [pc, #352]	; (8004bdc <_vfiprintf_r+0x24c>)
 8004a7c:	f7fb fc90 	bl	80003a0 <memchr>
 8004a80:	9a04      	ldr	r2, [sp, #16]
 8004a82:	b9d8      	cbnz	r0, 8004abc <_vfiprintf_r+0x12c>
 8004a84:	06d1      	lsls	r1, r2, #27
 8004a86:	bf44      	itt	mi
 8004a88:	2320      	movmi	r3, #32
 8004a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a8e:	0713      	lsls	r3, r2, #28
 8004a90:	bf44      	itt	mi
 8004a92:	232b      	movmi	r3, #43	; 0x2b
 8004a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a98:	f89a 3000 	ldrb.w	r3, [sl]
 8004a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9e:	d015      	beq.n	8004acc <_vfiprintf_r+0x13c>
 8004aa0:	9a07      	ldr	r2, [sp, #28]
 8004aa2:	4654      	mov	r4, sl
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f04f 0c0a 	mov.w	ip, #10
 8004aaa:	4621      	mov	r1, r4
 8004aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab0:	3b30      	subs	r3, #48	; 0x30
 8004ab2:	2b09      	cmp	r3, #9
 8004ab4:	d94e      	bls.n	8004b54 <_vfiprintf_r+0x1c4>
 8004ab6:	b1b0      	cbz	r0, 8004ae6 <_vfiprintf_r+0x156>
 8004ab8:	9207      	str	r2, [sp, #28]
 8004aba:	e014      	b.n	8004ae6 <_vfiprintf_r+0x156>
 8004abc:	eba0 0308 	sub.w	r3, r0, r8
 8004ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	9304      	str	r3, [sp, #16]
 8004ac8:	46a2      	mov	sl, r4
 8004aca:	e7d2      	b.n	8004a72 <_vfiprintf_r+0xe2>
 8004acc:	9b03      	ldr	r3, [sp, #12]
 8004ace:	1d19      	adds	r1, r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	9103      	str	r1, [sp, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bfbb      	ittet	lt
 8004ad8:	425b      	neglt	r3, r3
 8004ada:	f042 0202 	orrlt.w	r2, r2, #2
 8004ade:	9307      	strge	r3, [sp, #28]
 8004ae0:	9307      	strlt	r3, [sp, #28]
 8004ae2:	bfb8      	it	lt
 8004ae4:	9204      	strlt	r2, [sp, #16]
 8004ae6:	7823      	ldrb	r3, [r4, #0]
 8004ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aea:	d10c      	bne.n	8004b06 <_vfiprintf_r+0x176>
 8004aec:	7863      	ldrb	r3, [r4, #1]
 8004aee:	2b2a      	cmp	r3, #42	; 0x2a
 8004af0:	d135      	bne.n	8004b5e <_vfiprintf_r+0x1ce>
 8004af2:	9b03      	ldr	r3, [sp, #12]
 8004af4:	1d1a      	adds	r2, r3, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	9203      	str	r2, [sp, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bfb8      	it	lt
 8004afe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b02:	3402      	adds	r4, #2
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bec <_vfiprintf_r+0x25c>
 8004b0a:	7821      	ldrb	r1, [r4, #0]
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	4650      	mov	r0, sl
 8004b10:	f7fb fc46 	bl	80003a0 <memchr>
 8004b14:	b140      	cbz	r0, 8004b28 <_vfiprintf_r+0x198>
 8004b16:	2340      	movs	r3, #64	; 0x40
 8004b18:	eba0 000a 	sub.w	r0, r0, sl
 8004b1c:	fa03 f000 	lsl.w	r0, r3, r0
 8004b20:	9b04      	ldr	r3, [sp, #16]
 8004b22:	4303      	orrs	r3, r0
 8004b24:	3401      	adds	r4, #1
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2c:	482c      	ldr	r0, [pc, #176]	; (8004be0 <_vfiprintf_r+0x250>)
 8004b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b32:	2206      	movs	r2, #6
 8004b34:	f7fb fc34 	bl	80003a0 <memchr>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d03f      	beq.n	8004bbc <_vfiprintf_r+0x22c>
 8004b3c:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <_vfiprintf_r+0x254>)
 8004b3e:	bb1b      	cbnz	r3, 8004b88 <_vfiprintf_r+0x1f8>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	3307      	adds	r3, #7
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	3308      	adds	r3, #8
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b4e:	443b      	add	r3, r7
 8004b50:	9309      	str	r3, [sp, #36]	; 0x24
 8004b52:	e767      	b.n	8004a24 <_vfiprintf_r+0x94>
 8004b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b58:	460c      	mov	r4, r1
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	e7a5      	b.n	8004aaa <_vfiprintf_r+0x11a>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	3401      	adds	r4, #1
 8004b62:	9305      	str	r3, [sp, #20]
 8004b64:	4619      	mov	r1, r3
 8004b66:	f04f 0c0a 	mov.w	ip, #10
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b70:	3a30      	subs	r2, #48	; 0x30
 8004b72:	2a09      	cmp	r2, #9
 8004b74:	d903      	bls.n	8004b7e <_vfiprintf_r+0x1ee>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0c5      	beq.n	8004b06 <_vfiprintf_r+0x176>
 8004b7a:	9105      	str	r1, [sp, #20]
 8004b7c:	e7c3      	b.n	8004b06 <_vfiprintf_r+0x176>
 8004b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b82:	4604      	mov	r4, r0
 8004b84:	2301      	movs	r3, #1
 8004b86:	e7f0      	b.n	8004b6a <_vfiprintf_r+0x1da>
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	462a      	mov	r2, r5
 8004b8e:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <_vfiprintf_r+0x258>)
 8004b90:	a904      	add	r1, sp, #16
 8004b92:	4630      	mov	r0, r6
 8004b94:	f3af 8000 	nop.w
 8004b98:	4607      	mov	r7, r0
 8004b9a:	1c78      	adds	r0, r7, #1
 8004b9c:	d1d6      	bne.n	8004b4c <_vfiprintf_r+0x1bc>
 8004b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ba0:	07d9      	lsls	r1, r3, #31
 8004ba2:	d405      	bmi.n	8004bb0 <_vfiprintf_r+0x220>
 8004ba4:	89ab      	ldrh	r3, [r5, #12]
 8004ba6:	059a      	lsls	r2, r3, #22
 8004ba8:	d402      	bmi.n	8004bb0 <_vfiprintf_r+0x220>
 8004baa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bac:	f7ff fd7f 	bl	80046ae <__retarget_lock_release_recursive>
 8004bb0:	89ab      	ldrh	r3, [r5, #12]
 8004bb2:	065b      	lsls	r3, r3, #25
 8004bb4:	f53f af12 	bmi.w	80049dc <_vfiprintf_r+0x4c>
 8004bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bba:	e711      	b.n	80049e0 <_vfiprintf_r+0x50>
 8004bbc:	ab03      	add	r3, sp, #12
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	462a      	mov	r2, r5
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <_vfiprintf_r+0x258>)
 8004bc4:	a904      	add	r1, sp, #16
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f000 f880 	bl	8004ccc <_printf_i>
 8004bcc:	e7e4      	b.n	8004b98 <_vfiprintf_r+0x208>
 8004bce:	bf00      	nop
 8004bd0:	08005110 	.word	0x08005110
 8004bd4:	08005130 	.word	0x08005130
 8004bd8:	080050f0 	.word	0x080050f0
 8004bdc:	08005150 	.word	0x08005150
 8004be0:	0800515a 	.word	0x0800515a
 8004be4:	00000000 	.word	0x00000000
 8004be8:	0800496b 	.word	0x0800496b
 8004bec:	08005156 	.word	0x08005156

08004bf0 <_printf_common>:
 8004bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	4699      	mov	r9, r3
 8004bf8:	688a      	ldr	r2, [r1, #8]
 8004bfa:	690b      	ldr	r3, [r1, #16]
 8004bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c00:	4293      	cmp	r3, r2
 8004c02:	bfb8      	it	lt
 8004c04:	4613      	movlt	r3, r2
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c0c:	4607      	mov	r7, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	b10a      	cbz	r2, 8004c16 <_printf_common+0x26>
 8004c12:	3301      	adds	r3, #1
 8004c14:	6033      	str	r3, [r6, #0]
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	0699      	lsls	r1, r3, #26
 8004c1a:	bf42      	ittt	mi
 8004c1c:	6833      	ldrmi	r3, [r6, #0]
 8004c1e:	3302      	addmi	r3, #2
 8004c20:	6033      	strmi	r3, [r6, #0]
 8004c22:	6825      	ldr	r5, [r4, #0]
 8004c24:	f015 0506 	ands.w	r5, r5, #6
 8004c28:	d106      	bne.n	8004c38 <_printf_common+0x48>
 8004c2a:	f104 0a19 	add.w	sl, r4, #25
 8004c2e:	68e3      	ldr	r3, [r4, #12]
 8004c30:	6832      	ldr	r2, [r6, #0]
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	42ab      	cmp	r3, r5
 8004c36:	dc26      	bgt.n	8004c86 <_printf_common+0x96>
 8004c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c3c:	1e13      	subs	r3, r2, #0
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	bf18      	it	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	0692      	lsls	r2, r2, #26
 8004c46:	d42b      	bmi.n	8004ca0 <_printf_common+0xb0>
 8004c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	4638      	mov	r0, r7
 8004c50:	47c0      	blx	r8
 8004c52:	3001      	adds	r0, #1
 8004c54:	d01e      	beq.n	8004c94 <_printf_common+0xa4>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	68e5      	ldr	r5, [r4, #12]
 8004c5a:	6832      	ldr	r2, [r6, #0]
 8004c5c:	f003 0306 	and.w	r3, r3, #6
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	bf08      	it	eq
 8004c64:	1aad      	subeq	r5, r5, r2
 8004c66:	68a3      	ldr	r3, [r4, #8]
 8004c68:	6922      	ldr	r2, [r4, #16]
 8004c6a:	bf0c      	ite	eq
 8004c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c70:	2500      	movne	r5, #0
 8004c72:	4293      	cmp	r3, r2
 8004c74:	bfc4      	itt	gt
 8004c76:	1a9b      	subgt	r3, r3, r2
 8004c78:	18ed      	addgt	r5, r5, r3
 8004c7a:	2600      	movs	r6, #0
 8004c7c:	341a      	adds	r4, #26
 8004c7e:	42b5      	cmp	r5, r6
 8004c80:	d11a      	bne.n	8004cb8 <_printf_common+0xc8>
 8004c82:	2000      	movs	r0, #0
 8004c84:	e008      	b.n	8004c98 <_printf_common+0xa8>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4652      	mov	r2, sl
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	47c0      	blx	r8
 8004c90:	3001      	adds	r0, #1
 8004c92:	d103      	bne.n	8004c9c <_printf_common+0xac>
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9c:	3501      	adds	r5, #1
 8004c9e:	e7c6      	b.n	8004c2e <_printf_common+0x3e>
 8004ca0:	18e1      	adds	r1, r4, r3
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	2030      	movs	r0, #48	; 0x30
 8004ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004caa:	4422      	add	r2, r4
 8004cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	e7c7      	b.n	8004c48 <_printf_common+0x58>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4622      	mov	r2, r4
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	47c0      	blx	r8
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d0e6      	beq.n	8004c94 <_printf_common+0xa4>
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7d9      	b.n	8004c7e <_printf_common+0x8e>
	...

08004ccc <_printf_i>:
 8004ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd0:	7e0f      	ldrb	r7, [r1, #24]
 8004cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cd4:	2f78      	cmp	r7, #120	; 0x78
 8004cd6:	4691      	mov	r9, r2
 8004cd8:	4680      	mov	r8, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	469a      	mov	sl, r3
 8004cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ce2:	d807      	bhi.n	8004cf4 <_printf_i+0x28>
 8004ce4:	2f62      	cmp	r7, #98	; 0x62
 8004ce6:	d80a      	bhi.n	8004cfe <_printf_i+0x32>
 8004ce8:	2f00      	cmp	r7, #0
 8004cea:	f000 80d8 	beq.w	8004e9e <_printf_i+0x1d2>
 8004cee:	2f58      	cmp	r7, #88	; 0x58
 8004cf0:	f000 80a3 	beq.w	8004e3a <_printf_i+0x16e>
 8004cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cfc:	e03a      	b.n	8004d74 <_printf_i+0xa8>
 8004cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d02:	2b15      	cmp	r3, #21
 8004d04:	d8f6      	bhi.n	8004cf4 <_printf_i+0x28>
 8004d06:	a101      	add	r1, pc, #4	; (adr r1, 8004d0c <_printf_i+0x40>)
 8004d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d0c:	08004d65 	.word	0x08004d65
 8004d10:	08004d79 	.word	0x08004d79
 8004d14:	08004cf5 	.word	0x08004cf5
 8004d18:	08004cf5 	.word	0x08004cf5
 8004d1c:	08004cf5 	.word	0x08004cf5
 8004d20:	08004cf5 	.word	0x08004cf5
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004cf5 	.word	0x08004cf5
 8004d2c:	08004cf5 	.word	0x08004cf5
 8004d30:	08004cf5 	.word	0x08004cf5
 8004d34:	08004cf5 	.word	0x08004cf5
 8004d38:	08004e85 	.word	0x08004e85
 8004d3c:	08004da9 	.word	0x08004da9
 8004d40:	08004e67 	.word	0x08004e67
 8004d44:	08004cf5 	.word	0x08004cf5
 8004d48:	08004cf5 	.word	0x08004cf5
 8004d4c:	08004ea7 	.word	0x08004ea7
 8004d50:	08004cf5 	.word	0x08004cf5
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004cf5 	.word	0x08004cf5
 8004d5c:	08004cf5 	.word	0x08004cf5
 8004d60:	08004e6f 	.word	0x08004e6f
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	1d1a      	adds	r2, r3, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	602a      	str	r2, [r5, #0]
 8004d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0a3      	b.n	8004ec0 <_printf_i+0x1f4>
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	6829      	ldr	r1, [r5, #0]
 8004d7c:	0606      	lsls	r6, r0, #24
 8004d7e:	f101 0304 	add.w	r3, r1, #4
 8004d82:	d50a      	bpl.n	8004d9a <_printf_i+0xce>
 8004d84:	680e      	ldr	r6, [r1, #0]
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	2e00      	cmp	r6, #0
 8004d8a:	da03      	bge.n	8004d94 <_printf_i+0xc8>
 8004d8c:	232d      	movs	r3, #45	; 0x2d
 8004d8e:	4276      	negs	r6, r6
 8004d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d94:	485e      	ldr	r0, [pc, #376]	; (8004f10 <_printf_i+0x244>)
 8004d96:	230a      	movs	r3, #10
 8004d98:	e019      	b.n	8004dce <_printf_i+0x102>
 8004d9a:	680e      	ldr	r6, [r1, #0]
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004da2:	bf18      	it	ne
 8004da4:	b236      	sxthne	r6, r6
 8004da6:	e7ef      	b.n	8004d88 <_printf_i+0xbc>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	6029      	str	r1, [r5, #0]
 8004db0:	0601      	lsls	r1, r0, #24
 8004db2:	d501      	bpl.n	8004db8 <_printf_i+0xec>
 8004db4:	681e      	ldr	r6, [r3, #0]
 8004db6:	e002      	b.n	8004dbe <_printf_i+0xf2>
 8004db8:	0646      	lsls	r6, r0, #25
 8004dba:	d5fb      	bpl.n	8004db4 <_printf_i+0xe8>
 8004dbc:	881e      	ldrh	r6, [r3, #0]
 8004dbe:	4854      	ldr	r0, [pc, #336]	; (8004f10 <_printf_i+0x244>)
 8004dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2308      	moveq	r3, #8
 8004dc6:	230a      	movne	r3, #10
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dce:	6865      	ldr	r5, [r4, #4]
 8004dd0:	60a5      	str	r5, [r4, #8]
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	bfa2      	ittt	ge
 8004dd6:	6821      	ldrge	r1, [r4, #0]
 8004dd8:	f021 0104 	bicge.w	r1, r1, #4
 8004ddc:	6021      	strge	r1, [r4, #0]
 8004dde:	b90e      	cbnz	r6, 8004de4 <_printf_i+0x118>
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	d04d      	beq.n	8004e80 <_printf_i+0x1b4>
 8004de4:	4615      	mov	r5, r2
 8004de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dea:	fb03 6711 	mls	r7, r3, r1, r6
 8004dee:	5dc7      	ldrb	r7, [r0, r7]
 8004df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004df4:	4637      	mov	r7, r6
 8004df6:	42bb      	cmp	r3, r7
 8004df8:	460e      	mov	r6, r1
 8004dfa:	d9f4      	bls.n	8004de6 <_printf_i+0x11a>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d10b      	bne.n	8004e18 <_printf_i+0x14c>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	07de      	lsls	r6, r3, #31
 8004e04:	d508      	bpl.n	8004e18 <_printf_i+0x14c>
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	6861      	ldr	r1, [r4, #4]
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	bfde      	ittt	le
 8004e0e:	2330      	movle	r3, #48	; 0x30
 8004e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e18:	1b52      	subs	r2, r2, r5
 8004e1a:	6122      	str	r2, [r4, #16]
 8004e1c:	f8cd a000 	str.w	sl, [sp]
 8004e20:	464b      	mov	r3, r9
 8004e22:	aa03      	add	r2, sp, #12
 8004e24:	4621      	mov	r1, r4
 8004e26:	4640      	mov	r0, r8
 8004e28:	f7ff fee2 	bl	8004bf0 <_printf_common>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d14c      	bne.n	8004eca <_printf_i+0x1fe>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	b004      	add	sp, #16
 8004e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3a:	4835      	ldr	r0, [pc, #212]	; (8004f10 <_printf_i+0x244>)
 8004e3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e40:	6829      	ldr	r1, [r5, #0]
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e48:	6029      	str	r1, [r5, #0]
 8004e4a:	061d      	lsls	r5, r3, #24
 8004e4c:	d514      	bpl.n	8004e78 <_printf_i+0x1ac>
 8004e4e:	07df      	lsls	r7, r3, #31
 8004e50:	bf44      	itt	mi
 8004e52:	f043 0320 	orrmi.w	r3, r3, #32
 8004e56:	6023      	strmi	r3, [r4, #0]
 8004e58:	b91e      	cbnz	r6, 8004e62 <_printf_i+0x196>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	f023 0320 	bic.w	r3, r3, #32
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	2310      	movs	r3, #16
 8004e64:	e7b0      	b.n	8004dc8 <_printf_i+0xfc>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	f043 0320 	orr.w	r3, r3, #32
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	2378      	movs	r3, #120	; 0x78
 8004e70:	4828      	ldr	r0, [pc, #160]	; (8004f14 <_printf_i+0x248>)
 8004e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e76:	e7e3      	b.n	8004e40 <_printf_i+0x174>
 8004e78:	0659      	lsls	r1, r3, #25
 8004e7a:	bf48      	it	mi
 8004e7c:	b2b6      	uxthmi	r6, r6
 8004e7e:	e7e6      	b.n	8004e4e <_printf_i+0x182>
 8004e80:	4615      	mov	r5, r2
 8004e82:	e7bb      	b.n	8004dfc <_printf_i+0x130>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	6826      	ldr	r6, [r4, #0]
 8004e88:	6961      	ldr	r1, [r4, #20]
 8004e8a:	1d18      	adds	r0, r3, #4
 8004e8c:	6028      	str	r0, [r5, #0]
 8004e8e:	0635      	lsls	r5, r6, #24
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	d501      	bpl.n	8004e98 <_printf_i+0x1cc>
 8004e94:	6019      	str	r1, [r3, #0]
 8004e96:	e002      	b.n	8004e9e <_printf_i+0x1d2>
 8004e98:	0670      	lsls	r0, r6, #25
 8004e9a:	d5fb      	bpl.n	8004e94 <_printf_i+0x1c8>
 8004e9c:	8019      	strh	r1, [r3, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	4615      	mov	r5, r2
 8004ea4:	e7ba      	b.n	8004e1c <_printf_i+0x150>
 8004ea6:	682b      	ldr	r3, [r5, #0]
 8004ea8:	1d1a      	adds	r2, r3, #4
 8004eaa:	602a      	str	r2, [r5, #0]
 8004eac:	681d      	ldr	r5, [r3, #0]
 8004eae:	6862      	ldr	r2, [r4, #4]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f7fb fa74 	bl	80003a0 <memchr>
 8004eb8:	b108      	cbz	r0, 8004ebe <_printf_i+0x1f2>
 8004eba:	1b40      	subs	r0, r0, r5
 8004ebc:	6060      	str	r0, [r4, #4]
 8004ebe:	6863      	ldr	r3, [r4, #4]
 8004ec0:	6123      	str	r3, [r4, #16]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec8:	e7a8      	b.n	8004e1c <_printf_i+0x150>
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	462a      	mov	r2, r5
 8004ece:	4649      	mov	r1, r9
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	47d0      	blx	sl
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d0ab      	beq.n	8004e30 <_printf_i+0x164>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	079b      	lsls	r3, r3, #30
 8004edc:	d413      	bmi.n	8004f06 <_printf_i+0x23a>
 8004ede:	68e0      	ldr	r0, [r4, #12]
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	4298      	cmp	r0, r3
 8004ee4:	bfb8      	it	lt
 8004ee6:	4618      	movlt	r0, r3
 8004ee8:	e7a4      	b.n	8004e34 <_printf_i+0x168>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4632      	mov	r2, r6
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	47d0      	blx	sl
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d09b      	beq.n	8004e30 <_printf_i+0x164>
 8004ef8:	3501      	adds	r5, #1
 8004efa:	68e3      	ldr	r3, [r4, #12]
 8004efc:	9903      	ldr	r1, [sp, #12]
 8004efe:	1a5b      	subs	r3, r3, r1
 8004f00:	42ab      	cmp	r3, r5
 8004f02:	dcf2      	bgt.n	8004eea <_printf_i+0x21e>
 8004f04:	e7eb      	b.n	8004ede <_printf_i+0x212>
 8004f06:	2500      	movs	r5, #0
 8004f08:	f104 0619 	add.w	r6, r4, #25
 8004f0c:	e7f5      	b.n	8004efa <_printf_i+0x22e>
 8004f0e:	bf00      	nop
 8004f10:	08005161 	.word	0x08005161
 8004f14:	08005172 	.word	0x08005172

08004f18 <_sbrk_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d06      	ldr	r5, [pc, #24]	; (8004f34 <_sbrk_r+0x1c>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fc fe4e 	bl	8001bc4 <_sbrk>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_sbrk_r+0x1a>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_sbrk_r+0x1a>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	20000820 	.word	0x20000820

08004f38 <__sread>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	f000 f8a0 	bl	8005084 <_read_r>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	bfab      	itete	ge
 8004f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f4c:	181b      	addge	r3, r3, r0
 8004f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f52:	bfac      	ite	ge
 8004f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f56:	81a3      	strhlt	r3, [r4, #12]
 8004f58:	bd10      	pop	{r4, pc}

08004f5a <__swrite>:
 8004f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5e:	461f      	mov	r7, r3
 8004f60:	898b      	ldrh	r3, [r1, #12]
 8004f62:	05db      	lsls	r3, r3, #23
 8004f64:	4605      	mov	r5, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	4616      	mov	r6, r2
 8004f6a:	d505      	bpl.n	8004f78 <__swrite+0x1e>
 8004f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f70:	2302      	movs	r3, #2
 8004f72:	2200      	movs	r2, #0
 8004f74:	f000 f868 	bl	8005048 <_lseek_r>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	4632      	mov	r2, r6
 8004f86:	463b      	mov	r3, r7
 8004f88:	4628      	mov	r0, r5
 8004f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8e:	f000 b817 	b.w	8004fc0 <_write_r>

08004f92 <__sseek>:
 8004f92:	b510      	push	{r4, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9a:	f000 f855 	bl	8005048 <_lseek_r>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	bf15      	itete	ne
 8004fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fae:	81a3      	strheq	r3, [r4, #12]
 8004fb0:	bf18      	it	ne
 8004fb2:	81a3      	strhne	r3, [r4, #12]
 8004fb4:	bd10      	pop	{r4, pc}

08004fb6 <__sclose>:
 8004fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fba:	f000 b813 	b.w	8004fe4 <_close_r>
	...

08004fc0 <_write_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d07      	ldr	r5, [pc, #28]	; (8004fe0 <_write_r+0x20>)
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	4611      	mov	r1, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	602a      	str	r2, [r5, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fc fda8 	bl	8001b24 <_write>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_write_r+0x1e>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_write_r+0x1e>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000820 	.word	0x20000820

08004fe4 <_close_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d06      	ldr	r5, [pc, #24]	; (8005000 <_close_r+0x1c>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fc fdb4 	bl	8001b5c <_close>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_close_r+0x1a>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_close_r+0x1a>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	20000820 	.word	0x20000820

08005004 <_fstat_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_fstat_r+0x20>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	f7fc fdaf 	bl	8001b74 <_fstat>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d102      	bne.n	8005020 <_fstat_r+0x1c>
 800501a:	682b      	ldr	r3, [r5, #0]
 800501c:	b103      	cbz	r3, 8005020 <_fstat_r+0x1c>
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	20000820 	.word	0x20000820

08005028 <_isatty_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d06      	ldr	r5, [pc, #24]	; (8005044 <_isatty_r+0x1c>)
 800502c:	2300      	movs	r3, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	f7fc fdae 	bl	8001b94 <_isatty>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_isatty_r+0x1a>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_isatty_r+0x1a>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	20000820 	.word	0x20000820

08005048 <_lseek_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d07      	ldr	r5, [pc, #28]	; (8005068 <_lseek_r+0x20>)
 800504c:	4604      	mov	r4, r0
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	2200      	movs	r2, #0
 8005054:	602a      	str	r2, [r5, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fc fda7 	bl	8001baa <_lseek>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_lseek_r+0x1e>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_lseek_r+0x1e>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000820 	.word	0x20000820

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_lock+0x8>)
 800506e:	f7ff bb1d 	b.w	80046ac <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	20000814 	.word	0x20000814

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_unlock+0x8>)
 800507a:	f7ff bb18 	b.w	80046ae <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	20000814 	.word	0x20000814

08005084 <_read_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4d07      	ldr	r5, [pc, #28]	; (80050a4 <_read_r+0x20>)
 8005088:	4604      	mov	r4, r0
 800508a:	4608      	mov	r0, r1
 800508c:	4611      	mov	r1, r2
 800508e:	2200      	movs	r2, #0
 8005090:	602a      	str	r2, [r5, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	f7fc fd29 	bl	8001aea <_read>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_read_r+0x1e>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_read_r+0x1e>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	20000820 	.word	0x20000820

080050a8 <_init>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr

080050b4 <_fini>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr
