Respuestas a preguntas orientadoras
Arquitectura de Microprocesadores
Carrera de Especialización en Sistemas Embebidos
FIUBA 2022

Jordán Joan Emmanuel


Glosario

SO: sistema operativo
SE: sistema embebido
RT: tiempo real, la aplicación asegura cumplir los dead lines. Esa garantía la da el SO y el procesador.
ALU: unidad aritmético lógica
PC: contador de programa
SP: stack pointer

Preguntas orientadoras

1. 	Describa brevemente los diferentes perfiles de familias de microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias características. 

Los perfiles son líneas de productos, orientadas a determinados mercados o soluciones. Tienen que ver con el rendimiento esperado, y se deben elegir según 
la aplicación requerida. Los tres perfiles de ARM son los cortex A, cortex R y cortex M.

Cortex A: línea orientada a aplicaciones (corren en un SO de propósito general, como Android). Procesadores de alto rendimiento orientados a la implementación 
de SO en SE de alta performance (optimizados para correr aplicaciones de usuario en un SO multitarea). Pueden procesar muchas cosas al mismo tiempo, pero 
es un procesamiento no determinista (pueden existir demoras). No es adecuado para aplicaciones en RT.

Cortex R: línea orientada a tiempo real. Procesadores orientados a sistemas de RT donde la necesidad principal es implementar soluciones de baja latencia y alta 
capacidad de procesamiento. Ejemplos: sistemas del automóvil (seguridad, frenado, etc.), sistemas médicos, industriales, etc.
El cortex R es como un cortex A (alta capacidad de procesamiento) pero sin la capacidad de hacer que las aplicaciones corran rápido. Es un procesador potente 
pero orientado a correr aplicaciones de RT (baja latencia y alta capacidad de procesamiento). No tienen memoria caché.

Cortex M: línea orientada a microcontroladores. Procesadores orientados a dispositivos de consumo masivo y sistemas embebidos compactos (diseñados para 
alta densidad de código y programación en C). Comparado con un cortex M, un cortex A tiene mucha más capacidad de procesamiento, pero tiene mucho mayor 
consumo y costo. Los cortex M ya vienen con memoria, flash, periféricos internos. Los cortex A no.

Cortex M

1. 	Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y M4

Cortex M0: posee arquitectura ARMv6-M y arquitectura de memoria Von-Neumann (bus único). No posee MPU. Admite sólo instrucciones de 32 bits y no soporta 
todo el set de instrucciones Thumb. Presenta una implementación mínima de bajo costo para aplicaciones sencillas que requieren bajo consumo.

Cortex M3: posee arquitectura ARMv7-M y arquitectura Harvard (más rápida). Admite instrucciones hasta 64 bits y soporta Thumb. Presentan mayor performance 
y capacidades de protección a memoria. El set de instrucciones más extenso permite operaciones más avanzadas y eficientes, tales como la división por hardware.

Cortex M4: posee arquitectura ARMv7E-M y arquitectura Harvard. Admite instrucciones hasta 64 bits y soporta Thumb. Tiene posibilidad de agregar memoria 
caché al CPU. Respecto a M3, el set de instrucciones es más extenso y los co-procesadores son más potentes, permitiendo procesamiento digital de señales (DSP) 
y operaciones de punto flotante (FPU).

2.	¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique. 

Se dice que el set de instrucciones Thumb permite mayor densidad de código porque permite ejecutar las mismas tareas empleando un tamaño de programa menor. 
Esto reduce tanto el costo como el consumo de energía.

3.	¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este tipo de arquitectura?

En una arquitectura load-store, el set de instrucciones se divide en dos tipos: de acceso a memoria (load y store entre memoria y registros) y de operaciones de la 
ALU (sólo entre registros). Un ejemplo de arquitectura con este modelo es el x86. En la primera, se cargan datos desde la memoria a los registros internos del 
procesador (lectura) y también desde estos registros hacia la memoria (escritura). En la segunda, se tiene como operandos sólo registros del procesador, por lo 
que, para ejecutar operaciones entre posiciones de memoria primero se deben cargar éstas en los registros del procesador.
En resumen, ninguna instrucción opera directamente sobre memoria, por lo que para acceder u operar sobre un valor en memoria, primero se lo debe cargar en 
un registro, y luego se lo debe guardar en un registro para pasarlo nuevamente a memoria.

4.	¿Cómo es el mapa de memoria de la familia? 

El mapa de memoria de los Cortex M es plano de 4GB. Presenta secciones definidas para el programa, la memoria RAM, los periféricos, etc. Cada sección comienza 
en un determinado lugar de la memoria representado con un offset.

5.	¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP? 

Los stack pointers del OS (MSP) y de las tareas de aplicación (PSP) permiten implementar un OS más confiable y eficiente sobre los Cortex M. El OS puede definir 
las regiones del stack permitidas para cada tarea, evitando acceder a regiones no permitidas.

6.	Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y cómo se conmuta de uno al otro. Describa un ejemplo en el que se 
pasa del modo privilegiado a no privilegiado y nuevamente a privilegiado.

Existen dos modos de operación de los procesadores Cortex M, el modo usuario (no privilegiado) y el modo supervisor (privilegiado).
El modo privilegiado brinda un acceso y control total de las instrucciones del procesador y recursos de la arquitectura. 
El modo no privilegiado es aquel en el que corren las aplicaciones, y dicho acceso es restringido, es decir, el sistema operativo puede asignar recursos del sistema a 
la aplicación, ya sea como privados o compartidos. Este modo brinda protección frente a otros procesos y tareas.

7.	¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo.

En un modelo de registros ortogonal, todos los registros (excepto stack pointer, link register y program counter) pueden ser utilizados de forma indistinta por las 
instrucciones. Las instrucciones no operan sobre registros específicos, si no que existe un grupo de registros de propósito general en el cual todas las instrucciones 
pueden operar. En los Cortex M3 y M4, existen 13 registros de propósito general (r0 a r12) en donde pueden operar las instrucciones de AND, ADD, MOV, etc. sobre 
cualquier registro. Por ejemplo, la suma entre los registros r9 y r11: ADD r9, r11.

8.	¿Qué ventajas presenta el uso de instrucciones de ejecución condicional (IT)? Dé un ejemplo.

A la instrucción se le agrega sufijo que la hace condicional, siendo un NOP la próxima instrucción a ejecutarse en caso de no cumplir la condición. La ventaja de su 
uso es que permite ejecutar un programa sin hacer saltos, mejorando la performance. Se pueden colocar hasta 4 sentencias condicionales.

El siguiente ejemplo utiliza y ubica el máximo de cuatro instrucciones posibles en los bloques “then” o “else”:

ittte ne
addne 	r7,#5          	// then
andne 	r7, r8         		// then
movne 	r7, r9         		// then
moveq 	r7,#0xDE       	// else (se especifica la condición inversa a NE)

Equivalente en C:

if (NE)
{
	add 	r7,#5
	and 	r7, r8
	mov 	r7, r9
}
else 
{
	mov r7, 0xDE
}

9.	Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault). 

Reset, NMI y HardFault, en ese orden, son las excepciones más prioritarias, según su posición (de menor a mayor) en la tabla de vectores de interrupción.
-	Reset (prioridad -3): excepción que se ejecuta cuando el microprocesador se reinicia, ya sea Power-on o Local.
-	NMI (prioridad -2): son interrupciones no enmascarables, por lo que no pueden deshabilitarse. Si ocurre un error en otro handler, se dispara un NMI. Se puede generar por hardware, o una excepción de NMI por software. 
-	Hardfault (prioridad -1): HardFault es la falla genérica que existe para todas las clases de fallas que no pueden ser manejadas por ninguno de los otros mecanismos de excepción, tales como división por 0, acceso indebido a memoria, etc.

10.	Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno?

• Push: copia el valor de un registro en la posición inferior a la apuntada por la pila (se decrementa). Luego el puntero queda en esa posición.
• Pop: copia el valor de la posición apuntada por la pila en un registro. Luego el puntero se vuelve a la posición superior (se incrementa) disponible en la pila.
Nota: la pila crece hacia abajo.

El stack pointer tiene otras funciones como swap, peek, duplicate y rotate. Por ejemplo, en swap se intercambian las posiciones de los últimos dos valores de la pila, 
en peek se recupera el próximo valor del stack en un registro (similar a pop, pero sin incrementar el puntero a la siguiente posición disponible), etc. 

11.	Describa la secuencia de reset del microprocesador. 

Existen tres formas de reseteo del microprocesador: power on reset, system reset y processor reset. Luego de que se detecte cualquiera de estas formas y antes de 
que el procesador comience a ejecutar el programa en memoria, la secuencia de reset es:
•Se lee la primera posición del mapa de memoria, correspondiente a la dirección inicial del MSP (main stack pointer).
•Se lee la segunda posición del mapa de memoria, correspondiente al vector de reset (inicio del reset handler).
•El procesador guarda las dos direcciones leídas en el MSP y el PC, respectivamente.

12.	¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de los periféricos? 

Son los periféricos diseñados e implementados por el fabricante del núcleo (ARM). A diferencia del resto de los periféricos, estos se encuentran físicamente en el 
núcleo del procesador, por lo que son de baja latencia (ejemplo SysTick, MPU, NVIC). Cualquier fabricante de microcontroladores con núcleo ARM (ejemplo ST) 
tendrá dichos periféricos embebidos en el core, además de los periféricos externos al mismo que decida incluir en su diseño.

13.	¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo.

Las interrupciones se implementan sobre un arreglo, con mayor prioridad a menor índice. La prioridad de las interrupciones se puede elegir, excepto para reset, NMI 
y HardFault, cuyas posiciones en el arreglo son fijas (índice -3, -2 y -1). Al habilitar interrupciones, se les debe asignar una posición en dicho arreglo. Por ejemplo, si 
tenemos habilitadas tres interrupciones correspondientes a: 
A)	interrupción externa en el índice 0x40, 
B)	conversor A/D en el índice 0x60
C)	desborde de timer en el índice 0x80
La interrupción A tendrá mayor prioridad que las interrupciones B y C, y a su vez la interrupción B tendrá mayor prioridad que la interrupción C.

14.	¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta? 

El CMSIS es una interfaz de software común a todos los microprocesadores Cortex, implementada en C. Le permite al programador el acceso a los core peripherals 
de manera más amigable, sin tener que interactuar de manera directa con los registros del microcontrolador. Se ubica entre la capa de middleware y el hardware. 
Permite poner a andar los periféricos internos en poco tiempo y con el respaldo del fabricante del microcontrolador, quien lo provee, con documentación 
respaldatoria del mismo y de toda una comunidad de usuarios.

15.	Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender a la subrutina correspondiente? Explique 
con un ejemplo.

Si tenemos habilitadas tres interrupciones correspondientes a: 
A)	interrupción externa en el índice 0x40, 
B)	conversor A/D en el índice 0x60
C)	desborde de timer en el índice 0x80
Al ocurrir el evento de alguna de las interrupciones habilitadas, al levantarse el flag correspondiente, del programa principal se salta a la rutina de interrupción de 
servicio (ISR) asociada a la interrupción. Por ejemplo, el programa se está ejecutando en el main y ocurre una interrupción B, se saltará a la ISR de B. 
Si durante la ejecución de B, ocurre una interrupción A (mayor prioridad), B es interrumpida para saltar a la ISR de A (de igual manera que se saltó del main a la ISR 
de B). Al finalizar la ISR de A, se volverá a la ISR de B y, al finalizar ésta se volverá a la rutina del main en el punto en el que se había quedado.
Por el contrario, si durante la ejecución de B, ocurre una interrupción C (menor prioridad), B se terminará de ejecutar completa y recién en ese momento se saltará 
a la ISR de C. A su vez dentro de la ISR de C podrá ser interrumpida por A y B.  Si no hay nueva interrupción, al finalizar la ISR de C de volverá a la rutina del main en 
el punto en el que se había quedado.

17.	Explique las características avanzadas de atención a interrupciones: tail chaining y late arrival. 

Tail chaining: es el procedimiento que sigue el procesador cuando éste se encuentra atendiendo una ISR y se dispara otra excepción de mayor prioridad. En ese 
momento, detiene la ejecución de la ISR, recupera del stack los registros del procesador (salva el contexto nuevamente) y va a atender la ISR de la nueva interrupción. 
Saltea los pasos de unstacking y stacking para atender directamente dicha ISR, ahorrando ciclos de reloj.

Late arrival: al dispararse una excepción, el procesador antes de saltar a su rutina asociada, al igual que en cualquier salto a función, guarda en el stack los registros del 
procesador para preservar su valor (salva el contexto). Si durante este proceso se dispara una excepción de mayor prioridad, el procesador completará el stacking y, 
en lugar de terminar de ejecutar la primera ISR, pasará a ejecutar la ISR de mayor prioridad.

18.	¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos? 

El systick es un timer en el procesador, que genera una interrupción constante con una periodicidad de 1ms. Permite medir tiempos, así como también asignar tareas 
dentro de su rutina de interrupción asociada. En base a este tiempo, se pueden gestionar cambios entre una y otra tarea en ejecución. 
Su implementación favorece la portabilidad de los SO embebidos ya que todos los microcontroladores, de cualquier fabricante, con licencia de núcleo ARM, tienen 
este mismo timer en el procesador, por lo que se fomenta su buen uso en lugar de un timer externo.

19.	¿Qué funciones cumple la unidad de protección de memoria (MPU)? 

El MPU permite definir y controlar el acceso a determinadas regiones de memoria, asignadas a distintos programas. Para esto diferencia regiones privilegiadas y no 
privilegiadas. De este modo un programa no puede afectar el funcionamiento del resto del sistema, ya sea por un error de programación o de manera mal intencionada.

ISA

1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo 

Los sufijos son modificadores opcionales para las instrucciones, utilizados para que éstas realicen otras tareas adicionales, tales como corrimiento de bits, desplazamientos, 
acciones sobre el flag de estado, etc. Por ejemplo, al agregarle el sufijo sb a la instrucción ldr (load register), lo que hace ldrsb es, además de cargar el valor de memoria a 
registro, completar bits superiores a 8 bits con bit de signo (los 24 bits superiores con 1) para mantener el signo al pasar de 8 a 32 bits.

2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo

El sufijo 's' se utiliza para actualizar los flags de estado. Esto implica que los flags N, Z, C y V son actualizados en base al resultado de la operación.
Por ejemplo, la instrucción “adds ro, r1” lo que hace es ro = ro+r1 y actualizar el flag de estado.

3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un ejemplo con operaciones con datos de 8 bits.

La implementación de instrucciones de aritmética saturada permite “limitar” el resultado al máximo valor que se puede representar con el tipo de datos presente. Es decir, 
si el resultado sobrepasara dicho valor máximo, ocurriría un overflow y se almacenaría un dato inválido. En ocasiones se prefiere saturar que obtener un dato que desbordó 
y se aleja más de la realidad. Por ejemplo, al ajustar el nivel de volumen de una señal de sonido, alcanzar un valor de saturación causa menos distorsión que permitir un 
desborde. Otra ventaja de estas instrucciones es que permiten implementar algoritmos más eficientes en el campo del procesamiento digital de señales (DSP). 
Por ejemplo, en 8 bits, la multiplicación de dos enteros, si el resultado sobrepasa 255, lo satura a 255.

4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos de funciones? ¿Cómo se devuelve el resultado? 
¿Qué registros deben guardarse en la pila antes de ser modificados? 

Por convención, los argumentos de las funciones son recibidos en los primeros 4 registros de propósito general r0, r1, r2 y r3. Si la función presenta más de 4 parámetros, 
serán recibidos en el stack, por lo que se los deberá acceder con instrucciones ldr. Luego, el retorno de la función es almacenado en el registro r0 si es de 32 bits, o en r0 +r1 
si es de 64 bits. Por último, para poder regresar a la dirección de memoria correspondiente, se utiliza el link register, que almacena la dirección de la instrucción siguiente a 
la función que se ha llamado actualmente.

5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un ejemplo.

Una SIMD (Single Instruction Multiple Data) es una instrucción que realiza una misma operación sobre más de un dato. Su implementación permite llevar a cabo 
paralelismo a nivel de datos. Por ejemplo, la instrucción sadd16 ro, r1, r2 permite sumar por separado: los primeros elementos de r1 y de r2 (16 bits cada uno) y guardar la 
suma en el primer elemento de r0 (16 bits), y los segundos elementos de r1 y de r2 (16 bits) y guardar el resultado en el segundo elemento de ro (16 bits). La operación de 
un par de elementos no influye sobre el otro (por ejemplo, el traslado de un carry de la primera operación sobre el resultado de la segunda operación, como ocurriría en una 
instrucción add).